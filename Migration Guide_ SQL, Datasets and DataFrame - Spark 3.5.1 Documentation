From: <Saved by Blink>
Snapshot-Content-Location: https://spark.apache.org/docs/latest/sql-migration-guide.html#upgrading-from-spark-sql-32-to-33
Subject: Migration Guide: SQL, Datasets and DataFrame - Spark 3.5.1 Documentation
Date: Sun, 21 Jul 2024 03:49:16 -0600
MIME-Version: 1.0
Content-Type: multipart/related;
	type="text/html";
	boundary="----MultipartBoundary--42RUKswPkJoFcXtXRQMfSJHaGrWLU1MbiIJyTI5ZSP----"


------MultipartBoundary--42RUKswPkJoFcXtXRQMfSJHaGrWLU1MbiIJyTI5ZSP----
Content-Type: text/html
Content-ID: <frame-A4234EF54470A1780A6141213536870A@mhtml.blink>
Content-Transfer-Encoding: binary
Content-Location: https://spark.apache.org/docs/latest/sql-migration-guide.html#upgrading-from-spark-sql-32-to-33

<!DOCTYPE html><!--[if lt IE 7]>      <html class="no-js lt-ie9 lt-ie8 lt-ie7"> <![endif]--><!--[if IE 7]>         <html class="no-js lt-ie9 lt-ie8"> <![endif]--><!--[if IE 8]>         <html class="no-js lt-ie9"> <![endif]--><!--[if gt IE 8]><!--><html class=" js flexbox canvas canvastext webgl touch geolocation postmessage no-websqldatabase indexeddb hashchange history draganddrop websockets rgba hsla multiplebgs backgroundsize borderimage borderradius boxshadow textshadow opacity cssanimations csscolumns cssgradients cssreflections csstransforms csstransforms3d csstransitions fontface generatedcontent video audio localstorage sessionstorage webworkers no-applicationcache svg inlinesvg smil svgclippaths"><!--<![endif]--><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8"><link rel="stylesheet" type="text/css" href="cid:css-8ac2b12f-ee9b-4d4a-98d1-b03cd6214bff@mhtml.blink" /><link rel="stylesheet" type="text/css" href="cid:css-1405535a-4365-4858-96f9-cfeff7402c2d@mhtml.blink" /><link rel="stylesheet" type="text/css" href="cid:css-39760314-160b-4241-b128-9bf60fa2f874@mhtml.blink" /><link rel="stylesheet" type="text/css" href="cid:css-1ff15619-c112-4fd7-99ca-295a8cefa60c@mhtml.blink" /><link rel="stylesheet" type="text/css" href="cid:css-64252762-5783-4b36-996b-d611124c6323@mhtml.blink" /><link rel="stylesheet" type="text/css" href="cid:css-89346c23-c63b-4387-add5-8c2ec5745ba3@mhtml.blink" /><link rel="stylesheet" type="text/css" href="cid:css-faf1bc5f-d7ee-4ae4-9a83-159e79e009f9@mhtml.blink" /><link rel="stylesheet" type="text/css" href="cid:css-61664d54-139a-4a48-8425-c133ec0ad765@mhtml.blink" /><link rel="stylesheet" type="text/css" href="cid:css-4183a3db-38b8-465e-8309-f3d2a86f2919@mhtml.blink" />
        
        <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">

        <title>Migration Guide: SQL, Datasets and DataFrame - Spark 3.5.1 Documentation</title>
        

        


        <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css" rel="stylesheet" crossorigin="anonymous">
        <link rel="preconnect" href="https://fonts.googleapis.com/">
        <link rel="preconnect" href="https://fonts.gstatic.com/" crossorigin="">
        <link href="https://fonts.googleapis.com/css2?family=DM+Sans:ital,wght@0,400;0,500;0,700;1,400;1,500;1,700&amp;Courier+Prime:wght@400;700&amp;display=swap" rel="stylesheet">
        <link href="https://spark.apache.org/docs/latest/css/custom.css" rel="stylesheet">
        

        <link rel="stylesheet" href="https://spark.apache.org/docs/latest/css/pygments-default.css">
        <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/docsearch.js@2/dist/cdn/docsearch.min.css">
        <link rel="stylesheet" href="https://spark.apache.org/docs/latest/css/docsearch.css">

        
        <!-- Matomo -->
        
        <!-- End Matomo Code -->
        

    </head>
    <body class="global"><div style="visibility: hidden; overflow: hidden; position: absolute; top: 0px; height: 1px; width: auto; padding: 0px; border: 0px; margin: 0px; text-align: left; text-indent: 0px; text-transform: none; line-height: normal; letter-spacing: normal; word-spacing: normal;"><div id="MathJax_Hidden"></div></div><div id="MathJax_Message" style="display: none;"></div>
        <!--[if lt IE 7]>
            <p class="chromeframe">You are using an outdated browser. <a href="https://browsehappy.com/">Upgrade your browser today</a> or <a href="http://www.google.com/chromeframe/?redirect=true">install Google Chrome Frame</a> to better experience this site.</p>
        <![endif]-->

        <!-- This code is taken from http://twitter.github.com/bootstrap/examples/hero.html -->

        

        

        <div class="container">

            
                
                    <div class="left-menu-wrapper">
    <div class="left-menu">
        <h3 id="spark-sql-guide"><a href="https://spark.apache.org/docs/latest/sql-programming-guide.html">Spark SQL Guide</a><a class="anchorjs-link " href="https://spark.apache.org/docs/latest/sql-migration-guide.html#spark-sql-guide" aria-label="Anchor link for: spark sql guide" data-anchorjs-icon="" style="font-family: anchorjs-icons; font-style: normal; font-variant: normal; font-weight: normal; padding-left: 0.375em;"></a></h3>
        
<ul>

    <li>
        <a href="https://spark.apache.org/docs/latest/sql-getting-started.html">
            
                Getting Started
            
        </a>
    </li>
    
    

    <li>
        <a href="https://spark.apache.org/docs/latest/sql-data-sources.html">
            
                Data Sources
            
        </a>
    </li>
    
    

    <li>
        <a href="https://spark.apache.org/docs/latest/sql-performance-tuning.html">
            
                Performance Tuning
            
        </a>
    </li>
    
    

    <li>
        <a href="https://spark.apache.org/docs/latest/sql-distributed-sql-engine.html">
            
                Distributed SQL Engine
            
        </a>
    </li>
    
    

    <li>
        <a href="https://spark.apache.org/docs/latest/sql-pyspark-pandas-with-arrow.html">
            
                PySpark Usage Guide for Pandas with Apache Arrow
            
        </a>
    </li>
    
    

    <li>
        <a href="https://spark.apache.org/docs/latest/sql-migration-guide.html">
            
                Migration Guide
            
        </a>
    </li>
    
    

    <li>
        <a href="https://spark.apache.org/docs/latest/sql-ref.html">
            
                SQL Reference
            
        </a>
    </li>
    
    

    <li>
        <a href="https://spark.apache.org/docs/latest/sql-error-conditions.html">
            
                Error Conditions
            
        </a>
    </li>
    
    

</ul>

    </div>
</div>
                
                <input id="nav-trigger" class="nav-trigger" checked="" type="checkbox">
                <label for="nav-trigger"></label>
                <div class="content-with-sidebar mr-3" id="content">
                    
                        <h1 class="title" id="migration-guide-sql-datasets-and-dataframe">Migration Guide: SQL, Datasets and DataFrame<a class="anchorjs-link " href="https://spark.apache.org/docs/latest/sql-migration-guide.html#migration-guide-sql-datasets-and-dataframe" aria-label="Anchor link for: migration guide sql datasets and dataframe" data-anchorjs-icon="" style="font-family: anchorjs-icons; font-style: normal; font-variant: normal; font-weight: normal; padding-left: 0.375em;"></a></h1>
                    

                    <ul id="markdown-toc">
  <li><a href="https://spark.apache.org/docs/latest/sql-migration-guide.html#upgrading-from-spark-sql-34-to-35" id="markdown-toc-upgrading-from-spark-sql-34-to-35">Upgrading from Spark SQL 3.4 to 3.5</a></li>
  <li><a href="https://spark.apache.org/docs/latest/sql-migration-guide.html#upgrading-from-spark-sql-33-to-34" id="markdown-toc-upgrading-from-spark-sql-33-to-34">Upgrading from Spark SQL 3.3 to 3.4</a></li>
  <li><a href="https://spark.apache.org/docs/latest/sql-migration-guide.html#upgrading-from-spark-sql-32-to-33" id="markdown-toc-upgrading-from-spark-sql-32-to-33">Upgrading from Spark SQL 3.2 to 3.3</a></li>
  <li><a href="https://spark.apache.org/docs/latest/sql-migration-guide.html#upgrading-from-spark-sql-31-to-32" id="markdown-toc-upgrading-from-spark-sql-31-to-32">Upgrading from Spark SQL 3.1 to 3.2</a></li>
  <li><a href="https://spark.apache.org/docs/latest/sql-migration-guide.html#upgrading-from-spark-sql-30-to-31" id="markdown-toc-upgrading-from-spark-sql-30-to-31">Upgrading from Spark SQL 3.0 to 3.1</a></li>
  <li><a href="https://spark.apache.org/docs/latest/sql-migration-guide.html#upgrading-from-spark-sql-301-to-302" id="markdown-toc-upgrading-from-spark-sql-301-to-302">Upgrading from Spark SQL 3.0.1 to 3.0.2</a></li>
  <li><a href="https://spark.apache.org/docs/latest/sql-migration-guide.html#upgrading-from-spark-sql-30-to-301" id="markdown-toc-upgrading-from-spark-sql-30-to-301">Upgrading from Spark SQL 3.0 to 3.0.1</a></li>
  <li><a href="https://spark.apache.org/docs/latest/sql-migration-guide.html#upgrading-from-spark-sql-24-to-30" id="markdown-toc-upgrading-from-spark-sql-24-to-30">Upgrading from Spark SQL 2.4 to 3.0</a>    <ul>
      <li><a href="https://spark.apache.org/docs/latest/sql-migration-guide.html#datasetdataframe-apis" id="markdown-toc-datasetdataframe-apis">Dataset/DataFrame APIs</a></li>
      <li><a href="https://spark.apache.org/docs/latest/sql-migration-guide.html#ddl-statements" id="markdown-toc-ddl-statements">DDL Statements</a></li>
      <li><a href="https://spark.apache.org/docs/latest/sql-migration-guide.html#udfs-and-built-in-functions" id="markdown-toc-udfs-and-built-in-functions">UDFs and Built-in Functions</a></li>
      <li><a href="https://spark.apache.org/docs/latest/sql-migration-guide.html#query-engine" id="markdown-toc-query-engine">Query Engine</a></li>
      <li><a href="https://spark.apache.org/docs/latest/sql-migration-guide.html#data-sources" id="markdown-toc-data-sources">Data Sources</a></li>
      <li><a href="https://spark.apache.org/docs/latest/sql-migration-guide.html#others" id="markdown-toc-others">Others</a></li>
    </ul>
  </li>
  <li><a href="https://spark.apache.org/docs/latest/sql-migration-guide.html#upgrading-from-spark-sql-247-to-248" id="markdown-toc-upgrading-from-spark-sql-247-to-248">Upgrading from Spark SQL 2.4.7 to 2.4.8</a></li>
  <li><a href="https://spark.apache.org/docs/latest/sql-migration-guide.html#upgrading-from-spark-sql-245-to-246" id="markdown-toc-upgrading-from-spark-sql-245-to-246">Upgrading from Spark SQL 2.4.5 to 2.4.6</a></li>
  <li><a href="https://spark.apache.org/docs/latest/sql-migration-guide.html#upgrading-from-spark-sql-244-to-245" id="markdown-toc-upgrading-from-spark-sql-244-to-245">Upgrading from Spark SQL 2.4.4 to 2.4.5</a></li>
  <li><a href="https://spark.apache.org/docs/latest/sql-migration-guide.html#upgrading-from-spark-sql-243-to-244" id="markdown-toc-upgrading-from-spark-sql-243-to-244">Upgrading from Spark SQL 2.4.3 to 2.4.4</a></li>
  <li><a href="https://spark.apache.org/docs/latest/sql-migration-guide.html#upgrading-from-spark-sql-24-to-241" id="markdown-toc-upgrading-from-spark-sql-24-to-241">Upgrading from Spark SQL 2.4 to 2.4.1</a></li>
  <li><a href="https://spark.apache.org/docs/latest/sql-migration-guide.html#upgrading-from-spark-sql-23-to-24" id="markdown-toc-upgrading-from-spark-sql-23-to-24">Upgrading from Spark SQL 2.3 to 2.4</a></li>
  <li><a href="https://spark.apache.org/docs/latest/sql-migration-guide.html#upgrading-from-spark-sql-22-to-23" id="markdown-toc-upgrading-from-spark-sql-22-to-23">Upgrading from Spark SQL 2.2 to 2.3</a></li>
  <li><a href="https://spark.apache.org/docs/latest/sql-migration-guide.html#upgrading-from-spark-sql-21-to-22" id="markdown-toc-upgrading-from-spark-sql-21-to-22">Upgrading from Spark SQL 2.1 to 2.2</a></li>
  <li><a href="https://spark.apache.org/docs/latest/sql-migration-guide.html#upgrading-from-spark-sql-20-to-21" id="markdown-toc-upgrading-from-spark-sql-20-to-21">Upgrading from Spark SQL 2.0 to 2.1</a></li>
  <li><a href="https://spark.apache.org/docs/latest/sql-migration-guide.html#upgrading-from-spark-sql-16-to-20" id="markdown-toc-upgrading-from-spark-sql-16-to-20">Upgrading from Spark SQL 1.6 to 2.0</a></li>
  <li><a href="https://spark.apache.org/docs/latest/sql-migration-guide.html#upgrading-from-spark-sql-15-to-16" id="markdown-toc-upgrading-from-spark-sql-15-to-16">Upgrading from Spark SQL 1.5 to 1.6</a></li>
  <li><a href="https://spark.apache.org/docs/latest/sql-migration-guide.html#upgrading-from-spark-sql-14-to-15" id="markdown-toc-upgrading-from-spark-sql-14-to-15">Upgrading from Spark SQL 1.4 to 1.5</a></li>
  <li><a href="https://spark.apache.org/docs/latest/sql-migration-guide.html#upgrading-from-spark-sql-13-to-14" id="markdown-toc-upgrading-from-spark-sql-13-to-14">Upgrading from Spark SQL 1.3 to 1.4</a></li>
  <li><a href="https://spark.apache.org/docs/latest/sql-migration-guide.html#upgrading-from-spark-sql-10-12-to-13" id="markdown-toc-upgrading-from-spark-sql-10-12-to-13">Upgrading from Spark SQL 1.0-1.2 to 1.3</a></li>
  <li><a href="https://spark.apache.org/docs/latest/sql-migration-guide.html#compatibility-with-apache-hive" id="markdown-toc-compatibility-with-apache-hive">Compatibility with Apache Hive</a></li>
</ul>

<h2 id="upgrading-from-spark-sql-34-to-35">Upgrading from Spark SQL 3.4 to 3.5<a class="anchorjs-link " href="https://spark.apache.org/docs/latest/sql-migration-guide.html#upgrading-from-spark-sql-34-to-35" aria-label="Anchor link for: upgrading from spark sql 34 to 35" data-anchorjs-icon="" style="font-family: anchorjs-icons; font-style: normal; font-variant: normal; font-weight: normal; padding-left: 0.375em;"></a></h2>

<ul>
  <li>Since Spark 3.5, the JDBC options related to DS V2 pushdown are <code class="language-plaintext highlighter-rouge">true</code> by default. These options include: <code class="language-plaintext highlighter-rouge">pushDownAggregate</code>, <code class="language-plaintext highlighter-rouge">pushDownLimit</code>, <code class="language-plaintext highlighter-rouge">pushDownOffset</code> and <code class="language-plaintext highlighter-rouge">pushDownTableSample</code>. To restore the legacy behavior, please set them to <code class="language-plaintext highlighter-rouge">false</code>. e.g. set <code class="language-plaintext highlighter-rouge">spark.sql.catalog.your_catalog_name.pushDownAggregate</code> to <code class="language-plaintext highlighter-rouge">false</code>.</li>
  <li>Since Spark 3.5, Spark thrift server will interrupt task when canceling a running statement. To restore the previous behavior, set <code class="language-plaintext highlighter-rouge">spark.sql.thriftServer.interruptOnCancel</code> to <code class="language-plaintext highlighter-rouge">false</code>.</li>
  <li>Since Spark 3.5, Row’s json and prettyJson methods are moved to <code class="language-plaintext highlighter-rouge">ToJsonUtil</code>.</li>
  <li>Since Spark 3.5, the <code class="language-plaintext highlighter-rouge">plan</code> field is moved from <code class="language-plaintext highlighter-rouge">AnalysisException</code> to <code class="language-plaintext highlighter-rouge">EnhancedAnalysisException</code>.</li>
  <li>Since Spark 3.5, <code class="language-plaintext highlighter-rouge">spark.sql.optimizer.canChangeCachedPlanOutputPartitioning</code> is enabled by default. To restore the previous behavior, set <code class="language-plaintext highlighter-rouge">spark.sql.optimizer.canChangeCachedPlanOutputPartitioning</code> to <code class="language-plaintext highlighter-rouge">false</code>.</li>
  <li>Since Spark 3.5, the <code class="language-plaintext highlighter-rouge">array_insert</code> function is 1-based for negative indexes. It inserts new element at the end of input arrays for the index -1. To restore the previous behavior, set <code class="language-plaintext highlighter-rouge">spark.sql.legacy.negativeIndexInArrayInsert</code> to <code class="language-plaintext highlighter-rouge">true</code>.</li>
  <li>Since Spark 3.5, the Avro will throw <code class="language-plaintext highlighter-rouge">AnalysisException</code> when reading Interval types as Date or Timestamp types, or reading Decimal types with lower precision. To restore the legacy behavior, set <code class="language-plaintext highlighter-rouge">spark.sql.legacy.avro.allowIncompatibleSchema</code> to <code class="language-plaintext highlighter-rouge">true</code></li>
</ul>

<h2 id="upgrading-from-spark-sql-33-to-34">Upgrading from Spark SQL 3.3 to 3.4<a class="anchorjs-link " href="https://spark.apache.org/docs/latest/sql-migration-guide.html#upgrading-from-spark-sql-33-to-34" aria-label="Anchor link for: upgrading from spark sql 33 to 34" data-anchorjs-icon="" style="font-family: anchorjs-icons; font-style: normal; font-variant: normal; font-weight: normal; padding-left: 0.375em;"></a></h2>

<ul>
  <li>Since Spark 3.4, INSERT INTO commands with explicit column lists comprising fewer columns than the target table will automatically add the corresponding default values for the remaining columns (or NULL for any column lacking an explicitly-assigned default value). In Spark 3.3 or earlier, these commands would have failed returning errors reporting that the number of provided columns does not match the number of columns in the target table. Note that disabling <code class="language-plaintext highlighter-rouge">spark.sql.defaultColumn.useNullsForMissingDefaultValues</code> will restore the previous behavior.</li>
  <li>Since Spark 3.4, Number or Number(*) from Teradata will be treated as Decimal(38,18). In Spark 3.3 or earlier, Number or Number(*) from Teradata will be treated as Decimal(38, 0), in which case the fractional part will be removed.</li>
  <li>Since Spark 3.4, v1 database, table, permanent view and function identifier will include ‘spark_catalog’ as the catalog name if database is defined, e.g. a table identifier will be: <code class="language-plaintext highlighter-rouge">spark_catalog.default.t</code>. To restore the legacy behavior, set <code class="language-plaintext highlighter-rouge">spark.sql.legacy.v1IdentifierNoCatalog</code> to <code class="language-plaintext highlighter-rouge">true</code>.</li>
  <li>Since Spark 3.4, when ANSI SQL mode(configuration <code class="language-plaintext highlighter-rouge">spark.sql.ansi.enabled</code>) is on, Spark SQL always returns NULL result on getting a map value with a non-existing key. In Spark 3.3 or earlier, there will be an error.</li>
  <li>Since Spark 3.4, the SQL CLI <code class="language-plaintext highlighter-rouge">spark-sql</code> does not print the prefix <code class="language-plaintext highlighter-rouge">Error in query:</code> before the error message of <code class="language-plaintext highlighter-rouge">AnalysisException</code>.</li>
  <li>Since Spark 3.4, <code class="language-plaintext highlighter-rouge">split</code> function ignores trailing empty strings when <code class="language-plaintext highlighter-rouge">regex</code> parameter is empty.</li>
  <li>Since Spark 3.4, the <code class="language-plaintext highlighter-rouge">to_binary</code> function throws error for a malformed <code class="language-plaintext highlighter-rouge">str</code> input. Use <code class="language-plaintext highlighter-rouge">try_to_binary</code> to tolerate malformed input and return NULL instead.
    <ul>
      <li>Valid Base64 string should include symbols from in base64 alphabet (A-Za-z0-9+/), optional padding (<code class="language-plaintext highlighter-rouge">=</code>), and optional whitespaces. Whitespaces are skipped in conversion except when they are preceded by padding symbol(s). If padding is present it should conclude the string and follow rules described in RFC 4648 § 4.</li>
      <li>Valid hexadecimal strings should include only allowed symbols (0-9A-Fa-f).</li>
      <li>Valid values for <code class="language-plaintext highlighter-rouge">fmt</code> are case-insensitive <code class="language-plaintext highlighter-rouge">hex</code>, <code class="language-plaintext highlighter-rouge">base64</code>, <code class="language-plaintext highlighter-rouge">utf-8</code>, <code class="language-plaintext highlighter-rouge">utf8</code>.</li>
    </ul>
  </li>
  <li>Since Spark 3.4, Spark throws only <code class="language-plaintext highlighter-rouge">PartitionsAlreadyExistException</code> when it creates partitions but some of them exist already. In Spark 3.3 or earlier, Spark can throw either <code class="language-plaintext highlighter-rouge">PartitionsAlreadyExistException</code> or <code class="language-plaintext highlighter-rouge">PartitionAlreadyExistsException</code>.</li>
  <li>Since Spark 3.4, Spark will do validation for partition spec in ALTER PARTITION to follow the behavior of <code class="language-plaintext highlighter-rouge">spark.sql.storeAssignmentPolicy</code> which may cause an exception if type conversion fails, e.g. <code class="language-plaintext highlighter-rouge">ALTER TABLE .. ADD PARTITION(p='a')</code> if column <code class="language-plaintext highlighter-rouge">p</code> is int type. To restore the legacy behavior, set <code class="language-plaintext highlighter-rouge">spark.sql.legacy.skipTypeValidationOnAlterPartition</code> to <code class="language-plaintext highlighter-rouge">true</code>.</li>
  <li>Since Spark 3.4, vectorized readers are enabled by default for the nested data types (array, map and struct). To restore the legacy behavior, set <code class="language-plaintext highlighter-rouge">spark.sql.orc.enableNestedColumnVectorizedReader</code> and <code class="language-plaintext highlighter-rouge">spark.sql.parquet.enableNestedColumnVectorizedReader</code> to <code class="language-plaintext highlighter-rouge">false</code>.</li>
  <li>Since Spark 3.4, <code class="language-plaintext highlighter-rouge">BinaryType</code> is not supported in CSV datasource. In Spark 3.3 or earlier, users can write binary columns in CSV datasource, but the output content in CSV files is <code class="language-plaintext highlighter-rouge">Object.toString()</code> which is meaningless; meanwhile, if users read CSV tables with binary columns, Spark will throw an <code class="language-plaintext highlighter-rouge">Unsupported type: binary</code> exception.</li>
  <li>Since Spark 3.4, bloom filter joins are enabled by default. To restore the legacy behavior, set <code class="language-plaintext highlighter-rouge">spark.sql.optimizer.runtime.bloomFilter.enabled</code> to <code class="language-plaintext highlighter-rouge">false</code>.</li>
</ul>

<h2 id="upgrading-from-spark-sql-32-to-33">Upgrading from Spark SQL 3.2 to 3.3<a class="anchorjs-link " href="https://spark.apache.org/docs/latest/sql-migration-guide.html#upgrading-from-spark-sql-32-to-33" aria-label="Anchor link for: upgrading from spark sql 32 to 33" data-anchorjs-icon="" style="font-family: anchorjs-icons; font-style: normal; font-variant: normal; font-weight: normal; padding-left: 0.375em;"></a></h2>

<ul>
  <li>
    <p>Since Spark 3.3, the <code class="language-plaintext highlighter-rouge">histogram_numeric</code> function in Spark SQL returns an output type of an array of structs (x, y), where the type of the ‘x’ field in the return value is propagated from the input values consumed in the aggregate function. In Spark 3.2 or earlier, ‘x’ always had double type. Optionally, use the configuration <code class="language-plaintext highlighter-rouge">spark.sql.legacy.histogramNumericPropagateInputType</code> since Spark 3.3 to revert back to the previous behavior.</p>
  </li>
  <li>
    <p>Since Spark 3.3, <code class="language-plaintext highlighter-rouge">DayTimeIntervalType</code> in Spark SQL is mapped to Arrow’s <code class="language-plaintext highlighter-rouge">Duration</code> type in <code class="language-plaintext highlighter-rouge">ArrowWriter</code> and <code class="language-plaintext highlighter-rouge">ArrowColumnVector</code> developer APIs. Previously, <code class="language-plaintext highlighter-rouge">DayTimeIntervalType</code> was mapped to Arrow’s <code class="language-plaintext highlighter-rouge">Interval</code> type which does not match with the types of other languages Spark SQL maps. For example, <code class="language-plaintext highlighter-rouge">DayTimeIntervalType</code> is mapped to <code class="language-plaintext highlighter-rouge">java.time.Duration</code> in Java.</p>
  </li>
  <li>
    <p>Since Spark 3.3, the functions <code class="language-plaintext highlighter-rouge">lpad</code> and <code class="language-plaintext highlighter-rouge">rpad</code> have been overloaded to support byte sequences. When the first argument is a byte sequence, the optional padding pattern must also be a byte sequence and the result is a BINARY value. The default padding pattern in this case is the zero byte. To restore the legacy behavior of always returning string types, set <code class="language-plaintext highlighter-rouge">spark.sql.legacy.lpadRpadAlwaysReturnString</code> to <code class="language-plaintext highlighter-rouge">true</code>.</p>
  </li>
  <li>
    <p>Since Spark 3.3, Spark turns a non-nullable schema into nullable for API <code class="language-plaintext highlighter-rouge">DataFrameReader.schema(schema: StructType).json(jsonDataset: Dataset[String])</code> and <code class="language-plaintext highlighter-rouge">DataFrameReader.schema(schema: StructType).csv(csvDataset: Dataset[String])</code> when the schema is specified by the user and contains non-nullable fields. To restore the legacy behavior of respecting the nullability, set <code class="language-plaintext highlighter-rouge">spark.sql.legacy.respectNullabilityInTextDatasetConversion</code> to <code class="language-plaintext highlighter-rouge">true</code>.</p>
  </li>
  <li>
    <p>Since Spark 3.3, when the date or timestamp pattern is not specified, Spark converts an input string to a date/timestamp using the <code class="language-plaintext highlighter-rouge">CAST</code> expression approach. The changes affect CSV/JSON datasources and parsing of partition values. In Spark 3.2 or earlier, when the date or timestamp pattern is not set, Spark uses the default patterns: <code class="language-plaintext highlighter-rouge">yyyy-MM-dd</code> for dates and <code class="language-plaintext highlighter-rouge">yyyy-MM-dd HH:mm:ss</code> for timestamps. After the changes, Spark still recognizes the pattern together with</p>

    <p>Date patterns:</p>
    <ul>
      <li><code class="language-plaintext highlighter-rouge">[+-]yyyy*</code></li>
      <li><code class="language-plaintext highlighter-rouge">[+-]yyyy*-[m]m</code></li>
      <li><code class="language-plaintext highlighter-rouge">[+-]yyyy*-[m]m-[d]d</code></li>
      <li><code class="language-plaintext highlighter-rouge">[+-]yyyy*-[m]m-[d]d </code></li>
      <li><code class="language-plaintext highlighter-rouge">[+-]yyyy*-[m]m-[d]d *</code></li>
      <li><code class="language-plaintext highlighter-rouge">[+-]yyyy*-[m]m-[d]dT*</code></li>
    </ul>

    <p>Timestamp patterns:</p>
    <ul>
      <li><code class="language-plaintext highlighter-rouge">[+-]yyyy*</code></li>
      <li><code class="language-plaintext highlighter-rouge">[+-]yyyy*-[m]m</code></li>
      <li><code class="language-plaintext highlighter-rouge">[+-]yyyy*-[m]m-[d]d</code></li>
      <li><code class="language-plaintext highlighter-rouge">[+-]yyyy*-[m]m-[d]d </code></li>
      <li><code class="language-plaintext highlighter-rouge">[+-]yyyy*-[m]m-[d]d [h]h:[m]m:[s]s.[ms][ms][ms][us][us][us][zone_id]</code></li>
      <li><code class="language-plaintext highlighter-rouge">[+-]yyyy*-[m]m-[d]dT[h]h:[m]m:[s]s.[ms][ms][ms][us][us][us][zone_id]</code></li>
      <li><code class="language-plaintext highlighter-rouge">[h]h:[m]m:[s]s.[ms][ms][ms][us][us][us][zone_id]</code></li>
      <li><code class="language-plaintext highlighter-rouge">T[h]h:[m]m:[s]s.[ms][ms][ms][us][us][us][zone_id]</code></li>
    </ul>
  </li>
  <li>
    <p>Since Spark 3.3, the <code class="language-plaintext highlighter-rouge">strfmt</code> in <code class="language-plaintext highlighter-rouge">format_string(strfmt, obj, ...)</code> and <code class="language-plaintext highlighter-rouge">printf(strfmt, obj, ...)</code> will no longer support to use “0<span class="MathJax_Preview" style="color: inherit; display: none;"></span><span class="MathJax" id="MathJax-Element-1-Frame" tabindex="0" data-mathml="<math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;><mo>&amp;#x201D;</mo><mi>t</mi><mi>o</mi><mi>s</mi><mi>p</mi><mi>e</mi><mi>c</mi><mi>i</mi><mi>f</mi><mi>y</mi><mi>t</mi><mi>h</mi><mi>e</mi><mi>f</mi><mi>i</mi><mi>r</mi><mi>s</mi><mi>t</mi><mi>a</mi><mi>r</mi><mi>g</mi><mi>u</mi><mi>m</mi><mi>e</mi><mi>n</mi><mi>t</mi><mo>,</mo><mi>t</mi><mi>h</mi><mi>e</mi><mi>f</mi><mi>i</mi><mi>r</mi><mi>s</mi><mi>t</mi><mi>a</mi><mi>r</mi><mi>g</mi><mi>u</mi><mi>m</mi><mi>e</mi><mi>n</mi><mi>t</mi><mi>s</mi><mi>h</mi><mi>o</mi><mi>u</mi><mi>l</mi><mi>d</mi><mi>a</mi><mi>l</mi><mi>w</mi><mi>a</mi><mi>y</mi><mi>s</mi><mi>r</mi><mi>e</mi><mi>f</mi><mi>e</mi><mi>r</mi><mi>e</mi><mi>n</mi><mi>c</mi><mi>e</mi><mi>b</mi><mi>y</mi><mo>&amp;#x201C;</mo><mn>1</mn></math>" role="presentation" style="position: relative;"><nobr aria-hidden="true"><span class="math" id="MathJax-Span-1" style="width: 38.785em; display: inline-block;"><span style="display: inline-block; position: relative; width: 33.12em; height: 0px; font-size: 117%;"><span style="position: absolute; clip: rect(1.432em, 1033.05em, 2.662em, -1000em); top: -2.297em; left: 0em;"><span class="mrow" id="MathJax-Span-2"><span class="mo" id="MathJax-Span-3" style="font-family: MathJax_Main;">”</span><span class="mi" id="MathJax-Span-4" style="font-family: MathJax_Math-italic;">t</span><span class="mi" id="MathJax-Span-5" style="font-family: MathJax_Math-italic;">o</span><span class="mi" id="MathJax-Span-6" style="font-family: MathJax_Math-italic;">s</span><span class="mi" id="MathJax-Span-7" style="font-family: MathJax_Math-italic;">p</span><span class="mi" id="MathJax-Span-8" style="font-family: MathJax_Math-italic;">e</span><span class="mi" id="MathJax-Span-9" style="font-family: MathJax_Math-italic;">c</span><span class="mi" id="MathJax-Span-10" style="font-family: MathJax_Math-italic;">i</span><span class="mi" id="MathJax-Span-11" style="font-family: MathJax_Math-italic;">f<span style="display: inline-block; overflow: hidden; height: 1px; width: 0.06em;"></span></span><span class="mi" id="MathJax-Span-12" style="font-family: MathJax_Math-italic;">y<span style="display: inline-block; overflow: hidden; height: 1px; width: 0.006em;"></span></span><span class="mi" id="MathJax-Span-13" style="font-family: MathJax_Math-italic;">t</span><span class="mi" id="MathJax-Span-14" style="font-family: MathJax_Math-italic;">h</span><span class="mi" id="MathJax-Span-15" style="font-family: MathJax_Math-italic;">e</span><span class="mi" id="MathJax-Span-16" style="font-family: MathJax_Math-italic;">f<span style="display: inline-block; overflow: hidden; height: 1px; width: 0.06em;"></span></span><span class="mi" id="MathJax-Span-17" style="font-family: MathJax_Math-italic;">i</span><span class="mi" id="MathJax-Span-18" style="font-family: MathJax_Math-italic;">r</span><span class="mi" id="MathJax-Span-19" style="font-family: MathJax_Math-italic;">s</span><span class="mi" id="MathJax-Span-20" style="font-family: MathJax_Math-italic;">t</span><span class="mi" id="MathJax-Span-21" style="font-family: MathJax_Math-italic;">a</span><span class="mi" id="MathJax-Span-22" style="font-family: MathJax_Math-italic;">r</span><span class="mi" id="MathJax-Span-23" style="font-family: MathJax_Math-italic;">g<span style="display: inline-block; overflow: hidden; height: 1px; width: 0.003em;"></span></span><span class="mi" id="MathJax-Span-24" style="font-family: MathJax_Math-italic;">u</span><span class="mi" id="MathJax-Span-25" style="font-family: MathJax_Math-italic;">m</span><span class="mi" id="MathJax-Span-26" style="font-family: MathJax_Math-italic;">e</span><span class="mi" id="MathJax-Span-27" style="font-family: MathJax_Math-italic;">n</span><span class="mi" id="MathJax-Span-28" style="font-family: MathJax_Math-italic;">t</span><span class="mo" id="MathJax-Span-29" style="font-family: MathJax_Main;">,</span><span class="mi" id="MathJax-Span-30" style="font-family: MathJax_Math-italic; padding-left: 0.167em;">t</span><span class="mi" id="MathJax-Span-31" style="font-family: MathJax_Math-italic;">h</span><span class="mi" id="MathJax-Span-32" style="font-family: MathJax_Math-italic;">e</span><span class="mi" id="MathJax-Span-33" style="font-family: MathJax_Math-italic;">f<span style="display: inline-block; overflow: hidden; height: 1px; width: 0.06em;"></span></span><span class="mi" id="MathJax-Span-34" style="font-family: MathJax_Math-italic;">i</span><span class="mi" id="MathJax-Span-35" style="font-family: MathJax_Math-italic;">r</span><span class="mi" id="MathJax-Span-36" style="font-family: MathJax_Math-italic;">s</span><span class="mi" id="MathJax-Span-37" style="font-family: MathJax_Math-italic;">t</span><span class="mi" id="MathJax-Span-38" style="font-family: MathJax_Math-italic;">a</span><span class="mi" id="MathJax-Span-39" style="font-family: MathJax_Math-italic;">r</span><span class="mi" id="MathJax-Span-40" style="font-family: MathJax_Math-italic;">g<span style="display: inline-block; overflow: hidden; height: 1px; width: 0.003em;"></span></span><span class="mi" id="MathJax-Span-41" style="font-family: MathJax_Math-italic;">u</span><span class="mi" id="MathJax-Span-42" style="font-family: MathJax_Math-italic;">m</span><span class="mi" id="MathJax-Span-43" style="font-family: MathJax_Math-italic;">e</span><span class="mi" id="MathJax-Span-44" style="font-family: MathJax_Math-italic;">n</span><span class="mi" id="MathJax-Span-45" style="font-family: MathJax_Math-italic;">t</span><span class="mi" id="MathJax-Span-46" style="font-family: MathJax_Math-italic;">s</span><span class="mi" id="MathJax-Span-47" style="font-family: MathJax_Math-italic;">h</span><span class="mi" id="MathJax-Span-48" style="font-family: MathJax_Math-italic;">o</span><span class="mi" id="MathJax-Span-49" style="font-family: MathJax_Math-italic;">u</span><span class="mi" id="MathJax-Span-50" style="font-family: MathJax_Math-italic;">l</span><span class="mi" id="MathJax-Span-51" style="font-family: MathJax_Math-italic;">d<span style="display: inline-block; overflow: hidden; height: 1px; width: 0.003em;"></span></span><span class="mi" id="MathJax-Span-52" style="font-family: MathJax_Math-italic;">a</span><span class="mi" id="MathJax-Span-53" style="font-family: MathJax_Math-italic;">l</span><span class="mi" id="MathJax-Span-54" style="font-family: MathJax_Math-italic;">w</span><span class="mi" id="MathJax-Span-55" style="font-family: MathJax_Math-italic;">a</span><span class="mi" id="MathJax-Span-56" style="font-family: MathJax_Math-italic;">y<span style="display: inline-block; overflow: hidden; height: 1px; width: 0.006em;"></span></span><span class="mi" id="MathJax-Span-57" style="font-family: MathJax_Math-italic;">s</span><span class="mi" id="MathJax-Span-58" style="font-family: MathJax_Math-italic;">r</span><span class="mi" id="MathJax-Span-59" style="font-family: MathJax_Math-italic;">e</span><span class="mi" id="MathJax-Span-60" style="font-family: MathJax_Math-italic;">f<span style="display: inline-block; overflow: hidden; height: 1px; width: 0.06em;"></span></span><span class="mi" id="MathJax-Span-61" style="font-family: MathJax_Math-italic;">e</span><span class="mi" id="MathJax-Span-62" style="font-family: MathJax_Math-italic;">r</span><span class="mi" id="MathJax-Span-63" style="font-family: MathJax_Math-italic;">e</span><span class="mi" id="MathJax-Span-64" style="font-family: MathJax_Math-italic;">n</span><span class="mi" id="MathJax-Span-65" style="font-family: MathJax_Math-italic;">c</span><span class="mi" id="MathJax-Span-66" style="font-family: MathJax_Math-italic;">e</span><span class="mi" id="MathJax-Span-67" style="font-family: MathJax_Math-italic;">b</span><span class="mi" id="MathJax-Span-68" style="font-family: MathJax_Math-italic;">y<span style="display: inline-block; overflow: hidden; height: 1px; width: 0.006em;"></span></span><span class="mo" id="MathJax-Span-69" style="font-family: MathJax_Main;">“</span><span class="mn" id="MathJax-Span-70" style="font-family: MathJax_Main;">1</span></span><span style="display: inline-block; width: 0px; height: 2.297em;"></span></span></span><span style="display: inline-block; overflow: hidden; vertical-align: -0.302em; border-left: 0px solid; width: 0px; height: 1.19em;"></span></span></nobr><span class="MJX_Assistive_MathML" role="presentation"><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>”</mo><mi>t</mi><mi>o</mi><mi>s</mi><mi>p</mi><mi>e</mi><mi>c</mi><mi>i</mi><mi>f</mi><mi>y</mi><mi>t</mi><mi>h</mi><mi>e</mi><mi>f</mi><mi>i</mi><mi>r</mi><mi>s</mi><mi>t</mi><mi>a</mi><mi>r</mi><mi>g</mi><mi>u</mi><mi>m</mi><mi>e</mi><mi>n</mi><mi>t</mi><mo>,</mo><mi>t</mi><mi>h</mi><mi>e</mi><mi>f</mi><mi>i</mi><mi>r</mi><mi>s</mi><mi>t</mi><mi>a</mi><mi>r</mi><mi>g</mi><mi>u</mi><mi>m</mi><mi>e</mi><mi>n</mi><mi>t</mi><mi>s</mi><mi>h</mi><mi>o</mi><mi>u</mi><mi>l</mi><mi>d</mi><mi>a</mi><mi>l</mi><mi>w</mi><mi>a</mi><mi>y</mi><mi>s</mi><mi>r</mi><mi>e</mi><mi>f</mi><mi>e</mi><mi>r</mi><mi>e</mi><mi>n</mi><mi>c</mi><mi>e</mi><mi>b</mi><mi>y</mi><mo>“</mo><mn>1</mn></math></span></span>” when use argument index to indicating the position of the argument in the argument list.</p>
  </li>
  <li>
    <p>Since Spark 3.3, nulls are written as empty strings in CSV data source by default. In Spark 3.2 or earlier, nulls were written as empty strings as quoted empty strings, <code class="language-plaintext highlighter-rouge">""</code>. To restore the previous behavior, set <code class="language-plaintext highlighter-rouge">nullValue</code> to <code class="language-plaintext highlighter-rouge">""</code>, or set the configuration <code class="language-plaintext highlighter-rouge">spark.sql.legacy.nullValueWrittenAsQuotedEmptyStringCsv</code> to <code class="language-plaintext highlighter-rouge">true</code>.</p>
  </li>
  <li>
    <p>Since Spark 3.3, DESCRIBE FUNCTION fails if the function does not exist. In Spark 3.2 or earlier, DESCRIBE FUNCTION can still run and print “Function: func_name not found”.</p>
  </li>
  <li>
    <p>Since Spark 3.3, the table property <code class="language-plaintext highlighter-rouge">external</code> becomes reserved. Certain commands will fail if you specify the <code class="language-plaintext highlighter-rouge">external</code> property, such as <code class="language-plaintext highlighter-rouge">CREATE TABLE ... TBLPROPERTIES</code> and <code class="language-plaintext highlighter-rouge">ALTER TABLE ... SET TBLPROPERTIES</code>. In Spark 3.2 and earlier, the table property <code class="language-plaintext highlighter-rouge">external</code> is silently ignored. You can set <code class="language-plaintext highlighter-rouge">spark.sql.legacy.notReserveProperties</code> to <code class="language-plaintext highlighter-rouge">true</code> to restore the old behavior.</p>
  </li>
  <li>
    <p>Since Spark 3.3, DROP FUNCTION fails if the function name matches one of the built-in functions’ name and is not qualified. In Spark 3.2 or earlier, DROP FUNCTION can still drop a persistent function even if the name is not qualified and is the same as a built-in function’s name.</p>
  </li>
  <li>
    <p>Since Spark 3.3, when reading values from a JSON attribute defined as <code class="language-plaintext highlighter-rouge">FloatType</code> or <code class="language-plaintext highlighter-rouge">DoubleType</code>, the strings <code class="language-plaintext highlighter-rouge">"+Infinity"</code>, <code class="language-plaintext highlighter-rouge">"+INF"</code>, and <code class="language-plaintext highlighter-rouge">"-INF"</code> are now parsed to the appropriate values, in addition to the already supported <code class="language-plaintext highlighter-rouge">"Infinity"</code> and <code class="language-plaintext highlighter-rouge">"-Infinity"</code> variations. This change was made to improve consistency with Jackson’s parsing of the unquoted versions of these values. Also, the <code class="language-plaintext highlighter-rouge">allowNonNumericNumbers</code> option is now respected so these strings will now be considered invalid if this option is disabled.</p>
  </li>
  <li>
    <p>Since Spark 3.3, Spark will try to use built-in data source writer instead of Hive serde in <code class="language-plaintext highlighter-rouge">INSERT OVERWRITE DIRECTORY</code>. This behavior is effective only if <code class="language-plaintext highlighter-rouge">spark.sql.hive.convertMetastoreParquet</code> or <code class="language-plaintext highlighter-rouge">spark.sql.hive.convertMetastoreOrc</code> is enabled respectively for Parquet and ORC formats. To restore the behavior before Spark 3.3, you can set <code class="language-plaintext highlighter-rouge">spark.sql.hive.convertMetastoreInsertDir</code> to <code class="language-plaintext highlighter-rouge">false</code>.</p>
  </li>
  <li>
    <p>Since Spark 3.3, the precision of the return type of round-like functions has been fixed. This may cause Spark throw <code class="language-plaintext highlighter-rouge">AnalysisException</code> of the <code class="language-plaintext highlighter-rouge">CANNOT_UP_CAST_DATATYPE</code> error class when using views created by prior versions. In such cases, you need to recreate the views using ALTER VIEW AS or CREATE OR REPLACE VIEW AS with newer Spark versions.</p>
  </li>
  <li>
    <p>Since Spark 3.3, the <code class="language-plaintext highlighter-rouge">unbase64</code> function throws error for a malformed <code class="language-plaintext highlighter-rouge">str</code> input. Use <code class="language-plaintext highlighter-rouge">try_to_binary(&lt;str&gt;, 'base64')</code> to tolerate malformed input and return NULL instead. In Spark 3.2 and earlier, the <code class="language-plaintext highlighter-rouge">unbase64</code> function returns a best-efforts result for a malformed <code class="language-plaintext highlighter-rouge">str</code> input.</p>
  </li>
  <li>
    <p>Since Spark 3.3.1 and 3.2.3, for <code class="language-plaintext highlighter-rouge">SELECT ... GROUP BY a GROUPING SETS (b)</code>-style SQL statements, <code class="language-plaintext highlighter-rouge">grouping__id</code> returns different values from Apache Spark 3.2.0, 3.2.1, 3.2.2, and 3.3.0. It computes based on user-given group-by expressions plus grouping set columns. To restore the behavior before 3.3.1 and 3.2.3, you can set <code class="language-plaintext highlighter-rouge">spark.sql.legacy.groupingIdWithAppendedUserGroupBy</code>. For details, see <a href="https://issues.apache.org/jira/browse/SPARK-40218">SPARK-40218</a> and <a href="https://issues.apache.org/jira/browse/SPARK-40562">SPARK-40562</a>.</p>
  </li>
</ul>

<h2 id="upgrading-from-spark-sql-31-to-32">Upgrading from Spark SQL 3.1 to 3.2<a class="anchorjs-link " href="https://spark.apache.org/docs/latest/sql-migration-guide.html#upgrading-from-spark-sql-31-to-32" aria-label="Anchor link for: upgrading from spark sql 31 to 32" data-anchorjs-icon="" style="font-family: anchorjs-icons; font-style: normal; font-variant: normal; font-weight: normal; padding-left: 0.375em;"></a></h2>

<ul>
  <li>
    <p>Since Spark 3.2, ADD FILE/JAR/ARCHIVE commands require each path to be enclosed by <code class="language-plaintext highlighter-rouge">"</code> or <code class="language-plaintext highlighter-rouge">'</code> if the path contains whitespaces.</p>
  </li>
  <li>
    <p>Since Spark 3.2, all the supported JDBC dialects use StringType for ROWID. In Spark 3.1 or earlier, Oracle dialect uses StringType and the other dialects use LongType.</p>
  </li>
  <li>
    <p>In Spark 3.2, PostgreSQL JDBC dialect uses StringType for MONEY and MONEY[] is not supported due to the JDBC driver for PostgreSQL can’t handle those types properly. In Spark 3.1 or earlier, DoubleType and ArrayType of DoubleType are used respectively.</p>
  </li>
  <li>
    <p>In Spark 3.2, <code class="language-plaintext highlighter-rouge">spark.sql.adaptive.enabled</code> is enabled by default. To restore the behavior before Spark 3.2, you can set <code class="language-plaintext highlighter-rouge">spark.sql.adaptive.enabled</code> to <code class="language-plaintext highlighter-rouge">false</code>.</p>
  </li>
  <li>In Spark 3.2, the following meta-characters are escaped in the <code class="language-plaintext highlighter-rouge">show()</code> action. In Spark 3.1 or earlier, the following metacharacters are output as it is.
    <ul>
      <li><code class="language-plaintext highlighter-rouge">\n</code> (new line)</li>
      <li><code class="language-plaintext highlighter-rouge">\r</code> (carriage ret)</li>
      <li><code class="language-plaintext highlighter-rouge">\t</code> (horizontal tab)</li>
      <li><code class="language-plaintext highlighter-rouge">\f</code> (form feed)</li>
      <li><code class="language-plaintext highlighter-rouge">\b</code> (backspace)</li>
      <li><code class="language-plaintext highlighter-rouge">\u000B</code> (vertical tab)</li>
      <li><code class="language-plaintext highlighter-rouge">\u0007</code> (bell)</li>
    </ul>
  </li>
  <li>
    <p>In Spark 3.2, <code class="language-plaintext highlighter-rouge">ALTER TABLE .. RENAME TO PARTITION</code> throws <code class="language-plaintext highlighter-rouge">PartitionAlreadyExistsException</code> instead of <code class="language-plaintext highlighter-rouge">AnalysisException</code> for tables from Hive external when the target partition already exists.</p>
  </li>
  <li>
    <p>In Spark 3.2, script transform default FIELD DELIMIT is <code class="language-plaintext highlighter-rouge">\u0001</code> for no serde mode, serde property <code class="language-plaintext highlighter-rouge">field.delim</code> is <code class="language-plaintext highlighter-rouge">\t</code> for Hive serde mode when user specifies serde. In Spark 3.1 or earlier, the default FIELD DELIMIT is <code class="language-plaintext highlighter-rouge">\t</code>, serde property <code class="language-plaintext highlighter-rouge">field.delim</code> is <code class="language-plaintext highlighter-rouge">\u0001</code> for Hive serde mode when user specifies serde.</p>
  </li>
  <li>
    <p>In Spark 3.2, the auto-generated <code class="language-plaintext highlighter-rouge">Cast</code> (such as those added by type coercion rules) will be stripped when generating column alias names. E.g., <code class="language-plaintext highlighter-rouge">sql("SELECT floor(1)").columns</code> will be <code class="language-plaintext highlighter-rouge">FLOOR(1)</code> instead of <code class="language-plaintext highlighter-rouge">FLOOR(CAST(1 AS DOUBLE))</code>.</p>
  </li>
  <li>
    <p>In Spark 3.2, the output schema of <code class="language-plaintext highlighter-rouge">SHOW TABLES</code> becomes <code class="language-plaintext highlighter-rouge">namespace: string, tableName: string, isTemporary: boolean</code>. In Spark 3.1 or earlier, the <code class="language-plaintext highlighter-rouge">namespace</code> field was named <code class="language-plaintext highlighter-rouge">database</code> for the builtin catalog, and there is no <code class="language-plaintext highlighter-rouge">isTemporary</code> field for v2 catalogs. To restore the old schema with the builtin catalog, you can set <code class="language-plaintext highlighter-rouge">spark.sql.legacy.keepCommandOutputSchema</code> to <code class="language-plaintext highlighter-rouge">true</code>.</p>
  </li>
  <li>
    <p>In Spark 3.2, the output schema of <code class="language-plaintext highlighter-rouge">SHOW TABLE EXTENDED</code> becomes <code class="language-plaintext highlighter-rouge">namespace: string, tableName: string, isTemporary: boolean, information: string</code>. In Spark 3.1 or earlier, the <code class="language-plaintext highlighter-rouge">namespace</code> field was named <code class="language-plaintext highlighter-rouge">database</code> for the builtin catalog, and no change for the v2 catalogs. To restore the old schema with the builtin catalog, you can set <code class="language-plaintext highlighter-rouge">spark.sql.legacy.keepCommandOutputSchema</code> to <code class="language-plaintext highlighter-rouge">true</code>.</p>
  </li>
  <li>
    <p>In Spark 3.2, the output schema of <code class="language-plaintext highlighter-rouge">SHOW TBLPROPERTIES</code> becomes <code class="language-plaintext highlighter-rouge">key: string, value: string</code> whether you specify the table property key or not. In Spark 3.1 and earlier, the output schema of <code class="language-plaintext highlighter-rouge">SHOW TBLPROPERTIES</code> is <code class="language-plaintext highlighter-rouge">value: string</code> when you specify the table property key. To restore the old schema with the builtin catalog, you can set <code class="language-plaintext highlighter-rouge">spark.sql.legacy.keepCommandOutputSchema</code> to <code class="language-plaintext highlighter-rouge">true</code>.</p>
  </li>
  <li>
    <p>In Spark 3.2, the output schema of <code class="language-plaintext highlighter-rouge">DESCRIBE NAMESPACE</code> becomes <code class="language-plaintext highlighter-rouge">info_name: string, info_value: string</code>. In Spark 3.1 or earlier, the <code class="language-plaintext highlighter-rouge">info_name</code> field was named <code class="language-plaintext highlighter-rouge">database_description_item</code> and the <code class="language-plaintext highlighter-rouge">info_value</code> field was named <code class="language-plaintext highlighter-rouge">database_description_value</code> for the builtin catalog. To restore the old schema with the builtin catalog, you can set <code class="language-plaintext highlighter-rouge">spark.sql.legacy.keepCommandOutputSchema</code> to <code class="language-plaintext highlighter-rouge">true</code>.</p>
  </li>
  <li>In Spark 3.2, table refreshing clears cached data of the table as well as of all its dependents such as views while keeping the dependents cached. The following commands perform table refreshing:
    <ul>
      <li><code class="language-plaintext highlighter-rouge">ALTER TABLE .. ADD PARTITION</code></li>
      <li><code class="language-plaintext highlighter-rouge">ALTER TABLE .. RENAME PARTITION</code></li>
      <li><code class="language-plaintext highlighter-rouge">ALTER TABLE .. DROP PARTITION</code></li>
      <li><code class="language-plaintext highlighter-rouge">ALTER TABLE .. RECOVER PARTITIONS</code></li>
      <li><code class="language-plaintext highlighter-rouge">MSCK REPAIR TABLE</code></li>
      <li><code class="language-plaintext highlighter-rouge">LOAD DATA</code></li>
      <li><code class="language-plaintext highlighter-rouge">REFRESH TABLE</code></li>
      <li><code class="language-plaintext highlighter-rouge">TRUNCATE TABLE</code></li>
      <li>and the method <code class="language-plaintext highlighter-rouge">spark.catalog.refreshTable</code>
In Spark 3.1 and earlier, table refreshing leaves dependents uncached.</li>
    </ul>
  </li>
  <li>
    <p>In Spark 3.2, the usage of <code class="language-plaintext highlighter-rouge">count(tblName.*)</code> is blocked to avoid producing ambiguous results. Because <code class="language-plaintext highlighter-rouge">count(*)</code> and <code class="language-plaintext highlighter-rouge">count(tblName.*)</code> will output differently if there is any null values. To restore the behavior before Spark 3.2, you can set <code class="language-plaintext highlighter-rouge">spark.sql.legacy.allowStarWithSingleTableIdentifierInCount</code> to <code class="language-plaintext highlighter-rouge">true</code>.</p>
  </li>
  <li>
    <p>In Spark 3.2, we support typed literals in the partition spec of INSERT and ADD/DROP/RENAME PARTITION. For example, <code class="language-plaintext highlighter-rouge">ADD PARTITION(dt = date'2020-01-01')</code> adds a partition with date value <code class="language-plaintext highlighter-rouge">2020-01-01</code>. In Spark 3.1 and earlier, the partition value will be parsed as string value <code class="language-plaintext highlighter-rouge">date '2020-01-01'</code>, which is an illegal date value, and we add a partition with null value at the end.</p>
  </li>
  <li>
    <p>In Spark 3.2, <code class="language-plaintext highlighter-rouge">DataFrameNaFunctions.replace()</code> no longer uses exact string match for the input column names, to match the SQL syntax and support qualified column names. Input column name having a dot in the name (not nested) needs to be escaped with backtick `. Now, it throws <code class="language-plaintext highlighter-rouge">AnalysisException</code> if the column is not found in the data frame schema. It also throws <code class="language-plaintext highlighter-rouge">IllegalArgumentException</code> if the input column name is a nested column. In Spark 3.1 and earlier, it used to ignore invalid input column name and nested column name.</p>
  </li>
  <li>
    <p>In Spark 3.2, the dates subtraction expression such as <code class="language-plaintext highlighter-rouge">date1 - date2</code> returns values of <code class="language-plaintext highlighter-rouge">DayTimeIntervalType</code>. In Spark 3.1 and earlier, the returned type is <code class="language-plaintext highlighter-rouge">CalendarIntervalType</code>. To restore the behavior before Spark 3.2, you can set <code class="language-plaintext highlighter-rouge">spark.sql.legacy.interval.enabled</code> to <code class="language-plaintext highlighter-rouge">true</code>.</p>
  </li>
  <li>
    <p>In Spark 3.2, the timestamps subtraction expression such as <code class="language-plaintext highlighter-rouge">timestamp '2021-03-31 23:48:00' - timestamp '2021-01-01 00:00:00'</code> returns values of <code class="language-plaintext highlighter-rouge">DayTimeIntervalType</code>. In Spark 3.1 and earlier, the type of the same expression is <code class="language-plaintext highlighter-rouge">CalendarIntervalType</code>. To restore the behavior before Spark 3.2, you can set <code class="language-plaintext highlighter-rouge">spark.sql.legacy.interval.enabled</code> to <code class="language-plaintext highlighter-rouge">true</code>.</p>
  </li>
  <li>
    <p>In Spark 3.2, <code class="language-plaintext highlighter-rouge">CREATE TABLE .. LIKE ..</code> command can not use reserved properties. You need their specific clauses to specify them, for example, <code class="language-plaintext highlighter-rouge">CREATE TABLE test1 LIKE test LOCATION 'some path'</code>. You can set <code class="language-plaintext highlighter-rouge">spark.sql.legacy.notReserveProperties</code> to <code class="language-plaintext highlighter-rouge">true</code> to ignore the <code class="language-plaintext highlighter-rouge">ParseException</code>, in this case, these properties will be silently removed, for example: <code class="language-plaintext highlighter-rouge">TBLPROPERTIES('owner'='yao')</code> will have no effect. In Spark version 3.1 and below, the reserved properties can be used in <code class="language-plaintext highlighter-rouge">CREATE TABLE .. LIKE ..</code> command but have no side effects, for example, <code class="language-plaintext highlighter-rouge">TBLPROPERTIES('location'='/tmp')</code> does not change the location of the table but only create a headless property just like <code class="language-plaintext highlighter-rouge">'a'='b'</code>.</p>
  </li>
  <li>
    <p>In Spark 3.2, <code class="language-plaintext highlighter-rouge">TRANSFORM</code> operator can’t support alias in inputs. In Spark 3.1 and earlier, we can write script transform like <code class="language-plaintext highlighter-rouge">SELECT TRANSFORM(a AS c1, b AS c2) USING 'cat' FROM TBL</code>.</p>
  </li>
  <li>
    <p>In Spark 3.2, <code class="language-plaintext highlighter-rouge">TRANSFORM</code> operator can support <code class="language-plaintext highlighter-rouge">ArrayType/MapType/StructType</code> without Hive SerDe, in this mode, we use <code class="language-plaintext highlighter-rouge">StructsToJson</code> to convert <code class="language-plaintext highlighter-rouge">ArrayType/MapType/StructType</code> column to <code class="language-plaintext highlighter-rouge">STRING</code> and use <code class="language-plaintext highlighter-rouge">JsonToStructs</code> to parse <code class="language-plaintext highlighter-rouge">STRING</code> to <code class="language-plaintext highlighter-rouge">ArrayType/MapType/StructType</code>. In Spark 3.1, Spark just support case <code class="language-plaintext highlighter-rouge">ArrayType/MapType/StructType</code> column as <code class="language-plaintext highlighter-rouge">STRING</code> but can’t support parse <code class="language-plaintext highlighter-rouge">STRING</code> to <code class="language-plaintext highlighter-rouge">ArrayType/MapType/StructType</code> output columns.</p>
  </li>
  <li>
    <p>In Spark 3.2, the unit-to-unit interval literals like <code class="language-plaintext highlighter-rouge">INTERVAL '1-1' YEAR TO MONTH</code> and the unit list interval literals like <code class="language-plaintext highlighter-rouge">INTERVAL '3' DAYS '1' HOUR</code> are converted to ANSI interval types: <code class="language-plaintext highlighter-rouge">YearMonthIntervalType</code> or <code class="language-plaintext highlighter-rouge">DayTimeIntervalType</code>. In Spark 3.1 and earlier, such interval literals are converted to <code class="language-plaintext highlighter-rouge">CalendarIntervalType</code>. To restore the behavior before Spark 3.2, you can set <code class="language-plaintext highlighter-rouge">spark.sql.legacy.interval.enabled</code> to <code class="language-plaintext highlighter-rouge">true</code>.</p>
  </li>
  <li>
    <p>In Spark 3.2, the unit list interval literals can not mix year-month fields (YEAR and MONTH) and day-time fields (WEEK, DAY, …, MICROSECOND). For example, <code class="language-plaintext highlighter-rouge">INTERVAL 1 month 1 hour</code> is invalid in Spark 3.2. In Spark 3.1 and earlier, there is no such limitation and the literal returns value of <code class="language-plaintext highlighter-rouge">CalendarIntervalType</code>. To restore the behavior before Spark 3.2, you can set <code class="language-plaintext highlighter-rouge">spark.sql.legacy.interval.enabled</code> to <code class="language-plaintext highlighter-rouge">true</code>.</p>
  </li>
  <li>
    <p>In Spark 3.2, Spark supports <code class="language-plaintext highlighter-rouge">DayTimeIntervalType</code> and <code class="language-plaintext highlighter-rouge">YearMonthIntervalType</code> as inputs and outputs of <code class="language-plaintext highlighter-rouge">TRANSFORM</code> clause in Hive <code class="language-plaintext highlighter-rouge">SERDE</code> mode, the behavior is different between Hive <code class="language-plaintext highlighter-rouge">SERDE</code> mode and <code class="language-plaintext highlighter-rouge">ROW FORMAT DELIMITED</code> mode when these two types are used as inputs. In Hive <code class="language-plaintext highlighter-rouge">SERDE</code> mode, <code class="language-plaintext highlighter-rouge">DayTimeIntervalType</code> column is converted to <code class="language-plaintext highlighter-rouge">HiveIntervalDayTime</code>, its string format is <code class="language-plaintext highlighter-rouge">[-]?d h:m:s.n</code>, but in <code class="language-plaintext highlighter-rouge">ROW FORMAT DELIMITED</code> mode the format is <code class="language-plaintext highlighter-rouge">INTERVAL '[-]?d h:m:s.n' DAY TO TIME</code>. In Hive <code class="language-plaintext highlighter-rouge">SERDE</code> mode, <code class="language-plaintext highlighter-rouge">YearMonthIntervalType</code> column is converted to <code class="language-plaintext highlighter-rouge">HiveIntervalYearMonth</code>, its string format is <code class="language-plaintext highlighter-rouge">[-]?y-m</code>, but in <code class="language-plaintext highlighter-rouge">ROW FORMAT DELIMITED</code> mode the format is <code class="language-plaintext highlighter-rouge">INTERVAL '[-]?y-m' YEAR TO MONTH</code>.</p>
  </li>
  <li>
    <p>In Spark 3.2, <code class="language-plaintext highlighter-rouge">hash(0) == hash(-0)</code> for floating point types. Previously, different values were generated.</p>
  </li>
  <li>
    <p>In Spark 3.2, <code class="language-plaintext highlighter-rouge">CREATE TABLE AS SELECT</code> with non-empty <code class="language-plaintext highlighter-rouge">LOCATION</code> will throw <code class="language-plaintext highlighter-rouge">AnalysisException</code>. To restore the behavior before Spark 3.2, you can set <code class="language-plaintext highlighter-rouge">spark.sql.legacy.allowNonEmptyLocationInCTAS</code> to <code class="language-plaintext highlighter-rouge">true</code>.</p>
  </li>
  <li>
    <p>In Spark 3.2, special datetime values such as <code class="language-plaintext highlighter-rouge">epoch</code>, <code class="language-plaintext highlighter-rouge">today</code>, <code class="language-plaintext highlighter-rouge">yesterday</code>, <code class="language-plaintext highlighter-rouge">tomorrow</code>, and <code class="language-plaintext highlighter-rouge">now</code> are supported in typed literals or in cast of foldable strings only, for instance, <code class="language-plaintext highlighter-rouge">select timestamp'now'</code> or <code class="language-plaintext highlighter-rouge">select cast('today' as date)</code>. In Spark 3.1 and 3.0, such special values are supported in any casts of strings to dates/timestamps. To keep these special values as dates/timestamps in Spark 3.1 and 3.0, you should replace them manually, e.g. <code class="language-plaintext highlighter-rouge">if (c in ('now', 'today'), current_date(), cast(c as date))</code>.</p>
  </li>
  <li>
    <p>In Spark 3.2, <code class="language-plaintext highlighter-rouge">FloatType</code> is mapped to <code class="language-plaintext highlighter-rouge">FLOAT</code> in MySQL. Prior to this, it used to be mapped to <code class="language-plaintext highlighter-rouge">REAL</code>, which is by default a synonym to <code class="language-plaintext highlighter-rouge">DOUBLE PRECISION</code> in MySQL.</p>
  </li>
  <li>
    <p>In Spark 3.2, the query executions triggered by <code class="language-plaintext highlighter-rouge">DataFrameWriter</code> are always named <code class="language-plaintext highlighter-rouge">command</code> when being sent to <code class="language-plaintext highlighter-rouge">QueryExecutionListener</code>. In Spark 3.1 and earlier, the name is one of <code class="language-plaintext highlighter-rouge">save</code>, <code class="language-plaintext highlighter-rouge">insertInto</code>, <code class="language-plaintext highlighter-rouge">saveAsTable</code>.</p>
  </li>
  <li>
    <p>In Spark 3.2, <code class="language-plaintext highlighter-rouge">Dataset.unionByName</code> with <code class="language-plaintext highlighter-rouge">allowMissingColumns</code> set to true will add missing nested fields to the end of structs. In Spark 3.1, nested struct fields are sorted alphabetically.</p>
  </li>
  <li>
    <p>In Spark 3.2, create/alter view will fail if the input query output columns contain auto-generated alias. This is necessary to make sure the query output column names are stable across different spark versions. To restore the behavior before Spark 3.2, set <code class="language-plaintext highlighter-rouge">spark.sql.legacy.allowAutoGeneratedAliasForView</code> to <code class="language-plaintext highlighter-rouge">true</code>.</p>
  </li>
  <li>In Spark 3.2, date +/- interval with only day-time fields such as <code class="language-plaintext highlighter-rouge">date '2011-11-11' + interval 12 hours</code> returns timestamp. In Spark 3.1 and earlier, the same expression returns date. To restore the behavior before Spark 3.2, you can use <code class="language-plaintext highlighter-rouge">cast</code> to convert timestamp as date.</li>
</ul>

<h2 id="upgrading-from-spark-sql-30-to-31">Upgrading from Spark SQL 3.0 to 3.1<a class="anchorjs-link " href="https://spark.apache.org/docs/latest/sql-migration-guide.html#upgrading-from-spark-sql-30-to-31" aria-label="Anchor link for: upgrading from spark sql 30 to 31" data-anchorjs-icon="" style="font-family: anchorjs-icons; font-style: normal; font-variant: normal; font-weight: normal; padding-left: 0.375em;"></a></h2>

<ul>
  <li>
    <p>In Spark 3.1, statistical aggregation function includes <code class="language-plaintext highlighter-rouge">std</code>, <code class="language-plaintext highlighter-rouge">stddev</code>, <code class="language-plaintext highlighter-rouge">stddev_samp</code>, <code class="language-plaintext highlighter-rouge">variance</code>, <code class="language-plaintext highlighter-rouge">var_samp</code>, <code class="language-plaintext highlighter-rouge">skewness</code>, <code class="language-plaintext highlighter-rouge">kurtosis</code>, <code class="language-plaintext highlighter-rouge">covar_samp</code>, <code class="language-plaintext highlighter-rouge">corr</code> will return <code class="language-plaintext highlighter-rouge">NULL</code> instead of <code class="language-plaintext highlighter-rouge">Double.NaN</code> when <code class="language-plaintext highlighter-rouge">DivideByZero</code> occurs during expression evaluation, for example, when <code class="language-plaintext highlighter-rouge">stddev_samp</code> applied on a single element set. In Spark version 3.0 and earlier, it will return <code class="language-plaintext highlighter-rouge">Double.NaN</code> in such case. To restore the behavior before Spark 3.1, you can set <code class="language-plaintext highlighter-rouge">spark.sql.legacy.statisticalAggregate</code> to <code class="language-plaintext highlighter-rouge">true</code>.</p>
  </li>
  <li>
    <p>In Spark 3.1, grouping_id() returns long values. In Spark version 3.0 and earlier, this function returns int values. To restore the behavior before Spark 3.1, you can set <code class="language-plaintext highlighter-rouge">spark.sql.legacy.integerGroupingId</code> to <code class="language-plaintext highlighter-rouge">true</code>.</p>
  </li>
  <li>
    <p>In Spark 3.1, SQL UI data adopts the <code class="language-plaintext highlighter-rouge">formatted</code> mode for the query plan explain results. To restore the behavior before Spark 3.1, you can set <code class="language-plaintext highlighter-rouge">spark.sql.ui.explainMode</code> to <code class="language-plaintext highlighter-rouge">extended</code>.</p>
  </li>
  <li>
    <p>In Spark 3.1, <code class="language-plaintext highlighter-rouge">from_unixtime</code>, <code class="language-plaintext highlighter-rouge">unix_timestamp</code>,<code class="language-plaintext highlighter-rouge">to_unix_timestamp</code>, <code class="language-plaintext highlighter-rouge">to_timestamp</code> and <code class="language-plaintext highlighter-rouge">to_date</code> will fail if the specified datetime pattern is invalid. In Spark 3.0 or earlier, they result <code class="language-plaintext highlighter-rouge">NULL</code>.</p>
  </li>
  <li>
    <p>In Spark 3.1, the Parquet, ORC, Avro and JSON datasources throw the exception <code class="language-plaintext highlighter-rouge">org.apache.spark.sql.AnalysisException: Found duplicate column(s) in the data schema</code> in read if they detect duplicate names in top-level columns as well in nested structures. The datasources take into account the SQL config <code class="language-plaintext highlighter-rouge">spark.sql.caseSensitive</code> while detecting column name duplicates.</p>
  </li>
  <li>
    <p>In Spark 3.1, structs and maps are wrapped by the <code class="language-plaintext highlighter-rouge">{}</code> brackets in casting them to strings. For instance, the <code class="language-plaintext highlighter-rouge">show()</code> action and the <code class="language-plaintext highlighter-rouge">CAST</code> expression use such brackets. In Spark 3.0 and earlier, the <code class="language-plaintext highlighter-rouge">[]</code> brackets are used for the same purpose. To restore the behavior before Spark 3.1, you can set <code class="language-plaintext highlighter-rouge">spark.sql.legacy.castComplexTypesToString.enabled</code> to <code class="language-plaintext highlighter-rouge">true</code>.</p>
  </li>
  <li>
    <p>In Spark 3.1, NULL elements of structures, arrays and maps are converted to “null” in casting them to strings. In Spark 3.0 or earlier, NULL elements are converted to empty strings. To restore the behavior before Spark 3.1, you can set <code class="language-plaintext highlighter-rouge">spark.sql.legacy.castComplexTypesToString.enabled</code> to <code class="language-plaintext highlighter-rouge">true</code>.</p>
  </li>
  <li>
    <p>In Spark 3.1, when <code class="language-plaintext highlighter-rouge">spark.sql.ansi.enabled</code> is false, Spark always returns null if the sum of decimal type column overflows. In Spark 3.0 or earlier, in the case, the sum of decimal type column may return null or incorrect result, or even fails at runtime (depending on the actual query plan execution).</p>
  </li>
  <li>
    <p>In Spark 3.1, <code class="language-plaintext highlighter-rouge">path</code> option cannot coexist when the following methods are called with path parameter(s): <code class="language-plaintext highlighter-rouge">DataFrameReader.load()</code>, <code class="language-plaintext highlighter-rouge">DataFrameWriter.save()</code>, <code class="language-plaintext highlighter-rouge">DataStreamReader.load()</code>, or <code class="language-plaintext highlighter-rouge">DataStreamWriter.start()</code>. In addition, <code class="language-plaintext highlighter-rouge">paths</code> option cannot coexist for <code class="language-plaintext highlighter-rouge">DataFrameReader.load()</code>. For example, <code class="language-plaintext highlighter-rouge">spark.read.format("csv").option("path", "/tmp").load("/tmp2")</code> or <code class="language-plaintext highlighter-rouge">spark.read.option("path", "/tmp").csv("/tmp2")</code> will throw <code class="language-plaintext highlighter-rouge">org.apache.spark.sql.AnalysisException</code>. In Spark version 3.0 and below, <code class="language-plaintext highlighter-rouge">path</code> option is overwritten if one path parameter is passed to above methods; <code class="language-plaintext highlighter-rouge">path</code> option is added to the overall paths if multiple path parameters are passed to <code class="language-plaintext highlighter-rouge">DataFrameReader.load()</code>. To restore the behavior before Spark 3.1, you can set <code class="language-plaintext highlighter-rouge">spark.sql.legacy.pathOptionBehavior.enabled</code> to <code class="language-plaintext highlighter-rouge">true</code>.</p>
  </li>
  <li>
    <p>In Spark 3.1, <code class="language-plaintext highlighter-rouge">IllegalArgumentException</code> is returned for the incomplete interval literals, e.g. <code class="language-plaintext highlighter-rouge">INTERVAL '1'</code>, <code class="language-plaintext highlighter-rouge">INTERVAL '1 DAY 2'</code>, which are invalid. In Spark 3.0, these literals result in <code class="language-plaintext highlighter-rouge">NULL</code>s.</p>
  </li>
  <li>
    <p>In Spark 3.1, we remove the built-in Hive 1.2. You need to migrate your custom SerDes to Hive 2.3. See <a href="https://issues.apache.org/jira/browse/HIVE-15167">HIVE-15167</a> for more details.</p>
  </li>
  <li>
    <p>In Spark 3.1, loading and saving of timestamps from/to parquet files fails if the timestamps are before 1900-01-01 00:00:00Z, and loaded (saved) as the INT96 type. In Spark 3.0, the actions don’t fail but might lead to shifting of the input timestamps due to rebasing from/to Julian to/from Proleptic Gregorian calendar. To restore the behavior before Spark 3.1, you can set <code class="language-plaintext highlighter-rouge">spark.sql.legacy.parquet.int96RebaseModeInRead</code> or/and <code class="language-plaintext highlighter-rouge">spark.sql.legacy.parquet.int96RebaseModeInWrite</code> to <code class="language-plaintext highlighter-rouge">LEGACY</code>.</p>
  </li>
  <li>
    <p>In Spark 3.1, the <code class="language-plaintext highlighter-rouge">schema_of_json</code> and <code class="language-plaintext highlighter-rouge">schema_of_csv</code> functions return the schema in the SQL format in which field names are quoted. In Spark 3.0, the function returns a catalog string without field quoting and in lower case.</p>
  </li>
  <li>
    <p>In Spark 3.1, refreshing a table will trigger an uncache operation for all other caches that reference the table, even if the table itself is not cached. In Spark 3.0 the operation will only be triggered if the table itself is cached.</p>
  </li>
  <li>
    <p>In Spark 3.1, creating or altering a permanent view will capture runtime SQL configs and store them as view properties. These configs will be applied during the parsing and analysis phases of the view resolution. To restore the behavior before Spark 3.1, you can set <code class="language-plaintext highlighter-rouge">spark.sql.legacy.useCurrentConfigsForView</code> to <code class="language-plaintext highlighter-rouge">true</code>.</p>
  </li>
  <li>
    <p>In Spark 3.1, the temporary view will have same behaviors with the permanent view, i.e. capture and store runtime SQL configs, SQL text, catalog and namespace. The captured view properties will be applied during the parsing and analysis phases of the view resolution. To restore the behavior before Spark 3.1, you can set <code class="language-plaintext highlighter-rouge">spark.sql.legacy.storeAnalyzedPlanForView</code> to <code class="language-plaintext highlighter-rouge">true</code>.</p>
  </li>
  <li>
    <p>In Spark 3.1, temporary view created via <code class="language-plaintext highlighter-rouge">CACHE TABLE ... AS SELECT</code> will also have the same behavior with permanent view. In particular, when the temporary view is dropped, Spark will invalidate all its cache dependents, as well as the cache for the temporary view itself. This is different from Spark 3.0 and below, which only does the latter. To restore the previous behavior, you can set <code class="language-plaintext highlighter-rouge">spark.sql.legacy.storeAnalyzedPlanForView</code> to <code class="language-plaintext highlighter-rouge">true</code>.</p>
  </li>
  <li>
    <p>Since Spark 3.1, CHAR/CHARACTER and VARCHAR types are supported in the table schema. Table scan/insertion will respect the char/varchar semantic. If char/varchar is used in places other than table schema, an exception will be thrown (CAST is an exception that simply treats char/varchar as string like before). To restore the behavior before Spark 3.1, which treats them as STRING types and ignores a length parameter, e.g. <code class="language-plaintext highlighter-rouge">CHAR(4)</code>, you can set <code class="language-plaintext highlighter-rouge">spark.sql.legacy.charVarcharAsString</code> to <code class="language-plaintext highlighter-rouge">true</code>.</p>
  </li>
  <li>
    <p>In Spark 3.1, <code class="language-plaintext highlighter-rouge">AnalysisException</code> is replaced by its sub-classes that are thrown for tables from Hive external catalog in the following situations:</p>
    <ul>
      <li><code class="language-plaintext highlighter-rouge">ALTER TABLE .. ADD PARTITION</code> throws <code class="language-plaintext highlighter-rouge">PartitionsAlreadyExistException</code> if new partition exists already</li>
      <li><code class="language-plaintext highlighter-rouge">ALTER TABLE .. DROP PARTITION</code> throws <code class="language-plaintext highlighter-rouge">NoSuchPartitionsException</code> for not existing partitions</li>
    </ul>
  </li>
</ul>

<h2 id="upgrading-from-spark-sql-301-to-302">Upgrading from Spark SQL 3.0.1 to 3.0.2<a class="anchorjs-link " href="https://spark.apache.org/docs/latest/sql-migration-guide.html#upgrading-from-spark-sql-301-to-302" aria-label="Anchor link for: upgrading from spark sql 301 to 302" data-anchorjs-icon="" style="font-family: anchorjs-icons; font-style: normal; font-variant: normal; font-weight: normal; padding-left: 0.375em;"></a></h2>

<ul>
  <li>In Spark 3.0.2, <code class="language-plaintext highlighter-rouge">AnalysisException</code> is replaced by its sub-classes that are thrown for tables from Hive external catalog in the following situations:
    <ul>
      <li><code class="language-plaintext highlighter-rouge">ALTER TABLE .. ADD PARTITION</code> throws <code class="language-plaintext highlighter-rouge">PartitionsAlreadyExistException</code> if new partition exists already</li>
      <li><code class="language-plaintext highlighter-rouge">ALTER TABLE .. DROP PARTITION</code> throws <code class="language-plaintext highlighter-rouge">NoSuchPartitionsException</code> for not existing partitions</li>
    </ul>
  </li>
  <li>
    <p>In Spark 3.0.2, <code class="language-plaintext highlighter-rouge">PARTITION(col=null)</code> is always parsed as a null literal in the partition spec. In Spark 3.0.1 or earlier, it is parsed as a string literal of its text representation, e.g., string “null”, if the partition column is string type. To restore the legacy behavior, you can set <code class="language-plaintext highlighter-rouge">spark.sql.legacy.parseNullPartitionSpecAsStringLiteral</code> as true.</p>
  </li>
  <li>In Spark 3.0.2, the output schema of <code class="language-plaintext highlighter-rouge">SHOW DATABASES</code> becomes <code class="language-plaintext highlighter-rouge">namespace: string</code>. In Spark version 3.0.1 and earlier, the schema was <code class="language-plaintext highlighter-rouge">databaseName: string</code>. Since Spark 3.0.2, you can restore the old schema by setting <code class="language-plaintext highlighter-rouge">spark.sql.legacy.keepCommandOutputSchema</code> to <code class="language-plaintext highlighter-rouge">true</code>.</li>
</ul>

<h2 id="upgrading-from-spark-sql-30-to-301">Upgrading from Spark SQL 3.0 to 3.0.1<a class="anchorjs-link " href="https://spark.apache.org/docs/latest/sql-migration-guide.html#upgrading-from-spark-sql-30-to-301" aria-label="Anchor link for: upgrading from spark sql 30 to 301" data-anchorjs-icon="" style="font-family: anchorjs-icons; font-style: normal; font-variant: normal; font-weight: normal; padding-left: 0.375em;"></a></h2>

<ul>
  <li>
    <p>In Spark 3.0, JSON datasource and JSON function <code class="language-plaintext highlighter-rouge">schema_of_json</code> infer TimestampType from string values if they match to the pattern defined by the JSON option <code class="language-plaintext highlighter-rouge">timestampFormat</code>. Since version 3.0.1, the timestamp type inference is disabled by default. Set the JSON option <code class="language-plaintext highlighter-rouge">inferTimestamp</code> to <code class="language-plaintext highlighter-rouge">true</code> to enable such type inference.</p>
  </li>
  <li>
    <p>In Spark 3.0, when casting string to integral types(tinyint, smallint, int and bigint), datetime types(date, timestamp and interval) and boolean type, the leading and trailing characters (&lt;= ASCII 32) will be trimmed. For example, <code class="language-plaintext highlighter-rouge">cast('\b1\b' as int)</code> results <code class="language-plaintext highlighter-rouge">1</code>. Since Spark 3.0.1, only the leading and trailing whitespace ASCII characters will be trimmed. For example, <code class="language-plaintext highlighter-rouge">cast('\t1\t' as int)</code> results <code class="language-plaintext highlighter-rouge">1</code> but <code class="language-plaintext highlighter-rouge">cast('\b1\b' as int)</code> results <code class="language-plaintext highlighter-rouge">NULL</code>.</p>
  </li>
</ul>

<h2 id="upgrading-from-spark-sql-24-to-30">Upgrading from Spark SQL 2.4 to 3.0<a class="anchorjs-link " href="https://spark.apache.org/docs/latest/sql-migration-guide.html#upgrading-from-spark-sql-24-to-30" aria-label="Anchor link for: upgrading from spark sql 24 to 30" data-anchorjs-icon="" style="font-family: anchorjs-icons; font-style: normal; font-variant: normal; font-weight: normal; padding-left: 0.375em;"></a></h2>

<h3 id="datasetdataframe-apis">Dataset/DataFrame APIs<a class="anchorjs-link " href="https://spark.apache.org/docs/latest/sql-migration-guide.html#datasetdataframe-apis" aria-label="Anchor link for: datasetdataframe apis" data-anchorjs-icon="" style="font-family: anchorjs-icons; font-style: normal; font-variant: normal; font-weight: normal; padding-left: 0.375em;"></a></h3>

<ul>
  <li>
    <p>In Spark 3.0, the Dataset and DataFrame API <code class="language-plaintext highlighter-rouge">unionAll</code> is no longer deprecated. It is an alias for <code class="language-plaintext highlighter-rouge">union</code>.</p>
  </li>
  <li>
    <p>In Spark 2.4 and below, <code class="language-plaintext highlighter-rouge">Dataset.groupByKey</code> results to a grouped dataset with key attribute is wrongly named as “value”, if the key is non-struct type, for example, int, string, array, etc. This is counterintuitive and makes the schema of aggregation queries unexpected. For example, the schema of <code class="language-plaintext highlighter-rouge">ds.groupByKey(...).count()</code> is <code class="language-plaintext highlighter-rouge">(value, count)</code>. Since Spark 3.0, we name the grouping attribute to “key”. The old behavior is preserved under a newly added configuration <code class="language-plaintext highlighter-rouge">spark.sql.legacy.dataset.nameNonStructGroupingKeyAsValue</code> with a default value of <code class="language-plaintext highlighter-rouge">false</code>.</p>
  </li>
  <li>
    <p>In Spark 3.0, the column metadata will always be propagated in the API <code class="language-plaintext highlighter-rouge">Column.name</code> and <code class="language-plaintext highlighter-rouge">Column.as</code>. In Spark version 2.4 and earlier, the metadata of <code class="language-plaintext highlighter-rouge">NamedExpression</code> is set as the <code class="language-plaintext highlighter-rouge">explicitMetadata</code> for the new column at the time the API is called, it won’t change even if the underlying <code class="language-plaintext highlighter-rouge">NamedExpression</code> changes metadata. To restore the behavior before Spark 3.0, you can use the API <code class="language-plaintext highlighter-rouge">as(alias: String, metadata: Metadata)</code> with explicit metadata.</p>
  </li>
  <li>
    <p>When turning a Dataset to another Dataset, Spark will up cast the fields in the original Dataset to the type of corresponding fields in the target DataSet. In version 2.4 and earlier, this up cast is not very strict, e.g. <code class="language-plaintext highlighter-rouge">Seq("str").toDS.as[Int]</code> fails, but <code class="language-plaintext highlighter-rouge">Seq("str").toDS.as[Boolean]</code> works and throw NPE during execution. In Spark 3.0, the up cast is stricter and turning String into something else is not allowed, i.e. <code class="language-plaintext highlighter-rouge">Seq("str").toDS.as[Boolean]</code> will fail during analysis. To restore the behavior before Spark 3.0, set <code class="language-plaintext highlighter-rouge">spark.sql.legacy.doLooseUpcast</code> to <code class="language-plaintext highlighter-rouge">true</code>.</p>
  </li>
</ul>

<h3 id="ddl-statements">DDL Statements<a class="anchorjs-link " href="https://spark.apache.org/docs/latest/sql-migration-guide.html#ddl-statements" aria-label="Anchor link for: ddl statements" data-anchorjs-icon="" style="font-family: anchorjs-icons; font-style: normal; font-variant: normal; font-weight: normal; padding-left: 0.375em;"></a></h3>

<ul>
  <li>
    <p>In Spark 3.0, when inserting a value into a table column with a different data type, the type coercion is performed as per ANSI SQL standard. Certain unreasonable type conversions such as converting <code class="language-plaintext highlighter-rouge">string</code> to <code class="language-plaintext highlighter-rouge">int</code> and <code class="language-plaintext highlighter-rouge">double</code> to <code class="language-plaintext highlighter-rouge">boolean</code> are disallowed. A runtime exception is thrown if the value is out-of-range for the data type of the column. In Spark version 2.4 and below, type conversions during table insertion are allowed as long as they are valid <code class="language-plaintext highlighter-rouge">Cast</code>. When inserting an out-of-range value to an integral field, the low-order bits of the value is inserted(the same as Java/Scala numeric type casting). For example, if 257 is inserted to a field of byte type, the result is 1. The behavior is controlled by the option <code class="language-plaintext highlighter-rouge">spark.sql.storeAssignmentPolicy</code>, with a default value as “ANSI”. Setting the option as “Legacy” restores the previous behavior.</p>
  </li>
  <li>
    <p>The <code class="language-plaintext highlighter-rouge">ADD JAR</code> command previously returned a result set with the single value 0. It now returns an empty result set.</p>
  </li>
  <li>
    <p>Spark 2.4 and below: the <code class="language-plaintext highlighter-rouge">SET</code> command works without any warnings even if the specified key is for <code class="language-plaintext highlighter-rouge">SparkConf</code> entries and it has no effect because the command does not update <code class="language-plaintext highlighter-rouge">SparkConf</code>, but the behavior might confuse users. In 3.0, the command fails if a <code class="language-plaintext highlighter-rouge">SparkConf</code> key is used. You can disable such a check by setting <code class="language-plaintext highlighter-rouge">spark.sql.legacy.setCommandRejectsSparkCoreConfs</code> to <code class="language-plaintext highlighter-rouge">false</code>.</p>
  </li>
  <li>
    <p>Refreshing a cached table would trigger a table uncache operation and then a table cache (lazily) operation. In Spark version 2.4 and below, the cache name and storage level are not preserved before the uncache operation. Therefore, the cache name and storage level could be changed unexpectedly. In Spark 3.0, cache name and storage level are first preserved for cache recreation. It helps to maintain a consistent cache behavior upon table refreshing.</p>
  </li>
  <li>
    <p>In Spark 3.0, the properties listing below become reserved; commands fail if you specify reserved properties in places like <code class="language-plaintext highlighter-rouge">CREATE DATABASE ... WITH DBPROPERTIES</code> and <code class="language-plaintext highlighter-rouge">ALTER TABLE ... SET TBLPROPERTIES</code>. You need their specific clauses to specify them, for example, <code class="language-plaintext highlighter-rouge">CREATE DATABASE test COMMENT 'any comment' LOCATION 'some path'</code>. You can set <code class="language-plaintext highlighter-rouge">spark.sql.legacy.notReserveProperties</code> to <code class="language-plaintext highlighter-rouge">true</code> to ignore the <code class="language-plaintext highlighter-rouge">ParseException</code>, in this case, these properties will be silently removed, for example: <code class="language-plaintext highlighter-rouge">SET DBPROPERTIES('location'='/tmp')</code> will have no effect. In Spark version 2.4 and below, these properties are neither reserved nor have side effects, for example, <code class="language-plaintext highlighter-rouge">SET DBPROPERTIES('location'='/tmp')</code> do not change the location of the database but only create a headless property just like <code class="language-plaintext highlighter-rouge">'a'='b'</code>.</p>

    <table>
      <thead>
        <tr>
          <th>Property (case sensitive)</th>
          <th>Database Reserved</th>
          <th>Table Reserved</th>
          <th>Remarks</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <td>provider</td>
          <td>no</td>
          <td>yes</td>
          <td>For tables, use the <code class="language-plaintext highlighter-rouge">USING</code> clause to specify it. Once set, it can’t be changed.</td>
        </tr>
        <tr>
          <td>location</td>
          <td>yes</td>
          <td>yes</td>
          <td>For databases and tables, use the <code class="language-plaintext highlighter-rouge">LOCATION</code> clause to specify it.</td>
        </tr>
        <tr>
          <td>owner</td>
          <td>yes</td>
          <td>yes</td>
          <td>For databases and tables, it is determined by the user who runs spark and create the table.</td>
        </tr>
      </tbody>
    </table>
  </li>
  <li>
    <p>In Spark 3.0, you can use <code class="language-plaintext highlighter-rouge">ADD FILE</code> to add file directories as well. Earlier you could add only single files using this command. To restore the behavior of earlier versions, set <code class="language-plaintext highlighter-rouge">spark.sql.legacy.addSingleFileInAddFile</code> to <code class="language-plaintext highlighter-rouge">true</code>.</p>
  </li>
  <li>
    <p>In Spark 3.0, <code class="language-plaintext highlighter-rouge">SHOW TBLPROPERTIES</code> throws <code class="language-plaintext highlighter-rouge">AnalysisException</code> if the table does not exist. In Spark version 2.4 and below, this scenario caused <code class="language-plaintext highlighter-rouge">NoSuchTableException</code>.</p>
  </li>
  <li>
    <p>In Spark 3.0, <code class="language-plaintext highlighter-rouge">SHOW CREATE TABLE table_identifier</code> always returns Spark DDL, even when the given table is a Hive SerDe table. For generating Hive DDL, use <code class="language-plaintext highlighter-rouge">SHOW CREATE TABLE table_identifier AS SERDE</code> command instead.</p>
  </li>
  <li>
    <p>In Spark 3.0, column of CHAR type is not allowed in non-Hive-Serde tables, and CREATE/ALTER TABLE commands will fail if CHAR type is detected. Please use STRING type instead. In Spark version 2.4 and below, CHAR type is treated as STRING type and the length parameter is simply ignored.</p>
  </li>
</ul>

<h3 id="udfs-and-built-in-functions">UDFs and Built-in Functions<a class="anchorjs-link " href="https://spark.apache.org/docs/latest/sql-migration-guide.html#udfs-and-built-in-functions" aria-label="Anchor link for: udfs and built in functions" data-anchorjs-icon="" style="font-family: anchorjs-icons; font-style: normal; font-variant: normal; font-weight: normal; padding-left: 0.375em;"></a></h3>

<ul>
  <li>
    <p>In Spark 3.0, the <code class="language-plaintext highlighter-rouge">date_add</code> and <code class="language-plaintext highlighter-rouge">date_sub</code> functions accepts only int, smallint, tinyint as the 2nd argument; fractional and non-literal strings are not valid anymore, for example: <code class="language-plaintext highlighter-rouge">date_add(cast('1964-05-23' as date), '12.34')</code> causes <code class="language-plaintext highlighter-rouge">AnalysisException</code>. Note that, string literals are still allowed, but Spark will throw <code class="language-plaintext highlighter-rouge">AnalysisException</code> if the string content is not a valid integer. In Spark version 2.4 and below, if the 2nd argument is fractional or string value, it is coerced to int value, and the result is a date value of <code class="language-plaintext highlighter-rouge">1964-06-04</code>.</p>
  </li>
  <li>
    <p>In Spark 3.0, the function <code class="language-plaintext highlighter-rouge">percentile_approx</code> and its alias <code class="language-plaintext highlighter-rouge">approx_percentile</code> only accept integral value with range in <code class="language-plaintext highlighter-rouge">[1, 2147483647]</code> as its 3rd argument <code class="language-plaintext highlighter-rouge">accuracy</code>, fractional and string types are disallowed, for example, <code class="language-plaintext highlighter-rouge">percentile_approx(10.0, 0.2, 1.8D)</code> causes <code class="language-plaintext highlighter-rouge">AnalysisException</code>. In Spark version 2.4 and below, if <code class="language-plaintext highlighter-rouge">accuracy</code> is fractional or string value, it is coerced to an int value, <code class="language-plaintext highlighter-rouge">percentile_approx(10.0, 0.2, 1.8D)</code> is operated as <code class="language-plaintext highlighter-rouge">percentile_approx(10.0, 0.2, 1)</code> which results in <code class="language-plaintext highlighter-rouge">10.0</code>.</p>
  </li>
  <li>
    <p>In Spark 3.0, an analysis exception is thrown when hash expressions are applied on elements of <code class="language-plaintext highlighter-rouge">MapType</code>. To restore the behavior before Spark 3.0, set <code class="language-plaintext highlighter-rouge">spark.sql.legacy.allowHashOnMapType</code> to <code class="language-plaintext highlighter-rouge">true</code>.</p>
  </li>
  <li>
    <p>In Spark 3.0, when the <code class="language-plaintext highlighter-rouge">array</code>/<code class="language-plaintext highlighter-rouge">map</code> function is called without any parameters, it returns an empty collection with <code class="language-plaintext highlighter-rouge">NullType</code> as element type. In Spark version 2.4 and below, it returns an empty collection with <code class="language-plaintext highlighter-rouge">StringType</code> as element type. To restore the behavior before Spark 3.0, you can set <code class="language-plaintext highlighter-rouge">spark.sql.legacy.createEmptyCollectionUsingStringType</code> to <code class="language-plaintext highlighter-rouge">true</code>.</p>
  </li>
  <li>
    <p>In Spark 3.0, the <code class="language-plaintext highlighter-rouge">from_json</code> functions supports two modes - <code class="language-plaintext highlighter-rouge">PERMISSIVE</code> and <code class="language-plaintext highlighter-rouge">FAILFAST</code>. The modes can be set via the <code class="language-plaintext highlighter-rouge">mode</code> option. The default mode became <code class="language-plaintext highlighter-rouge">PERMISSIVE</code>. In previous versions, behavior of <code class="language-plaintext highlighter-rouge">from_json</code> did not conform to either <code class="language-plaintext highlighter-rouge">PERMISSIVE</code> nor <code class="language-plaintext highlighter-rouge">FAILFAST</code>, especially in processing of malformed JSON records. For example, the JSON string <code class="language-plaintext highlighter-rouge">{"a" 1}</code> with the schema <code class="language-plaintext highlighter-rouge">a INT</code> is converted to <code class="language-plaintext highlighter-rouge">null</code> by previous versions but Spark 3.0 converts it to <code class="language-plaintext highlighter-rouge">Row(null)</code>.</p>
  </li>
  <li>
    <p>In Spark version 2.4 and below, you can create map values with map type key via built-in function such as <code class="language-plaintext highlighter-rouge">CreateMap</code>, <code class="language-plaintext highlighter-rouge">MapFromArrays</code>, etc. In Spark 3.0, it’s not allowed to create map values with map type key with these built-in functions. Users can use <code class="language-plaintext highlighter-rouge">map_entries</code> function to convert map to array&lt;struct&lt;key, value» as a workaround. In addition, users can still read map values with map type key from data source or Java/Scala collections, though it is discouraged.</p>
  </li>
  <li>
    <p>In Spark version 2.4 and below, you can create a map with duplicated keys via built-in functions like <code class="language-plaintext highlighter-rouge">CreateMap</code>, <code class="language-plaintext highlighter-rouge">StringToMap</code>, etc. The behavior of map with duplicated keys is undefined, for example, map look up respects the duplicated key appears first, <code class="language-plaintext highlighter-rouge">Dataset.collect</code> only keeps the duplicated key appears last, <code class="language-plaintext highlighter-rouge">MapKeys</code> returns duplicated keys, etc. In Spark 3.0, Spark throws <code class="language-plaintext highlighter-rouge">RuntimeException</code> when duplicated keys are found. You can set <code class="language-plaintext highlighter-rouge">spark.sql.mapKeyDedupPolicy</code> to <code class="language-plaintext highlighter-rouge">LAST_WIN</code> to deduplicate map keys with last wins policy. Users may still read map values with duplicated keys from data sources which do not enforce it (for example, Parquet), the behavior is undefined.</p>
  </li>
  <li>
    <p>In Spark 3.0, using <code class="language-plaintext highlighter-rouge">org.apache.spark.sql.functions.udf(AnyRef, DataType)</code> is not allowed by default. Remove the return type parameter to automatically switch to typed Scala udf is recommended, or set <code class="language-plaintext highlighter-rouge">spark.sql.legacy.allowUntypedScalaUDF</code> to true to keep using it. In Spark version 2.4 and below, if <code class="language-plaintext highlighter-rouge">org.apache.spark.sql.functions.udf(AnyRef, DataType)</code> gets a Scala closure with primitive-type argument, the returned UDF returns null if the input values is null. However, in Spark 3.0, the UDF returns the default value of the Java type if the input value is null. For example, <code class="language-plaintext highlighter-rouge">val f = udf((x: Int) =&gt; x, IntegerType)</code>, <code class="language-plaintext highlighter-rouge">f($"x")</code> returns null in Spark 2.4 and below if column <code class="language-plaintext highlighter-rouge">x</code> is null, and return 0 in Spark 3.0. This behavior change is introduced because Spark 3.0 is built with Scala 2.12 by default.</p>
  </li>
  <li>
    <p>In Spark 3.0, a higher-order function <code class="language-plaintext highlighter-rouge">exists</code> follows the three-valued boolean logic, that is, if the <code class="language-plaintext highlighter-rouge">predicate</code> returns any <code class="language-plaintext highlighter-rouge">null</code>s and no <code class="language-plaintext highlighter-rouge">true</code> is obtained, then <code class="language-plaintext highlighter-rouge">exists</code> returns <code class="language-plaintext highlighter-rouge">null</code> instead of <code class="language-plaintext highlighter-rouge">false</code>. For example, <code class="language-plaintext highlighter-rouge">exists(array(1, null, 3), x -&gt; x % 2 == 0)</code> is <code class="language-plaintext highlighter-rouge">null</code>. The previous behavior can be restored by setting <code class="language-plaintext highlighter-rouge">spark.sql.legacy.followThreeValuedLogicInArrayExists</code> to <code class="language-plaintext highlighter-rouge">false</code>.</p>
  </li>
  <li>
    <p>In Spark 3.0, the <code class="language-plaintext highlighter-rouge">add_months</code> function does not adjust the resulting date to a last day of month if the original date is a last day of months. For example, <code class="language-plaintext highlighter-rouge">select add_months(DATE'2019-02-28', 1)</code> results <code class="language-plaintext highlighter-rouge">2019-03-28</code>. In Spark version 2.4 and below, the resulting date is adjusted when the original date is a last day of months. For example, adding a month to <code class="language-plaintext highlighter-rouge">2019-02-28</code> results in <code class="language-plaintext highlighter-rouge">2019-03-31</code>.</p>
  </li>
  <li>
    <p>In Spark version 2.4 and below, the <code class="language-plaintext highlighter-rouge">current_timestamp</code> function returns a timestamp with millisecond resolution only. In Spark 3.0, the function can return the result with microsecond resolution if the underlying clock available on the system offers such resolution.</p>
  </li>
  <li>
    <p>In Spark 3.0, a 0-argument Java UDF is executed in the executor side identically with other UDFs. In Spark version 2.4 and below, the 0-argument Java UDF alone was executed in the driver side, and the result was propagated to executors, which might be more performant in some cases but caused inconsistency with a correctness issue in some cases.</p>
  </li>
  <li>
    <p>The result of <code class="language-plaintext highlighter-rouge">java.lang.Math</code>’s <code class="language-plaintext highlighter-rouge">log</code>, <code class="language-plaintext highlighter-rouge">log1p</code>, <code class="language-plaintext highlighter-rouge">exp</code>, <code class="language-plaintext highlighter-rouge">expm1</code>, and <code class="language-plaintext highlighter-rouge">pow</code> may vary across platforms. In Spark 3.0, the result of the equivalent SQL functions (including related SQL functions like <code class="language-plaintext highlighter-rouge">LOG10</code>) return values consistent with <code class="language-plaintext highlighter-rouge">java.lang.StrictMath</code>. In virtually all cases this makes no difference in the return value, and the difference is very small, but may not exactly match <code class="language-plaintext highlighter-rouge">java.lang.Math</code> on x86 platforms in cases like, for example, <code class="language-plaintext highlighter-rouge">log(3.0)</code>, whose value varies between <code class="language-plaintext highlighter-rouge">Math.log()</code> and <code class="language-plaintext highlighter-rouge">StrictMath.log()</code>.</p>
  </li>
  <li>
    <p>In Spark 3.0, the <code class="language-plaintext highlighter-rouge">cast</code> function processes string literals such as ‘Infinity’, ‘+Infinity’, ‘-Infinity’, ‘NaN’, ‘Inf’, ‘+Inf’, ‘-Inf’ in a case-insensitive manner when casting the literals to <code class="language-plaintext highlighter-rouge">Double</code> or <code class="language-plaintext highlighter-rouge">Float</code> type to ensure greater compatibility with other database systems. This behavior change is illustrated in the table below:</p>

    <table>
      <thead>
        <tr>
          <th>Operation</th>
          <th>Result before Spark 3.0</th>
          <th>Result in Spark 3.0</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <td>CAST(‘infinity’ AS DOUBLE)</td>
          <td>NULL</td>
          <td>Double.PositiveInfinity</td>
        </tr>
        <tr>
          <td>CAST(‘+infinity’ AS DOUBLE)</td>
          <td>NULL</td>
          <td>Double.PositiveInfinity</td>
        </tr>
        <tr>
          <td>CAST(‘inf’ AS DOUBLE)</td>
          <td>NULL</td>
          <td>Double.PositiveInfinity</td>
        </tr>
        <tr>
          <td>CAST(‘inf’ AS DOUBLE)</td>
          <td>NULL</td>
          <td>Double.PositiveInfinity</td>
        </tr>
        <tr>
          <td>CAST(‘-infinity’ AS DOUBLE)</td>
          <td>NULL</td>
          <td>Double.NegativeInfinity</td>
        </tr>
        <tr>
          <td>CAST(‘-inf’ AS DOUBLE)</td>
          <td>NULL</td>
          <td>Double.NegativeInfinity</td>
        </tr>
        <tr>
          <td>CAST(‘infinity’ AS FLOAT)</td>
          <td>NULL</td>
          <td>Float.PositiveInfinity</td>
        </tr>
        <tr>
          <td>CAST(‘+infinity’ AS FLOAT)</td>
          <td>NULL</td>
          <td>Float.PositiveInfinity</td>
        </tr>
        <tr>
          <td>CAST(‘inf’ AS FLOAT)</td>
          <td>NULL</td>
          <td>Float.PositiveInfinity</td>
        </tr>
        <tr>
          <td>CAST(‘+inf’ AS FLOAT)</td>
          <td>NULL</td>
          <td>Float.PositiveInfinity</td>
        </tr>
        <tr>
          <td>CAST(‘-infinity’ AS FLOAT)</td>
          <td>NULL</td>
          <td>Float.NegativeInfinity</td>
        </tr>
        <tr>
          <td>CAST(‘-inf’ AS FLOAT)</td>
          <td>NULL</td>
          <td>Float.NegativeInfinity</td>
        </tr>
        <tr>
          <td>CAST(‘nan’ AS DOUBLE)</td>
          <td>NULL</td>
          <td>Double.NaN</td>
        </tr>
        <tr>
          <td>CAST(‘nan’ AS FLOAT)</td>
          <td>NULL</td>
          <td>Float.NaN</td>
        </tr>
      </tbody>
    </table>
  </li>
  <li>
    <p>In Spark 3.0, when casting interval values to string type, there is no “interval” prefix, for example, <code class="language-plaintext highlighter-rouge">1 days 2 hours</code>. In Spark version 2.4 and below, the string contains the “interval” prefix like <code class="language-plaintext highlighter-rouge">interval 1 days 2 hours</code>.</p>
  </li>
  <li>
    <p>In Spark 3.0, when casting string value to integral types(tinyint, smallint, int and bigint), datetime types(date, timestamp and interval) and boolean type, the leading and trailing whitespaces (&lt;= ASCII 32) will be trimmed before converted to these type values, for example, <code class="language-plaintext highlighter-rouge">cast(' 1\t' as int)</code> results <code class="language-plaintext highlighter-rouge">1</code>, <code class="language-plaintext highlighter-rouge">cast(' 1\t' as boolean)</code> results <code class="language-plaintext highlighter-rouge">true</code>, <code class="language-plaintext highlighter-rouge">cast('2019-10-10\t as date)</code> results the date value <code class="language-plaintext highlighter-rouge">2019-10-10</code>. In Spark version 2.4 and below, when casting string to integrals and booleans, it does not trim the whitespaces from both ends; the foregoing results is <code class="language-plaintext highlighter-rouge">null</code>, while to datetimes, only the trailing spaces (= ASCII 32) are removed.</p>
  </li>
</ul>

<h3 id="query-engine">Query Engine<a class="anchorjs-link " href="https://spark.apache.org/docs/latest/sql-migration-guide.html#query-engine" aria-label="Anchor link for: query engine" data-anchorjs-icon="" style="font-family: anchorjs-icons; font-style: normal; font-variant: normal; font-weight: normal; padding-left: 0.375em;"></a></h3>

<ul>
  <li>
    <p>In Spark version 2.4 and below, SQL queries such as <code class="language-plaintext highlighter-rouge">FROM &lt;table&gt;</code> or <code class="language-plaintext highlighter-rouge">FROM &lt;table&gt; UNION ALL FROM &lt;table&gt;</code> are supported by accident. In hive-style <code class="language-plaintext highlighter-rouge">FROM &lt;table&gt; SELECT &lt;expr&gt;</code>, the <code class="language-plaintext highlighter-rouge">SELECT</code> clause is not negligible. Neither Hive nor Presto support this syntax. These queries are treated as invalid in Spark 3.0.</p>
  </li>
  <li>
    <p>In Spark 3.0, the interval literal syntax does not allow multiple from-to units anymore. For example, <code class="language-plaintext highlighter-rouge">SELECT INTERVAL '1-1' YEAR TO MONTH '2-2' YEAR TO MONTH'</code> throws parser exception.</p>
  </li>
  <li>
    <p>In Spark 3.0, numbers written in scientific notation(for example, <code class="language-plaintext highlighter-rouge">1E2</code>) would be parsed as Double. In Spark version 2.4 and below, they’re parsed as Decimal. To restore the behavior before Spark 3.0, you can set <code class="language-plaintext highlighter-rouge">spark.sql.legacy.exponentLiteralAsDecimal.enabled</code> to <code class="language-plaintext highlighter-rouge">true</code>.</p>
  </li>
  <li>
    <p>In Spark 3.0, day-time interval strings are converted to intervals with respect to the <code class="language-plaintext highlighter-rouge">from</code> and <code class="language-plaintext highlighter-rouge">to</code> bounds. If an input string does not match to the pattern defined by specified bounds, the <code class="language-plaintext highlighter-rouge">ParseException</code> exception is thrown. For example, <code class="language-plaintext highlighter-rouge">interval '2 10:20' hour to minute</code> raises the exception because the expected format is <code class="language-plaintext highlighter-rouge">[+|-]h[h]:[m]m</code>. In Spark version 2.4, the <code class="language-plaintext highlighter-rouge">from</code> bound was not taken into account, and the <code class="language-plaintext highlighter-rouge">to</code> bound was used to truncate the resulted interval. For instance, the day-time interval string from the showed example is converted to <code class="language-plaintext highlighter-rouge">interval 10 hours 20 minutes</code>. To restore the behavior before Spark 3.0, you can set <code class="language-plaintext highlighter-rouge">spark.sql.legacy.fromDayTimeString.enabled</code> to <code class="language-plaintext highlighter-rouge">true</code>.</p>
  </li>
  <li>
    <p>In Spark 3.0, negative scale of decimal is not allowed by default, for example, data type of literal like <code class="language-plaintext highlighter-rouge">1E10BD</code> is <code class="language-plaintext highlighter-rouge">DecimalType(11, 0)</code>. In Spark version 2.4 and below, it was <code class="language-plaintext highlighter-rouge">DecimalType(2, -9)</code>. To restore the behavior before Spark 3.0, you can set <code class="language-plaintext highlighter-rouge">spark.sql.legacy.allowNegativeScaleOfDecimal</code> to <code class="language-plaintext highlighter-rouge">true</code>.</p>
  </li>
  <li>
    <p>In Spark 3.0, the unary arithmetic operator plus(<code class="language-plaintext highlighter-rouge">+</code>) only accepts string, numeric and interval type values as inputs. Besides, <code class="language-plaintext highlighter-rouge">+</code> with an integral string representation is coerced to a double value, for example, <code class="language-plaintext highlighter-rouge">+'1'</code> returns <code class="language-plaintext highlighter-rouge">1.0</code>. In Spark version 2.4 and below, this operator is ignored. There is no type checking for it, thus, all type values with a <code class="language-plaintext highlighter-rouge">+</code> prefix are valid, for example, <code class="language-plaintext highlighter-rouge">+ array(1, 2)</code> is valid and results <code class="language-plaintext highlighter-rouge">[1, 2]</code>. Besides, there is no type coercion for it at all, for example, in Spark 2.4, the result of <code class="language-plaintext highlighter-rouge">+'1'</code> is string <code class="language-plaintext highlighter-rouge">1</code>.</p>
  </li>
  <li>
    <p>In Spark 3.0, Dataset query fails if it contains ambiguous column reference that is caused by self join. A typical example: <code class="language-plaintext highlighter-rouge">val df1 = ...; val df2 = df1.filter(...);</code>, then <code class="language-plaintext highlighter-rouge">df1.join(df2, df1("a") &gt; df2("a"))</code> returns an empty result which is quite confusing. This is because Spark cannot resolve Dataset column references that point to tables being self joined, and <code class="language-plaintext highlighter-rouge">df1("a")</code> is exactly the same as <code class="language-plaintext highlighter-rouge">df2("a")</code> in Spark. To restore the behavior before Spark 3.0, you can set <code class="language-plaintext highlighter-rouge">spark.sql.analyzer.failAmbiguousSelfJoin</code> to <code class="language-plaintext highlighter-rouge">false</code>.</p>
  </li>
  <li>
    <p>In Spark 3.0, <code class="language-plaintext highlighter-rouge">spark.sql.legacy.ctePrecedencePolicy</code> is introduced to control the behavior for name conflicting in the nested WITH clause. By default value <code class="language-plaintext highlighter-rouge">EXCEPTION</code>, Spark throws an AnalysisException, it forces users to choose the specific substitution order they wanted. If set to <code class="language-plaintext highlighter-rouge">CORRECTED</code> (which is recommended), inner CTE definitions take precedence over outer definitions. For example, set the config to <code class="language-plaintext highlighter-rouge">false</code>, <code class="language-plaintext highlighter-rouge">WITH t AS (SELECT 1), t2 AS (WITH t AS (SELECT 2) SELECT * FROM t) SELECT * FROM t2</code> returns <code class="language-plaintext highlighter-rouge">2</code>, while setting it to <code class="language-plaintext highlighter-rouge">LEGACY</code>, the result is <code class="language-plaintext highlighter-rouge">1</code> which is the behavior in version 2.4 and below.</p>
  </li>
  <li>
    <p>In Spark 3.0, configuration <code class="language-plaintext highlighter-rouge">spark.sql.crossJoin.enabled</code> become internal configuration, and is true by default, so by default spark won’t raise exception on sql with implicit cross join.</p>
  </li>
  <li>
    <p>In Spark version 2.4 and below, float/double -0.0 is semantically equal to 0.0, but -0.0 and 0.0 are considered as different values when used in aggregate grouping keys, window partition keys, and join keys. In Spark 3.0, this bug is fixed. For example, <code class="language-plaintext highlighter-rouge">Seq(-0.0, 0.0).toDF("d").groupBy("d").count()</code> returns <code class="language-plaintext highlighter-rouge">[(0.0, 2)]</code> in Spark 3.0, and <code class="language-plaintext highlighter-rouge">[(0.0, 1), (-0.0, 1)]</code> in Spark 2.4 and below.</p>
  </li>
  <li>
    <p>In Spark version 2.4 and below, invalid time zone ids are silently ignored and replaced by GMT time zone, for example, in the from_utc_timestamp function. In Spark 3.0, such time zone ids are rejected, and Spark throws <code class="language-plaintext highlighter-rouge">java.time.DateTimeException</code>.</p>
  </li>
  <li>
    <p>In Spark 3.0, Proleptic Gregorian calendar is used in parsing, formatting, and converting dates and timestamps as well as in extracting sub-components like years, days and so on. Spark 3.0 uses Java 8 API classes from the <code class="language-plaintext highlighter-rouge">java.time</code> packages that are based on <a href="https://docs.oracle.com/javase/8/docs/api/java/time/chrono/IsoChronology.html">ISO chronology</a>. In Spark version 2.4 and below, those operations are performed using the hybrid calendar (<a href="https://docs.oracle.com/javase/7/docs/api/java/util/GregorianCalendar.html">Julian + Gregorian</a>. The changes impact on the results for dates before October 15, 1582 (Gregorian) and affect on the following Spark 3.0 API:</p>

    <ul>
      <li>
        <p>Parsing/formatting of timestamp/date strings. This effects on CSV/JSON datasources and on the <code class="language-plaintext highlighter-rouge">unix_timestamp</code>, <code class="language-plaintext highlighter-rouge">date_format</code>, <code class="language-plaintext highlighter-rouge">to_unix_timestamp</code>, <code class="language-plaintext highlighter-rouge">from_unixtime</code>, <code class="language-plaintext highlighter-rouge">to_date</code>, <code class="language-plaintext highlighter-rouge">to_timestamp</code> functions when patterns specified by users is used for parsing and formatting. In Spark 3.0, we define our own pattern strings in <a href="https://spark.apache.org/docs/latest/sql-ref-datetime-pattern.html">Datetime Patterns for Formatting and Parsing</a>,
 which is implemented via <a href="https://docs.oracle.com/javase/8/docs/api/java/time/format/DateTimeFormatter.html">DateTimeFormatter</a> under the hood. New implementation performs strict checking of its input. For example, the <code class="language-plaintext highlighter-rouge">2015-07-22 10:00:00</code> timestamp cannot be parse if pattern is <code class="language-plaintext highlighter-rouge">yyyy-MM-dd</code> because the parser does not consume whole input. Another example is the <code class="language-plaintext highlighter-rouge">31/01/2015 00:00</code> input cannot be parsed by the <code class="language-plaintext highlighter-rouge">dd/MM/yyyy hh:mm</code> pattern because <code class="language-plaintext highlighter-rouge">hh</code> supposes hours in the range <code class="language-plaintext highlighter-rouge">1-12</code>. In Spark version 2.4 and below, <code class="language-plaintext highlighter-rouge">java.text.SimpleDateFormat</code> is used for timestamp/date string conversions, and the supported patterns are described in <a href="https://docs.oracle.com/javase/7/docs/api/java/text/SimpleDateFormat.html">SimpleDateFormat</a>. The old behavior can be restored by setting <code class="language-plaintext highlighter-rouge">spark.sql.legacy.timeParserPolicy</code> to <code class="language-plaintext highlighter-rouge">LEGACY</code>.</p>
      </li>
      <li>
        <p>The <code class="language-plaintext highlighter-rouge">weekofyear</code>, <code class="language-plaintext highlighter-rouge">weekday</code>, <code class="language-plaintext highlighter-rouge">dayofweek</code>, <code class="language-plaintext highlighter-rouge">date_trunc</code>, <code class="language-plaintext highlighter-rouge">from_utc_timestamp</code>, <code class="language-plaintext highlighter-rouge">to_utc_timestamp</code>, and <code class="language-plaintext highlighter-rouge">unix_timestamp</code> functions use java.time API for calculation week number of year, day number of week as well for conversion from/to TimestampType values in UTC time zone.</p>
      </li>
      <li>
        <p>The JDBC options <code class="language-plaintext highlighter-rouge">lowerBound</code> and <code class="language-plaintext highlighter-rouge">upperBound</code> are converted to TimestampType/DateType values in the same way as casting strings to TimestampType/DateType values. The conversion is based on Proleptic Gregorian calendar, and time zone defined by the SQL config <code class="language-plaintext highlighter-rouge">spark.sql.session.timeZone</code>. In Spark version 2.4 and below, the conversion is based on the hybrid calendar (Julian + Gregorian) and on default system time zone.</p>
      </li>
      <li>
        <p>Formatting <code class="language-plaintext highlighter-rouge">TIMESTAMP</code> and <code class="language-plaintext highlighter-rouge">DATE</code> literals.</p>
      </li>
      <li>
        <p>Creating typed <code class="language-plaintext highlighter-rouge">TIMESTAMP</code> and <code class="language-plaintext highlighter-rouge">DATE</code> literals from strings. In Spark 3.0, string conversion to typed <code class="language-plaintext highlighter-rouge">TIMESTAMP</code>/<code class="language-plaintext highlighter-rouge">DATE</code> literals is performed via casting to <code class="language-plaintext highlighter-rouge">TIMESTAMP</code>/<code class="language-plaintext highlighter-rouge">DATE</code> values. For example, <code class="language-plaintext highlighter-rouge">TIMESTAMP '2019-12-23 12:59:30'</code> is semantically equal to <code class="language-plaintext highlighter-rouge">CAST('2019-12-23 12:59:30' AS TIMESTAMP)</code>. When the input string does not contain information about time zone, the time zone from the SQL config <code class="language-plaintext highlighter-rouge">spark.sql.session.timeZone</code> is used in that case. In Spark version 2.4 and below, the conversion is based on JVM system time zone. The different sources of the default time zone may change the behavior of typed <code class="language-plaintext highlighter-rouge">TIMESTAMP</code> and <code class="language-plaintext highlighter-rouge">DATE</code> literals.</p>
      </li>
    </ul>
  </li>
  <li>
    <p>In Spark 3.0, <code class="language-plaintext highlighter-rouge">TIMESTAMP</code> literals are converted to strings using the SQL config <code class="language-plaintext highlighter-rouge">spark.sql.session.timeZone</code>. In Spark version 2.4 and below, the conversion uses the default time zone of the Java virtual machine.</p>
  </li>
  <li>
    <p>In Spark 3.0, Spark casts <code class="language-plaintext highlighter-rouge">String</code> to <code class="language-plaintext highlighter-rouge">Date/Timestamp</code> in binary comparisons with dates/timestamps. The previous behavior of casting <code class="language-plaintext highlighter-rouge">Date/Timestamp</code> to <code class="language-plaintext highlighter-rouge">String</code> can be restored by setting <code class="language-plaintext highlighter-rouge">spark.sql.legacy.typeCoercion.datetimeToString.enabled</code> to <code class="language-plaintext highlighter-rouge">true</code>.</p>
  </li>
  <li>In Spark 3.0, special values are supported in conversion from strings to dates and timestamps. Those values are simply notational shorthands that are converted to ordinary date or timestamp values when read. The following string values are supported for dates:
    <ul>
      <li><code class="language-plaintext highlighter-rouge">epoch [zoneId]</code> - 1970-01-01</li>
      <li><code class="language-plaintext highlighter-rouge">today [zoneId]</code> - the current date in the time zone specified by <code class="language-plaintext highlighter-rouge">spark.sql.session.timeZone</code></li>
      <li><code class="language-plaintext highlighter-rouge">yesterday [zoneId]</code> - the current date - 1</li>
      <li><code class="language-plaintext highlighter-rouge">tomorrow [zoneId]</code> - the current date + 1</li>
      <li><code class="language-plaintext highlighter-rouge">now</code> - the date of running the current query. It has the same notion as today</li>
    </ul>

    <p>For example <code class="language-plaintext highlighter-rouge">SELECT date 'tomorrow' - date 'yesterday';</code> should output <code class="language-plaintext highlighter-rouge">2</code>. Here are special timestamp values:</p>
    <ul>
      <li><code class="language-plaintext highlighter-rouge">epoch [zoneId]</code> - 1970-01-01 00:00:00+00 (Unix system time zero)</li>
      <li><code class="language-plaintext highlighter-rouge">today [zoneId]</code> - midnight today</li>
      <li><code class="language-plaintext highlighter-rouge">yesterday [zoneId]</code> - midnight yesterday</li>
      <li><code class="language-plaintext highlighter-rouge">tomorrow [zoneId]</code> - midnight tomorrow</li>
      <li><code class="language-plaintext highlighter-rouge">now</code> - current query start time</li>
    </ul>

    <p>For example <code class="language-plaintext highlighter-rouge">SELECT timestamp 'tomorrow';</code>.</p>
  </li>
  <li>
    <p>Since Spark 3.0, when using <code class="language-plaintext highlighter-rouge">EXTRACT</code> expression to extract the second field from date/timestamp values, the result will be a <code class="language-plaintext highlighter-rouge">DecimalType(8, 6)</code> value with 2 digits for second part, and 6 digits for the fractional part with microsecond precision. e.g. <code class="language-plaintext highlighter-rouge">extract(second from to_timestamp('2019-09-20 10:10:10.1'))</code> results <code class="language-plaintext highlighter-rouge">10.100000</code>.  In Spark version 2.4 and earlier, it returns an <code class="language-plaintext highlighter-rouge">IntegerType</code> value and the result for the former example is <code class="language-plaintext highlighter-rouge">10</code>.</p>
  </li>
  <li>
    <p>In Spark 3.0, datetime pattern letter <code class="language-plaintext highlighter-rouge">F</code> is <strong>aligned day of week in month</strong> that represents the concept of the count of days within the period of a week where the weeks are aligned to the start of the month. In Spark version 2.4 and earlier, it is <strong>week of month</strong> that represents the concept of the count of weeks within the month where weeks start on a fixed day-of-week, e.g. <code class="language-plaintext highlighter-rouge">2020-07-30</code> is 30 days (4 weeks and 2 days) after the first day of the month, so <code class="language-plaintext highlighter-rouge">date_format(date '2020-07-30', 'F')</code> returns 2 in Spark 3.0, but as a week count in Spark 2.x, it returns 5 because it locates in the 5th week of July 2020, where week one is 2020-07-01 to 07-04.</p>
  </li>
  <li>
    <p>In Spark 3.0, Spark will try to use built-in data source writer instead of Hive serde in <code class="language-plaintext highlighter-rouge">CTAS</code>. This behavior is effective only if <code class="language-plaintext highlighter-rouge">spark.sql.hive.convertMetastoreParquet</code> or <code class="language-plaintext highlighter-rouge">spark.sql.hive.convertMetastoreOrc</code> is enabled respectively for Parquet and ORC formats. To restore the behavior before Spark 3.0, you can set <code class="language-plaintext highlighter-rouge">spark.sql.hive.convertMetastoreCtas</code> to <code class="language-plaintext highlighter-rouge">false</code>.</p>
  </li>
  <li>In Spark 3.0, Spark will try to use built-in data source writer instead of Hive serde to process inserting into partitioned ORC/Parquet tables created by using the HiveSQL syntax. This behavior is effective only if <code class="language-plaintext highlighter-rouge">spark.sql.hive.convertMetastoreParquet</code> or <code class="language-plaintext highlighter-rouge">spark.sql.hive.convertMetastoreOrc</code> is enabled respectively for Parquet and ORC formats. To restore the behavior before Spark 3.0, you can set <code class="language-plaintext highlighter-rouge">spark.sql.hive.convertInsertingPartitionedTable</code> to <code class="language-plaintext highlighter-rouge">false</code>.</li>
</ul>

<h3 id="data-sources">Data Sources<a class="anchorjs-link " href="https://spark.apache.org/docs/latest/sql-migration-guide.html#data-sources" aria-label="Anchor link for: data sources" data-anchorjs-icon="" style="font-family: anchorjs-icons; font-style: normal; font-variant: normal; font-weight: normal; padding-left: 0.375em;"></a></h3>

<ul>
  <li>
    <p>In Spark version 2.4 and below, when reading a Hive SerDe table with Spark native data sources(parquet/orc), Spark infers the actual file schema and update the table schema in metastore. In Spark 3.0, Spark doesn’t infer the schema anymore. This should not cause any problems to end users, but if it does, set <code class="language-plaintext highlighter-rouge">spark.sql.hive.caseSensitiveInferenceMode</code> to <code class="language-plaintext highlighter-rouge">INFER_AND_SAVE</code>.</p>
  </li>
  <li>
    <p>In Spark version 2.4 and below, partition column value is converted as null if it can’t be casted to corresponding user provided schema. In 3.0, partition column value is validated with user provided schema. An exception is thrown if the validation fails. You can disable such validation by setting  <code class="language-plaintext highlighter-rouge">spark.sql.sources.validatePartitionColumns</code> to <code class="language-plaintext highlighter-rouge">false</code>.</p>
  </li>
  <li>
    <p>In Spark 3.0, if files or subdirectories disappear during recursive directory listing (that is, they appear in an intermediate listing but then cannot be read or listed during later phases of the recursive directory listing, due to either concurrent file deletions or object store consistency issues) then the listing will fail with an exception unless <code class="language-plaintext highlighter-rouge">spark.sql.files.ignoreMissingFiles</code> is <code class="language-plaintext highlighter-rouge">true</code> (default <code class="language-plaintext highlighter-rouge">false</code>). In previous versions, these missing files or subdirectories would be ignored. Note that this change of behavior only applies during initial table file listing (or during <code class="language-plaintext highlighter-rouge">REFRESH TABLE</code>), not during query execution: the net change is that <code class="language-plaintext highlighter-rouge">spark.sql.files.ignoreMissingFiles</code> is now obeyed during table file listing / query planning, not only at query execution time.</p>
  </li>
  <li>
    <p>In Spark version 2.4 and below, the parser of JSON data source treats empty strings as null for some data types such as <code class="language-plaintext highlighter-rouge">IntegerType</code>. For <code class="language-plaintext highlighter-rouge">FloatType</code>, <code class="language-plaintext highlighter-rouge">DoubleType</code>, <code class="language-plaintext highlighter-rouge">DateType</code> and <code class="language-plaintext highlighter-rouge">TimestampType</code>, it fails on empty strings and throws exceptions. Spark 3.0 disallows empty strings and will throw an exception for data types except for <code class="language-plaintext highlighter-rouge">StringType</code> and <code class="language-plaintext highlighter-rouge">BinaryType</code>. The previous behavior of allowing an empty string can be restored by setting <code class="language-plaintext highlighter-rouge">spark.sql.legacy.json.allowEmptyString.enabled</code> to <code class="language-plaintext highlighter-rouge">true</code>.</p>
  </li>
  <li>
    <p>In Spark version 2.4 and below, JSON datasource and JSON functions like <code class="language-plaintext highlighter-rouge">from_json</code> convert a bad JSON record to a row with all <code class="language-plaintext highlighter-rouge">null</code>s in the PERMISSIVE mode when specified schema is <code class="language-plaintext highlighter-rouge">StructType</code>. In Spark 3.0, the returned row can contain non-<code class="language-plaintext highlighter-rouge">null</code> fields if some of JSON column values were parsed and converted to desired types successfully.</p>
  </li>
  <li>
    <p>In Spark 3.0, JSON datasource and JSON function <code class="language-plaintext highlighter-rouge">schema_of_json</code> infer TimestampType from string values if they match to the pattern defined by the JSON option <code class="language-plaintext highlighter-rouge">timestampFormat</code>. Set JSON option <code class="language-plaintext highlighter-rouge">inferTimestamp</code> to <code class="language-plaintext highlighter-rouge">false</code> to disable such type inference.</p>
  </li>
  <li>
    <p>In Spark version 2.4 and below, CSV datasource converts a malformed CSV string to a row with all <code class="language-plaintext highlighter-rouge">null</code>s in the PERMISSIVE mode. In Spark 3.0, the returned row can contain non-<code class="language-plaintext highlighter-rouge">null</code> fields if some of CSV column values were parsed and converted to desired types successfully.</p>
  </li>
  <li>
    <p>In Spark 3.0, when Avro files are written with user provided schema, the fields are matched by field names between catalyst schema and Avro schema instead of positions.</p>
  </li>
  <li>
    <p>In Spark 3.0, when Avro files are written with user provided non-nullable schema, even the catalyst schema is nullable, Spark is still able to write the files. However, Spark throws runtime NullPointerException if any of the records contains null.</p>
  </li>
  <li>
    <p>In Spark version 2.4 and below, CSV datasource can detect encoding of input files automatically when the files have BOM at the beginning. For instance, CSV datasource can recognize UTF-8, UTF-16BE, UTF-16LE, UTF-32BE and UTF-32LE in the multi-line mode (the CSV option <code class="language-plaintext highlighter-rouge">multiLine</code> is set to <code class="language-plaintext highlighter-rouge">true</code>). In Spark 3.0, CSV datasource reads input files in encoding specified via the CSV option <code class="language-plaintext highlighter-rouge">encoding</code> which has the default value of UTF-8. In this way, if file encoding doesn’t match to the encoding specified via the CSV option, Spark loads the file incorrectly. To solve the issue, users should either set correct encoding via the CSV option <code class="language-plaintext highlighter-rouge">encoding</code> or set the option to <code class="language-plaintext highlighter-rouge">null</code> which fallbacks to encoding auto-detection as in Spark versions before 3.0.</p>
  </li>
</ul>

<h3 id="others">Others<a class="anchorjs-link " href="https://spark.apache.org/docs/latest/sql-migration-guide.html#others" aria-label="Anchor link for: others" data-anchorjs-icon="" style="font-family: anchorjs-icons; font-style: normal; font-variant: normal; font-weight: normal; padding-left: 0.375em;"></a></h3>

<ul>
  <li>
    <p>In Spark version 2.4, when a Spark session is created via <code class="language-plaintext highlighter-rouge">cloneSession()</code>, the newly created Spark session inherits its configuration from its parent <code class="language-plaintext highlighter-rouge">SparkContext</code> even though the same configuration may exist with a different value in its parent Spark session. In Spark 3.0, the configurations of a parent <code class="language-plaintext highlighter-rouge">SparkSession</code> have a higher precedence over the parent <code class="language-plaintext highlighter-rouge">SparkContext</code>. You can restore the old behavior by setting <code class="language-plaintext highlighter-rouge">spark.sql.legacy.sessionInitWithConfigDefaults</code> to <code class="language-plaintext highlighter-rouge">true</code>.</p>
  </li>
  <li>
    <p>In Spark 3.0, if <code class="language-plaintext highlighter-rouge">hive.default.fileformat</code> is not found in <code class="language-plaintext highlighter-rouge">Spark SQL configuration</code> then it falls back to the <code class="language-plaintext highlighter-rouge">hive-site.xml</code> file present in the <code class="language-plaintext highlighter-rouge">Hadoop configuration</code> of <code class="language-plaintext highlighter-rouge">SparkContext</code>.</p>
  </li>
  <li>
    <p>In Spark 3.0, we pad decimal numbers with trailing zeros to the scale of the column for <code class="language-plaintext highlighter-rouge">spark-sql</code> interface, for example:</p>

    <table>
      <thead>
        <tr>
          <th>Query</th>
          <th>Spark 2.4</th>
          <th>Spark 3.0</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <td><code class="language-plaintext highlighter-rouge">SELECT CAST(1 AS decimal(38, 18));</code></td>
          <td>1</td>
          <td>1.000000000000000000</td>
        </tr>
      </tbody>
    </table>
  </li>
  <li>
    <p>In Spark 3.0, we upgraded the built-in Hive from 1.2 to 2.3 and it brings following impacts:</p>

    <ul>
      <li>
        <p>You may need to set <code class="language-plaintext highlighter-rouge">spark.sql.hive.metastore.version</code> and <code class="language-plaintext highlighter-rouge">spark.sql.hive.metastore.jars</code> according to the version of the Hive metastore you want to connect to. For example: set <code class="language-plaintext highlighter-rouge">spark.sql.hive.metastore.version</code> to <code class="language-plaintext highlighter-rouge">1.2.1</code> and <code class="language-plaintext highlighter-rouge">spark.sql.hive.metastore.jars</code> to <code class="language-plaintext highlighter-rouge">maven</code> if your Hive metastore version is 1.2.1.</p>
      </li>
      <li>
        <p>You need to migrate your custom SerDes to Hive 2.3 or build your own Spark with <code class="language-plaintext highlighter-rouge">hive-1.2</code> profile. See <a href="https://issues.apache.org/jira/browse/HIVE-15167">HIVE-15167</a> for more details.</p>
      </li>
      <li>
        <p>The decimal string representation can be different between Hive 1.2 and Hive 2.3 when using <code class="language-plaintext highlighter-rouge">TRANSFORM</code> operator in SQL for script transformation, which depends on hive’s behavior. In Hive 1.2, the string representation omits trailing zeroes. But in Hive 2.3, it is always padded to 18 digits with trailing zeroes if necessary.</p>
      </li>
    </ul>
  </li>
</ul>

<h2 id="upgrading-from-spark-sql-247-to-248">Upgrading from Spark SQL 2.4.7 to 2.4.8<a class="anchorjs-link " href="https://spark.apache.org/docs/latest/sql-migration-guide.html#upgrading-from-spark-sql-247-to-248" aria-label="Anchor link for: upgrading from spark sql 247 to 248" data-anchorjs-icon="" style="font-family: anchorjs-icons; font-style: normal; font-variant: normal; font-weight: normal; padding-left: 0.375em;"></a></h2>

<ul>
  <li>In Spark 2.4.8, <code class="language-plaintext highlighter-rouge">AnalysisException</code> is replaced by its sub-classes that are thrown for tables from Hive external catalog in the following situations:
    <ul>
      <li><code class="language-plaintext highlighter-rouge">ALTER TABLE .. ADD PARTITION</code> throws <code class="language-plaintext highlighter-rouge">PartitionsAlreadyExistException</code> if new partition exists already</li>
      <li><code class="language-plaintext highlighter-rouge">ALTER TABLE .. DROP PARTITION</code> throws <code class="language-plaintext highlighter-rouge">NoSuchPartitionsException</code> for not existing partitions</li>
    </ul>
  </li>
</ul>

<h2 id="upgrading-from-spark-sql-245-to-246">Upgrading from Spark SQL 2.4.5 to 2.4.6<a class="anchorjs-link " href="https://spark.apache.org/docs/latest/sql-migration-guide.html#upgrading-from-spark-sql-245-to-246" aria-label="Anchor link for: upgrading from spark sql 245 to 246" data-anchorjs-icon="" style="font-family: anchorjs-icons; font-style: normal; font-variant: normal; font-weight: normal; padding-left: 0.375em;"></a></h2>

<ul>
  <li>In Spark 2.4.6, the <code class="language-plaintext highlighter-rouge">RESET</code> command does not reset the static SQL configuration values to the default. It only clears the runtime SQL configuration values.</li>
</ul>

<h2 id="upgrading-from-spark-sql-244-to-245">Upgrading from Spark SQL 2.4.4 to 2.4.5<a class="anchorjs-link " href="https://spark.apache.org/docs/latest/sql-migration-guide.html#upgrading-from-spark-sql-244-to-245" aria-label="Anchor link for: upgrading from spark sql 244 to 245" data-anchorjs-icon="" style="font-family: anchorjs-icons; font-style: normal; font-variant: normal; font-weight: normal; padding-left: 0.375em;"></a></h2>

<ul>
  <li>
    <p>Since Spark 2.4.5, <code class="language-plaintext highlighter-rouge">TRUNCATE TABLE</code> command tries to set back original permission and ACLs during re-creating the table/partition paths. To restore the behaviour of earlier versions, set <code class="language-plaintext highlighter-rouge">spark.sql.truncateTable.ignorePermissionAcl.enabled</code> to <code class="language-plaintext highlighter-rouge">true</code>.</p>
  </li>
  <li>
    <p>Since Spark 2.4.5, <code class="language-plaintext highlighter-rouge">spark.sql.legacy.mssqlserver.numericMapping.enabled</code> configuration is added in order to support the legacy MsSQLServer dialect mapping behavior using IntegerType and DoubleType for SMALLINT and REAL JDBC types, respectively. To restore the behaviour of 2.4.3 and earlier versions, set <code class="language-plaintext highlighter-rouge">spark.sql.legacy.mssqlserver.numericMapping.enabled</code> to <code class="language-plaintext highlighter-rouge">true</code>.</p>
  </li>
</ul>

<h2 id="upgrading-from-spark-sql-243-to-244">Upgrading from Spark SQL 2.4.3 to 2.4.4<a class="anchorjs-link " href="https://spark.apache.org/docs/latest/sql-migration-guide.html#upgrading-from-spark-sql-243-to-244" aria-label="Anchor link for: upgrading from spark sql 243 to 244" data-anchorjs-icon="" style="font-family: anchorjs-icons; font-style: normal; font-variant: normal; font-weight: normal; padding-left: 0.375em;"></a></h2>

<ul>
  <li>Since Spark 2.4.4, according to <a href="https://docs.microsoft.com/en-us/sql/connect/jdbc/using-basic-data-types?view=sql-server-2017">MsSqlServer Guide</a>, MsSQLServer JDBC Dialect uses ShortType and FloatType for SMALLINT and REAL, respectively. Previously, IntegerType and DoubleType is used.</li>
</ul>

<h2 id="upgrading-from-spark-sql-24-to-241">Upgrading from Spark SQL 2.4 to 2.4.1<a class="anchorjs-link " href="https://spark.apache.org/docs/latest/sql-migration-guide.html#upgrading-from-spark-sql-24-to-241" aria-label="Anchor link for: upgrading from spark sql 24 to 241" data-anchorjs-icon="" style="font-family: anchorjs-icons; font-style: normal; font-variant: normal; font-weight: normal; padding-left: 0.375em;"></a></h2>

<ul>
  <li>The value of <code class="language-plaintext highlighter-rouge">spark.executor.heartbeatInterval</code>, when specified without units like “30” rather than “30s”, was
inconsistently interpreted as both seconds and milliseconds in Spark 2.4.0 in different parts of the code.
Unitless values are now consistently interpreted as milliseconds. Applications that set values like “30”
need to specify a value with units like “30s” now, to avoid being interpreted as milliseconds; otherwise,
the extremely short interval that results will likely cause applications to fail.</li>
</ul>

<h2 id="upgrading-from-spark-sql-23-to-24">Upgrading from Spark SQL 2.3 to 2.4<a class="anchorjs-link " href="https://spark.apache.org/docs/latest/sql-migration-guide.html#upgrading-from-spark-sql-23-to-24" aria-label="Anchor link for: upgrading from spark sql 23 to 24" data-anchorjs-icon="" style="font-family: anchorjs-icons; font-style: normal; font-variant: normal; font-weight: normal; padding-left: 0.375em;"></a></h2>

<ul>
  <li>In Spark version 2.3 and earlier, the second parameter to array_contains function is implicitly promoted to the element type of first array type parameter. This type promotion can be lossy and may cause <code class="language-plaintext highlighter-rouge">array_contains</code> function to return wrong result. This problem has been addressed in 2.4 by employing a safer type promotion mechanism. This can cause some change in behavior and are illustrated in the table below.
    <table>
    <thead>
      <tr>
        <th>
          <b>Query</b>
        </th>
        <th>
          <b>Spark 2.3 or Prior</b>
        </th>
        <th>
          <b>Spark 2.4</b>
        </th>
        <th>
          <b>Remarks</b>
        </th>
      </tr>
    </thead>
    <tbody><tr>
      <td>
        <code>SELECT array_contains(array(1), 1.34D);</code>
      </td>
      <td>
        <code>true</code>
      </td>
      <td>
        <code>false</code>
      </td>
      <td>
        In Spark 2.4, left and right parameters are promoted to array type of double type and double type respectively.
      </td>
    </tr>
    <tr>
      <td>
        <code>SELECT array_contains(array(1), '1');</code>
      </td>
      <td>
        <code>true</code>
      </td>
      <td>
        <code>AnalysisException</code> is thrown.
      </td>
      <td>
        Explicit cast can be used in arguments to avoid the exception. In Spark 2.4, <code>AnalysisException</code> is thrown since integer type can not be promoted to string type in a loss-less manner.
      </td>
    </tr>
    <tr>
      <td>
        <code>SELECT array_contains(array(1), 'anystring');</code>
      </td>
      <td>
        <code>null</code>
      </td>
      <td>
        <code>AnalysisException</code> is thrown.
      </td>
      <td>
        Explicit cast can be used in arguments to avoid the exception. In Spark 2.4, <code>AnalysisException</code> is thrown since integer type can not be promoted to string type in a loss-less manner.
      </td>
    </tr>
</tbody></table>
  </li>
  <li>
    <p>Since Spark 2.4, when there is a struct field in front of the IN operator before a subquery, the inner query must contain a struct field as well. In previous versions, instead, the fields of the struct were compared to the output of the inner query. For example, if <code class="language-plaintext highlighter-rouge">a</code> is a <code class="language-plaintext highlighter-rouge">struct(a string, b int)</code>, in Spark 2.4 <code class="language-plaintext highlighter-rouge">a in (select (1 as a, 'a' as b) from range(1))</code> is a valid query, while <code class="language-plaintext highlighter-rouge">a in (select 1, 'a' from range(1))</code> is not. In previous version it was the opposite.</p>
  </li>
  <li>
    <p>In versions 2.2.1+ and 2.3, if <code class="language-plaintext highlighter-rouge">spark.sql.caseSensitive</code> is set to true, then the <code class="language-plaintext highlighter-rouge">CURRENT_DATE</code> and <code class="language-plaintext highlighter-rouge">CURRENT_TIMESTAMP</code> functions incorrectly became case-sensitive and would resolve to columns (unless typed in lower case). In Spark 2.4 this has been fixed and the functions are no longer case-sensitive.</p>
  </li>
  <li>
    <p>Since Spark 2.4, Spark will evaluate the set operations referenced in a query by following a precedence rule as per the SQL standard. If the order is not specified by parentheses, set operations are performed from left to right with the exception that all INTERSECT operations are performed before any UNION, EXCEPT or MINUS operations. The old behaviour of giving equal precedence to all the set operations are preserved under a newly added configuration <code class="language-plaintext highlighter-rouge">spark.sql.legacy.setopsPrecedence.enabled</code> with a default value of <code class="language-plaintext highlighter-rouge">false</code>. When this property is set to <code class="language-plaintext highlighter-rouge">true</code>, spark will evaluate the set operators from left to right as they appear in the query given no explicit ordering is enforced by usage of parenthesis.</p>
  </li>
  <li>
    <p>Since Spark 2.4, Spark will display table description column Last Access value as UNKNOWN when the value was Jan 01 1970.</p>
  </li>
  <li>
    <p>Since Spark 2.4, Spark maximizes the usage of a vectorized ORC reader for ORC files by default. To do that, <code class="language-plaintext highlighter-rouge">spark.sql.orc.impl</code> and <code class="language-plaintext highlighter-rouge">spark.sql.orc.filterPushdown</code> change their default values to <code class="language-plaintext highlighter-rouge">native</code> and <code class="language-plaintext highlighter-rouge">true</code> respectively. ORC files created by native ORC writer cannot be read by some old Apache Hive releases. Use <code class="language-plaintext highlighter-rouge">spark.sql.orc.impl=hive</code> to create the files shared with Hive 2.1.1 and older.</p>
  </li>
  <li>
    <p>Since Spark 2.4, writing an empty dataframe to a directory launches at least one write task, even if physically the dataframe has no partition. This introduces a small behavior change that for self-describing file formats like Parquet and Orc, Spark creates a metadata-only file in the target directory when writing a 0-partition dataframe, so that schema inference can still work if users read that directory later. The new behavior is more reasonable and more consistent regarding writing empty dataframe.</p>
  </li>
  <li>
    <p>Since Spark 2.4, expression IDs in UDF arguments do not appear in column names. For example, a column name in Spark 2.4 is not <code class="language-plaintext highlighter-rouge">UDF:f(col0 AS colA#28)</code> but <code class="language-plaintext highlighter-rouge">UDF:f(col0 AS `colA`)</code>.</p>
  </li>
  <li>
    <p>Since Spark 2.4, writing a dataframe with an empty or nested empty schema using any file formats (parquet, orc, json, text, csv etc.) is not allowed. An exception is thrown when attempting to write dataframes with empty schema.</p>
  </li>
  <li>
    <p>Since Spark 2.4, Spark compares a DATE type with a TIMESTAMP type after promotes both sides to TIMESTAMP. To set <code class="language-plaintext highlighter-rouge">false</code> to <code class="language-plaintext highlighter-rouge">spark.sql.legacy.compareDateTimestampInTimestamp</code> restores the previous behavior. This option will be removed in Spark 3.0.</p>
  </li>
  <li>
    <p>Since Spark 2.4, creating a managed table with nonempty location is not allowed. An exception is thrown when attempting to create a managed table with nonempty location. To set <code class="language-plaintext highlighter-rouge">true</code> to <code class="language-plaintext highlighter-rouge">spark.sql.legacy.allowCreatingManagedTableUsingNonemptyLocation</code> restores the previous behavior. This option will be removed in Spark 3.0.</p>
  </li>
  <li>
    <p>Since Spark 2.4, renaming a managed table to existing location is not allowed. An exception is thrown when attempting to rename a managed table to existing location.</p>
  </li>
  <li>
    <p>Since Spark 2.4, the type coercion rules can automatically promote the argument types of the variadic SQL functions (e.g., IN/COALESCE) to the widest common type, no matter how the input arguments order. In prior Spark versions, the promotion could fail in some specific orders (e.g., TimestampType, IntegerType and StringType) and throw an exception.</p>
  </li>
  <li>
    <p>Since Spark 2.4, Spark has enabled non-cascading SQL cache invalidation in addition to the traditional cache invalidation mechanism. The non-cascading cache invalidation mechanism allows users to remove a cache without impacting its dependent caches. This new cache invalidation mechanism is used in scenarios where the data of the cache to be removed is still valid, e.g., calling unpersist() on a Dataset, or dropping a temporary view. This allows users to free up memory and keep the desired caches valid at the same time.</p>
  </li>
  <li>
    <p>In version 2.3 and earlier, Spark converts Parquet Hive tables by default but ignores table properties like <code class="language-plaintext highlighter-rouge">TBLPROPERTIES (parquet.compression 'NONE')</code>. This happens for ORC Hive table properties like <code class="language-plaintext highlighter-rouge">TBLPROPERTIES (orc.compress 'NONE')</code> in case of <code class="language-plaintext highlighter-rouge">spark.sql.hive.convertMetastoreOrc=true</code>, too. Since Spark 2.4, Spark respects Parquet/ORC specific table properties while converting Parquet/ORC Hive tables. As an example, <code class="language-plaintext highlighter-rouge">CREATE TABLE t(id int) STORED AS PARQUET TBLPROPERTIES (parquet.compression 'NONE')</code> would generate Snappy parquet files during insertion in Spark 2.3, and in Spark 2.4, the result would be uncompressed parquet files.</p>
  </li>
  <li>
    <p>Since Spark 2.0, Spark converts Parquet Hive tables by default for better performance. Since Spark 2.4, Spark converts ORC Hive tables by default, too. It means Spark uses its own ORC support by default instead of Hive SerDe. As an example, <code class="language-plaintext highlighter-rouge">CREATE TABLE t(id int) STORED AS ORC</code> would be handled with Hive SerDe in Spark 2.3, and in Spark 2.4, it would be converted into Spark’s ORC data source table and ORC vectorization would be applied. To set <code class="language-plaintext highlighter-rouge">false</code> to <code class="language-plaintext highlighter-rouge">spark.sql.hive.convertMetastoreOrc</code> restores the previous behavior.</p>
  </li>
  <li>
    <p>In version 2.3 and earlier, CSV rows are considered as malformed if at least one column value in the row is malformed. CSV parser dropped such rows in the DROPMALFORMED mode or outputs an error in the FAILFAST mode. Since Spark 2.4, CSV row is considered as malformed only when it contains malformed column values requested from CSV datasource, other values can be ignored. As an example, CSV file contains the “id,name” header and one row “1234”. In Spark 2.4, selection of the id column consists of a row with one column value 1234 but in Spark 2.3 and earlier it is empty in the DROPMALFORMED mode. To restore the previous behavior, set <code class="language-plaintext highlighter-rouge">spark.sql.csv.parser.columnPruning.enabled</code> to <code class="language-plaintext highlighter-rouge">false</code>.</p>
  </li>
  <li>
    <p>Since Spark 2.4, File listing for compute statistics is done in parallel by default. This can be disabled by setting <code class="language-plaintext highlighter-rouge">spark.sql.statistics.parallelFileListingInStatsComputation.enabled</code> to <code class="language-plaintext highlighter-rouge">False</code>.</p>
  </li>
  <li>
    <p>Since Spark 2.4, Metadata files (e.g. Parquet summary files) and temporary files are not counted as data files when calculating table size during Statistics computation.</p>
  </li>
  <li>
    <p>Since Spark 2.4, empty strings are saved as quoted empty strings <code class="language-plaintext highlighter-rouge">""</code>. In version 2.3 and earlier, empty strings are equal to <code class="language-plaintext highlighter-rouge">null</code> values and do not reflect to any characters in saved CSV files. For example, the row of <code class="language-plaintext highlighter-rouge">"a", null, "", 1</code> was written as <code class="language-plaintext highlighter-rouge">a,,,1</code>. Since Spark 2.4, the same row is saved as <code class="language-plaintext highlighter-rouge">a,,"",1</code>. To restore the previous behavior, set the CSV option <code class="language-plaintext highlighter-rouge">emptyValue</code> to empty (not quoted) string.</p>
  </li>
  <li>
    <p>Since Spark 2.4, The LOAD DATA command supports wildcard <code class="language-plaintext highlighter-rouge">?</code> and <code class="language-plaintext highlighter-rouge">*</code>, which match any one character, and zero or more characters, respectively. Example: <code class="language-plaintext highlighter-rouge">LOAD DATA INPATH '/tmp/folder*/'</code> or <code class="language-plaintext highlighter-rouge">LOAD DATA INPATH '/tmp/part-?'</code>. Special Characters like <code class="language-plaintext highlighter-rouge">space</code> also now work in paths. Example: <code class="language-plaintext highlighter-rouge">LOAD DATA INPATH '/tmp/folder name/'</code>.</p>
  </li>
  <li>
    <p>In Spark version 2.3 and earlier, HAVING without GROUP BY is treated as WHERE. This means, <code class="language-plaintext highlighter-rouge">SELECT 1 FROM range(10) HAVING true</code> is executed as <code class="language-plaintext highlighter-rouge">SELECT 1 FROM range(10) WHERE true</code>  and returns 10 rows. This violates SQL standard, and has been fixed in Spark 2.4. Since Spark 2.4, HAVING without GROUP BY is treated as a global aggregate, which means <code class="language-plaintext highlighter-rouge">SELECT 1 FROM range(10) HAVING true</code> will return only one row. To restore the previous behavior, set <code class="language-plaintext highlighter-rouge">spark.sql.legacy.parser.havingWithoutGroupByAsWhere</code> to <code class="language-plaintext highlighter-rouge">true</code>.</p>
  </li>
  <li>In version 2.3 and earlier, when reading from a Parquet data source table, Spark always returns null for any column whose column names in Hive metastore schema and Parquet schema are in different letter cases, no matter whether <code class="language-plaintext highlighter-rouge">spark.sql.caseSensitive</code> is set to <code class="language-plaintext highlighter-rouge">true</code> or <code class="language-plaintext highlighter-rouge">false</code>. Since 2.4, when <code class="language-plaintext highlighter-rouge">spark.sql.caseSensitive</code> is set to <code class="language-plaintext highlighter-rouge">false</code>, Spark does case insensitive column name resolution between Hive metastore schema and Parquet schema, so even column names are in different letter cases, Spark returns corresponding column values. An exception is thrown if there is ambiguity, i.e. more than one Parquet column is matched. This change also applies to Parquet Hive tables when <code class="language-plaintext highlighter-rouge">spark.sql.hive.convertMetastoreParquet</code> is set to <code class="language-plaintext highlighter-rouge">true</code>.</li>
</ul>

<h2 id="upgrading-from-spark-sql-22-to-23">Upgrading from Spark SQL 2.2 to 2.3<a class="anchorjs-link " href="https://spark.apache.org/docs/latest/sql-migration-guide.html#upgrading-from-spark-sql-22-to-23" aria-label="Anchor link for: upgrading from spark sql 22 to 23" data-anchorjs-icon="" style="font-family: anchorjs-icons; font-style: normal; font-variant: normal; font-weight: normal; padding-left: 0.375em;"></a></h2>

<ul>
  <li>
    <p>Since Spark 2.3, the queries from raw JSON/CSV files are disallowed when the referenced columns only include the internal corrupt record column (named <code class="language-plaintext highlighter-rouge">_corrupt_record</code> by default). For example, <code class="language-plaintext highlighter-rouge">spark.read.schema(schema).json(file).filter($"_corrupt_record".isNotNull).count()</code> and <code class="language-plaintext highlighter-rouge">spark.read.schema(schema).json(file).select("_corrupt_record").show()</code>. Instead, you can cache or save the parsed results and then send the same query. For example, <code class="language-plaintext highlighter-rouge">val df = spark.read.schema(schema).json(file).cache()</code> and then <code class="language-plaintext highlighter-rouge">df.filter($"_corrupt_record".isNotNull).count()</code>.</p>
  </li>
  <li>
    <p>The <code class="language-plaintext highlighter-rouge">percentile_approx</code> function previously accepted numeric type input and output double type results. Now it supports date type, timestamp type and numeric types as input types. The result type is also changed to be the same as the input type, which is more reasonable for percentiles.</p>
  </li>
  <li>
    <p>Since Spark 2.3, the Join/Filter’s deterministic predicates that are after the first non-deterministic predicates are also pushed down/through the child operators, if possible. In prior Spark versions, these filters are not eligible for predicate pushdown.</p>
  </li>
  <li>
    <p>Partition column inference previously found incorrect common type for different inferred types, for example, previously it ended up with double type as the common type for double type and date type. Now it finds the correct common type for such conflicts. The conflict resolution follows the table below:</p>
    <table>
<thead>
  <tr>
    <th>
      <b>InputA \ InputB</b>
    </th>
    <th>
      <b>NullType</b>
    </th>
    <th>
      <b>IntegerType</b>
    </th>
    <th>
      <b>LongType</b>
    </th>
    <th>
      <b>DecimalType(38,0)*</b>
    </th>
    <th>
      <b>DoubleType</b>
    </th>
    <th>
      <b>DateType</b>
    </th>
    <th>
      <b>TimestampType</b>
    </th>
    <th>
      <b>StringType</b>
    </th>
  </tr>
</thead></table>
  </li>
</ul>
<p>&lt;/thead&gt;
      &lt;tr&gt;
        &lt;td&gt;
          <b>NullType</b>
        &lt;/td&gt;
        &lt;td&gt;NullType&lt;/td&gt;
        &lt;td&gt;IntegerType&lt;/td&gt;
        &lt;td&gt;LongType&lt;/td&gt;
        &lt;td&gt;DecimalType(38,0)&lt;/td&gt;
        &lt;td&gt;DoubleType&lt;/td&gt;
        &lt;td&gt;DateType&lt;/td&gt;
        &lt;td&gt;TimestampType&lt;/td&gt;
        &lt;td&gt;StringType&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td&gt;
          <b>IntegerType</b>
        &lt;/td&gt;
        &lt;td&gt;IntegerType&lt;/td&gt;
        &lt;td&gt;IntegerType&lt;/td&gt;
        &lt;td&gt;LongType&lt;/td&gt;
        &lt;td&gt;DecimalType(38,0)&lt;/td&gt;
        &lt;td&gt;DoubleType&lt;/td&gt;
        &lt;td&gt;StringType&lt;/td&gt;
        &lt;td&gt;StringType&lt;/td&gt;
        &lt;td&gt;StringType&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td&gt;
          <b>LongType</b>
        &lt;/td&gt;
        &lt;td&gt;LongType&lt;/td&gt;
        &lt;td&gt;LongType&lt;/td&gt;
        &lt;td&gt;LongType&lt;/td&gt;
        &lt;td&gt;DecimalType(38,0)&lt;/td&gt;
        &lt;td&gt;StringType&lt;/td&gt;
        &lt;td&gt;StringType&lt;/td&gt;
        &lt;td&gt;StringType&lt;/td&gt;
        &lt;td&gt;StringType&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td&gt;
          <b>DecimalType(38,0)*</b>
        &lt;/td&gt;
        &lt;td&gt;DecimalType(38,0)&lt;/td&gt;
        &lt;td&gt;DecimalType(38,0)&lt;/td&gt;
        &lt;td&gt;DecimalType(38,0)&lt;/td&gt;
        &lt;td&gt;DecimalType(38,0)&lt;/td&gt;
        &lt;td&gt;StringType&lt;/td&gt;
        &lt;td&gt;StringType&lt;/td&gt;
        &lt;td&gt;StringType&lt;/td&gt;
        &lt;td&gt;StringType&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td&gt;
          <b>DoubleType</b>
        &lt;/td&gt;
        &lt;td&gt;DoubleType&lt;/td&gt;
        &lt;td&gt;DoubleType&lt;/td&gt;
        &lt;td&gt;StringType&lt;/td&gt;
        &lt;td&gt;StringType&lt;/td&gt;
        &lt;td&gt;DoubleType&lt;/td&gt;
        &lt;td&gt;StringType&lt;/td&gt;
        &lt;td&gt;StringType&lt;/td&gt;
        &lt;td&gt;StringType&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td&gt;
          <b>DateType</b>
        &lt;/td&gt;
        &lt;td&gt;DateType&lt;/td&gt;
        &lt;td&gt;StringType&lt;/td&gt;
        &lt;td&gt;StringType&lt;/td&gt;
        &lt;td&gt;StringType&lt;/td&gt;
        &lt;td&gt;StringType&lt;/td&gt;
        &lt;td&gt;DateType&lt;/td&gt;
        &lt;td&gt;TimestampType&lt;/td&gt;
        &lt;td&gt;StringType&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td&gt;
          <b>TimestampType</b>
        &lt;/td&gt;
        &lt;td&gt;TimestampType&lt;/td&gt;
        &lt;td&gt;StringType&lt;/td&gt;
        &lt;td&gt;StringType&lt;/td&gt;
        &lt;td&gt;StringType&lt;/td&gt;
        &lt;td&gt;StringType&lt;/td&gt;
        &lt;td&gt;TimestampType&lt;/td&gt;
        &lt;td&gt;TimestampType&lt;/td&gt;
        &lt;td&gt;StringType&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td&gt;
          <b>StringType</b>
        &lt;/td&gt;
        &lt;td&gt;StringType&lt;/td&gt;
        &lt;td&gt;StringType&lt;/td&gt;
        &lt;td&gt;StringType&lt;/td&gt;
        &lt;td&gt;StringType&lt;/td&gt;
        &lt;td&gt;StringType&lt;/td&gt;
        &lt;td&gt;StringType&lt;/td&gt;
        &lt;td&gt;StringType&lt;/td&gt;
        &lt;td&gt;StringType&lt;/td&gt;
      &lt;/tr&gt;
    &lt;/table&gt;</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Note that, for &lt;b&gt;DecimalType(38,0)*&lt;/b&gt;, the table above intentionally does not cover all other combinations of scales and precisions because currently we only infer decimal type like `BigInteger`/`BigInt`. For example, 1.1 is inferred as double type.
</code></pre></div></div>

<ul>
  <li>
    <p>Since Spark 2.3, when either broadcast hash join or broadcast nested loop join is applicable, we prefer to broadcasting the table that is explicitly specified in a broadcast hint. For details, see the section <a href="https://spark.apache.org/docs/latest/sql-performance-tuning.html#join-strategy-hints-for-sql-queries">Join Strategy Hints for SQL Queries</a> and <a href="https://issues.apache.org/jira/browse/SPARK-22489">SPARK-22489</a>.</p>
  </li>
  <li>
    <p>Since Spark 2.3, when all inputs are binary, <code class="language-plaintext highlighter-rouge">functions.concat()</code> returns an output as binary. Otherwise, it returns as a string. Until Spark 2.3, it always returns as a string despite of input types. To keep the old behavior, set <code class="language-plaintext highlighter-rouge">spark.sql.function.concatBinaryAsString</code> to <code class="language-plaintext highlighter-rouge">true</code>.</p>
  </li>
  <li>
    <p>Since Spark 2.3, when all inputs are binary, SQL <code class="language-plaintext highlighter-rouge">elt()</code> returns an output as binary. Otherwise, it returns as a string. Until Spark 2.3, it always returns as a string despite of input types. To keep the old behavior, set <code class="language-plaintext highlighter-rouge">spark.sql.function.eltOutputAsString</code> to <code class="language-plaintext highlighter-rouge">true</code>.</p>
  </li>
  <li>
    <p>Since Spark 2.3, by default arithmetic operations between decimals return a rounded value if an exact representation is not possible (instead of returning NULL). This is compliant with SQL ANSI 2011 specification and Hive’s new behavior introduced in Hive 2.2 (HIVE-15331). This involves the following changes</p>

    <ul>
      <li>
        <p>The rules to determine the result type of an arithmetic operation have been updated. In particular, if the precision / scale needed are out of the range of available values, the scale is reduced up to 6, in order to prevent the truncation of the integer part of the decimals. All the arithmetic operations are affected by the change, i.e. addition (<code class="language-plaintext highlighter-rouge">+</code>), subtraction (<code class="language-plaintext highlighter-rouge">-</code>), multiplication (<code class="language-plaintext highlighter-rouge">*</code>), division (<code class="language-plaintext highlighter-rouge">/</code>), remainder (<code class="language-plaintext highlighter-rouge">%</code>) and positive modulus (<code class="language-plaintext highlighter-rouge">pmod</code>).</p>
      </li>
      <li>
        <p>Literal values used in SQL operations are converted to DECIMAL with the exact precision and scale needed by them.</p>
      </li>
      <li>
        <p>The configuration <code class="language-plaintext highlighter-rouge">spark.sql.decimalOperations.allowPrecisionLoss</code> has been introduced. It defaults to <code class="language-plaintext highlighter-rouge">true</code>, which means the new behavior described here; if set to <code class="language-plaintext highlighter-rouge">false</code>, Spark uses previous rules, i.e. it doesn’t adjust the needed scale to represent the values and it returns NULL if an exact representation of the value is not possible.</p>
      </li>
    </ul>
  </li>
  <li>
    <p>Un-aliased subquery’s semantic has not been well defined with confusing behaviors. Since Spark 2.3, we invalidate such confusing cases, for example: <code class="language-plaintext highlighter-rouge">SELECT v.i from (SELECT i FROM v)</code>, Spark will throw an analysis exception in this case because users should not be able to use the qualifier inside a subquery. See <a href="https://issues.apache.org/jira/browse/SPARK-20690">SPARK-20690</a> and <a href="https://issues.apache.org/jira/browse/SPARK-21335">SPARK-21335</a> for more details.</p>
  </li>
  <li>
    <p>When creating a <code class="language-plaintext highlighter-rouge">SparkSession</code> with <code class="language-plaintext highlighter-rouge">SparkSession.builder.getOrCreate()</code>, if there is an existing <code class="language-plaintext highlighter-rouge">SparkContext</code>, the builder was trying to update the <code class="language-plaintext highlighter-rouge">SparkConf</code> of the existing <code class="language-plaintext highlighter-rouge">SparkContext</code> with configurations specified to the builder, but the <code class="language-plaintext highlighter-rouge">SparkContext</code> is shared by all <code class="language-plaintext highlighter-rouge">SparkSession</code>s, so we should not update them. Since 2.3, the builder comes to not update the configurations. If you want to update them, you need to update them prior to creating a <code class="language-plaintext highlighter-rouge">SparkSession</code>.</p>
  </li>
</ul>

<h2 id="upgrading-from-spark-sql-21-to-22">Upgrading from Spark SQL 2.1 to 2.2<a class="anchorjs-link " href="https://spark.apache.org/docs/latest/sql-migration-guide.html#upgrading-from-spark-sql-21-to-22" aria-label="Anchor link for: upgrading from spark sql 21 to 22" data-anchorjs-icon="" style="font-family: anchorjs-icons; font-style: normal; font-variant: normal; font-weight: normal; padding-left: 0.375em;"></a></h2>

<ul>
  <li>
    <p>Spark 2.1.1 introduced a new configuration key: <code class="language-plaintext highlighter-rouge">spark.sql.hive.caseSensitiveInferenceMode</code>. It had a default setting of <code class="language-plaintext highlighter-rouge">NEVER_INFER</code>, which kept behavior identical to 2.1.0. However, Spark 2.2.0 changes this setting’s default value to <code class="language-plaintext highlighter-rouge">INFER_AND_SAVE</code> to restore compatibility with reading Hive metastore tables whose underlying file schema have mixed-case column names. With the <code class="language-plaintext highlighter-rouge">INFER_AND_SAVE</code> configuration value, on first access Spark will perform schema inference on any Hive metastore table for which it has not already saved an inferred schema. Note that schema inference can be a very time-consuming operation for tables with thousands of partitions. If compatibility with mixed-case column names is not a concern, you can safely set <code class="language-plaintext highlighter-rouge">spark.sql.hive.caseSensitiveInferenceMode</code> to <code class="language-plaintext highlighter-rouge">NEVER_INFER</code> to avoid the initial overhead of schema inference. Note that with the new default <code class="language-plaintext highlighter-rouge">INFER_AND_SAVE</code> setting, the results of the schema inference are saved as a metastore key for future use. Therefore, the initial schema inference occurs only at a table’s first access.</p>
  </li>
  <li>
    <p>Since Spark 2.2.1 and 2.3.0, the schema is always inferred at runtime when the data source tables have the columns that exist in both partition schema and data schema. The inferred schema does not have the partitioned columns. When reading the table, Spark respects the partition values of these overlapping columns instead of the values stored in the data source files. In 2.2.0 and 2.1.x release, the inferred schema is partitioned but the data of the table is invisible to users (i.e., the result set is empty).</p>
  </li>
  <li>
    <p>Since Spark 2.2, view definitions are stored in a different way from prior versions. This may cause Spark unable to read views created by prior versions. In such cases, you need to recreate the views using <code class="language-plaintext highlighter-rouge">ALTER VIEW AS</code> or <code class="language-plaintext highlighter-rouge">CREATE OR REPLACE VIEW AS</code> with newer Spark versions.</p>
  </li>
</ul>

<h2 id="upgrading-from-spark-sql-20-to-21">Upgrading from Spark SQL 2.0 to 2.1<a class="anchorjs-link " href="https://spark.apache.org/docs/latest/sql-migration-guide.html#upgrading-from-spark-sql-20-to-21" aria-label="Anchor link for: upgrading from spark sql 20 to 21" data-anchorjs-icon="" style="font-family: anchorjs-icons; font-style: normal; font-variant: normal; font-weight: normal; padding-left: 0.375em;"></a></h2>

<ul>
  <li>
    <p>Datasource tables now store partition metadata in the Hive metastore. This means that Hive DDLs such as <code class="language-plaintext highlighter-rouge">ALTER TABLE PARTITION ... SET LOCATION</code> are now available for tables created with the Datasource API.</p>

    <ul>
      <li>
        <p>Legacy datasource tables can be migrated to this format via the <code class="language-plaintext highlighter-rouge">MSCK REPAIR TABLE</code> command. Migrating legacy tables is recommended to take advantage of Hive DDL support and improved planning performance.</p>
      </li>
      <li>
        <p>To determine if a table has been migrated, look for the <code class="language-plaintext highlighter-rouge">PartitionProvider: Catalog</code> attribute when issuing <code class="language-plaintext highlighter-rouge">DESCRIBE FORMATTED</code> on the table.</p>
      </li>
    </ul>
  </li>
  <li>
    <p>Changes to <code class="language-plaintext highlighter-rouge">INSERT OVERWRITE TABLE ... PARTITION ...</code> behavior for Datasource tables.</p>

    <ul>
      <li>
        <p>In prior Spark versions <code class="language-plaintext highlighter-rouge">INSERT OVERWRITE</code> overwrote the entire Datasource table, even when given a partition specification. Now only partitions matching the specification are overwritten.</p>
      </li>
      <li>
        <p>Note that this still differs from the behavior of Hive tables, which is to overwrite only partitions overlapping with newly inserted data.</p>
      </li>
    </ul>
  </li>
</ul>

<h2 id="upgrading-from-spark-sql-16-to-20">Upgrading from Spark SQL 1.6 to 2.0<a class="anchorjs-link " href="https://spark.apache.org/docs/latest/sql-migration-guide.html#upgrading-from-spark-sql-16-to-20" aria-label="Anchor link for: upgrading from spark sql 16 to 20" data-anchorjs-icon="" style="font-family: anchorjs-icons; font-style: normal; font-variant: normal; font-weight: normal; padding-left: 0.375em;"></a></h2>

<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">SparkSession</code> is now the new entry point of Spark that replaces the old <code class="language-plaintext highlighter-rouge">SQLContext</code> and</p>

    <p><code class="language-plaintext highlighter-rouge">HiveContext</code>. Note that the old SQLContext and HiveContext are kept for backward compatibility. A new <code class="language-plaintext highlighter-rouge">catalog</code> interface is accessible from <code class="language-plaintext highlighter-rouge">SparkSession</code> - existing API on databases and tables access such as <code class="language-plaintext highlighter-rouge">listTables</code>, <code class="language-plaintext highlighter-rouge">createExternalTable</code>, <code class="language-plaintext highlighter-rouge">dropTempView</code>, <code class="language-plaintext highlighter-rouge">cacheTable</code> are moved here.</p>
  </li>
  <li>
    <p>Dataset API and DataFrame API are unified. In Scala, <code class="language-plaintext highlighter-rouge">DataFrame</code> becomes a type alias for
<code class="language-plaintext highlighter-rouge">Dataset[Row]</code>, while Java API users must replace <code class="language-plaintext highlighter-rouge">DataFrame</code> with <code class="language-plaintext highlighter-rouge">Dataset&lt;Row&gt;</code>. Both the typed
transformations (e.g., <code class="language-plaintext highlighter-rouge">map</code>, <code class="language-plaintext highlighter-rouge">filter</code>, and <code class="language-plaintext highlighter-rouge">groupByKey</code>) and untyped transformations (e.g.,
<code class="language-plaintext highlighter-rouge">select</code> and <code class="language-plaintext highlighter-rouge">groupBy</code>) are available on the Dataset class. Since compile-time type-safety in
Python and R is not a language feature, the concept of Dataset does not apply to these languages’
APIs. Instead, <code class="language-plaintext highlighter-rouge">DataFrame</code> remains the primary programming abstraction, which is analogous to the
single-node data frame notion in these languages.</p>
  </li>
  <li>
    <p>Dataset and DataFrame API <code class="language-plaintext highlighter-rouge">unionAll</code> has been deprecated and replaced by <code class="language-plaintext highlighter-rouge">union</code></p>
  </li>
  <li>
    <p>Dataset and DataFrame API <code class="language-plaintext highlighter-rouge">explode</code> has been deprecated, alternatively, use <code class="language-plaintext highlighter-rouge">functions.explode()</code> with <code class="language-plaintext highlighter-rouge">select</code> or <code class="language-plaintext highlighter-rouge">flatMap</code></p>
  </li>
  <li>
    <p>Dataset and DataFrame API <code class="language-plaintext highlighter-rouge">registerTempTable</code> has been deprecated and replaced by <code class="language-plaintext highlighter-rouge">createOrReplaceTempView</code></p>
  </li>
  <li>
    <p>Changes to <code class="language-plaintext highlighter-rouge">CREATE TABLE ... LOCATION</code> behavior for Hive tables.</p>

    <ul>
      <li>
        <p>From Spark 2.0, <code class="language-plaintext highlighter-rouge">CREATE TABLE ... LOCATION</code> is equivalent to <code class="language-plaintext highlighter-rouge">CREATE EXTERNAL TABLE ... LOCATION</code>
in order to prevent accidental dropping the existing data in the user-provided locations.
That means, a Hive table created in Spark SQL with the user-specified location is always a Hive external table.
Dropping external tables will not remove the data. Users are not allowed to specify the location for Hive managed tables.
Note that this is different from the Hive behavior.</p>
      </li>
      <li>
        <p>As a result, <code class="language-plaintext highlighter-rouge">DROP TABLE</code> statements on those tables will not remove the data.</p>
      </li>
    </ul>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">spark.sql.parquet.cacheMetadata</code> is no longer used.
See <a href="https://issues.apache.org/jira/browse/SPARK-13664">SPARK-13664</a> for details.</p>
  </li>
</ul>

<h2 id="upgrading-from-spark-sql-15-to-16">Upgrading from Spark SQL 1.5 to 1.6<a class="anchorjs-link " href="https://spark.apache.org/docs/latest/sql-migration-guide.html#upgrading-from-spark-sql-15-to-16" aria-label="Anchor link for: upgrading from spark sql 15 to 16" data-anchorjs-icon="" style="font-family: anchorjs-icons; font-style: normal; font-variant: normal; font-weight: normal; padding-left: 0.375em;"></a></h2>

<ul>
  <li>From Spark 1.6, by default, the Thrift server runs in multi-session mode. Which means each JDBC/ODBC
connection owns a copy of their own SQL configuration and temporary function registry. Cached
tables are still shared though. If you prefer to run the Thrift server in the old single-session
mode, please set option <code class="language-plaintext highlighter-rouge">spark.sql.hive.thriftServer.singleSession</code> to <code class="language-plaintext highlighter-rouge">true</code>. You may either add
this option to <code class="language-plaintext highlighter-rouge">spark-defaults.conf</code>, or pass it to <code class="language-plaintext highlighter-rouge">start-thriftserver.sh</code> via <code class="language-plaintext highlighter-rouge">--conf</code>:</li>
</ul>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash">   ./sbin/start-thriftserver.sh <span class="se">\</span>
     <span class="nt">--conf</span> spark.sql.hive.thriftServer.singleSession<span class="o">=</span><span class="nb">true</span> <span class="se">\</span>
     ...
   </code></pre></figure>

<ul>
  <li>From Spark 1.6, LongType casts to TimestampType expect seconds instead of microseconds. This
change was made to match the behavior of Hive 1.2 for more consistent type casting to TimestampType
from numeric types. See <a href="https://issues.apache.org/jira/browse/SPARK-11724">SPARK-11724</a> for
details.</li>
</ul>

<h2 id="upgrading-from-spark-sql-14-to-15">Upgrading from Spark SQL 1.4 to 1.5<a class="anchorjs-link " href="https://spark.apache.org/docs/latest/sql-migration-guide.html#upgrading-from-spark-sql-14-to-15" aria-label="Anchor link for: upgrading from spark sql 14 to 15" data-anchorjs-icon="" style="font-family: anchorjs-icons; font-style: normal; font-variant: normal; font-weight: normal; padding-left: 0.375em;"></a></h2>

<ul>
  <li>
    <p>Optimized execution using manually managed memory (Tungsten) is now enabled by default, along with
code generation for expression evaluation. These features can both be disabled by setting
<code class="language-plaintext highlighter-rouge">spark.sql.tungsten.enabled</code> to <code class="language-plaintext highlighter-rouge">false</code>.</p>
  </li>
  <li>
    <p>Parquet schema merging is no longer enabled by default. It can be re-enabled by setting
<code class="language-plaintext highlighter-rouge">spark.sql.parquet.mergeSchema</code> to <code class="language-plaintext highlighter-rouge">true</code>.</p>
  </li>
  <li>
    <p>In-memory columnar storage partition pruning is on by default. It can be disabled by setting
<code class="language-plaintext highlighter-rouge">spark.sql.inMemoryColumnarStorage.partitionPruning</code> to <code class="language-plaintext highlighter-rouge">false</code>.</p>
  </li>
  <li>
    <p>Unlimited precision decimal columns are no longer supported, instead Spark SQL enforces a maximum
precision of 38. When inferring schema from <code class="language-plaintext highlighter-rouge">BigDecimal</code> objects, a precision of (38, 18) is now
used. When no precision is specified in DDL then the default remains <code class="language-plaintext highlighter-rouge">Decimal(10, 0)</code>.</p>
  </li>
  <li>
    <p>Timestamps are now stored at a precision of 1us, rather than 1ns</p>
  </li>
  <li>
    <p>In the <code class="language-plaintext highlighter-rouge">sql</code> dialect, floating point numbers are now parsed as decimal. HiveQL parsing remains
unchanged.</p>
  </li>
  <li>
    <p>The canonical name of SQL/DataFrame functions are now lower case (e.g., sum vs SUM).</p>
  </li>
  <li>
    <p>JSON data source will not automatically load new files that are created by other applications
(i.e. files that are not inserted to the dataset through Spark SQL).
For a JSON persistent table (i.e. the metadata of the table is stored in Hive Metastore),
users can use <code class="language-plaintext highlighter-rouge">REFRESH TABLE</code> SQL command or <code class="language-plaintext highlighter-rouge">HiveContext</code>’s <code class="language-plaintext highlighter-rouge">refreshTable</code> method
to include those new files to the table. For a DataFrame representing a JSON dataset, users need to recreate
the DataFrame and the new DataFrame will include new files.</p>
  </li>
</ul>

<h2 id="upgrading-from-spark-sql-13-to-14">Upgrading from Spark SQL 1.3 to 1.4<a class="anchorjs-link " href="https://spark.apache.org/docs/latest/sql-migration-guide.html#upgrading-from-spark-sql-13-to-14" aria-label="Anchor link for: upgrading from spark sql 13 to 14" data-anchorjs-icon="" style="font-family: anchorjs-icons; font-style: normal; font-variant: normal; font-weight: normal; padding-left: 0.375em;"></a></h2>

<h4 class="no_toc" id="dataframe-data-readerwriter-interface">DataFrame data reader/writer interface<a class="anchorjs-link " href="https://spark.apache.org/docs/latest/sql-migration-guide.html#dataframe-data-readerwriter-interface" aria-label="Anchor link for: dataframe data readerwriter interface" data-anchorjs-icon="" style="font-family: anchorjs-icons; font-style: normal; font-variant: normal; font-weight: normal; padding-left: 0.375em;"></a></h4>

<p>Based on user feedback, we created a new, more fluid API for reading data in (<code class="language-plaintext highlighter-rouge">SQLContext.read</code>)
and writing data out (<code class="language-plaintext highlighter-rouge">DataFrame.write</code>),
and deprecated the old APIs (e.g., <code class="language-plaintext highlighter-rouge">SQLContext.parquetFile</code>, <code class="language-plaintext highlighter-rouge">SQLContext.jsonFile</code>).</p>

<p>See the API docs for <code class="language-plaintext highlighter-rouge">SQLContext.read</code> (
  <a href="https://spark.apache.org/docs/latest/api/scala/org/apache/spark/sql/SQLContext.html#read:DataFrameReader">Scala</a>,
  <a href="https://spark.apache.org/docs/latest/api/java/org/apache/spark/sql/SQLContext.html#read()">Java</a>,
  <a href="https://spark.apache.org/docs/latest/api/python/reference/pyspark.sql/api/pyspark.sql.SparkSession.read.html#pyspark.sql.SparkSession.read">Python</a>
) and <code class="language-plaintext highlighter-rouge">DataFrame.write</code> (
  <a href="https://spark.apache.org/docs/latest/api/scala/org/apache/spark/sql/DataFrame.html#write:DataFrameWriter">Scala</a>,
  <a href="https://spark.apache.org/docs/latest/api/java/org/apache/spark/sql/Dataset.html#write()">Java</a>,
  <a href="https://spark.apache.org/docs/latest/api/python/reference/pyspark.sql/api/pyspark.sql.DataFrame.write.html#pyspark.sql.DataFrame.write">Python</a>
) more information.</p>

<h4 class="no_toc" id="dataframegroupby-retains-grouping-columns">DataFrame.groupBy retains grouping columns<a class="anchorjs-link " href="https://spark.apache.org/docs/latest/sql-migration-guide.html#dataframegroupby-retains-grouping-columns" aria-label="Anchor link for: dataframegroupby retains grouping columns" data-anchorjs-icon="" style="font-family: anchorjs-icons; font-style: normal; font-variant: normal; font-weight: normal; padding-left: 0.375em;"></a></h4>

<p>Based on user feedback, we changed the default behavior of <code class="language-plaintext highlighter-rouge">DataFrame.groupBy().agg()</code> to retain the
grouping columns in the resulting <code class="language-plaintext highlighter-rouge">DataFrame</code>. To keep the behavior in 1.3, set <code class="language-plaintext highlighter-rouge">spark.sql.retainGroupColumns</code> to <code class="language-plaintext highlighter-rouge">false</code>.</p>

<ul class="nav nav-tabs mb-3" data-tabs="tabs" role="tablist"><li class="nav-item"><button class="active nav-link tab_python" data-bs-target="#tab_python_0" data-tab-lang="tab_python" data-bs-toggle="tab"><b>Python</b></button></li><li class="nav-item"><button class="nav-link tab_scala" data-bs-target="#tab_scala_0" data-tab-lang="tab_scala" data-bs-toggle="tab"><b>Scala</b></button></li><li class="nav-item"><button class="nav-link tab_java" data-bs-target="#tab_java_0" data-tab-lang="tab_java" data-bs-toggle="tab"><b>Java</b></button></li></ul><div class="codetabs tab-content">

<div data-lang="python" class="tab-pane active" role="tabpanel" id="tab_python_0">

    <figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">pyspark.sql.functions</span> <span class="k">as</span> <span class="n">func</span>

<span class="c1"># In 1.3.x, in order for the grouping column "department" to show up,
# it must be included explicitly as part of the agg function call.
</span><span class="n">df</span><span class="p">.</span><span class="n">groupBy</span><span class="p">(</span><span class="s">"department"</span><span class="p">).</span><span class="n">agg</span><span class="p">(</span><span class="n">df</span><span class="p">[</span><span class="s">"department"</span><span class="p">],</span> <span class="n">func</span><span class="p">.</span><span class="nb">max</span><span class="p">(</span><span class="s">"age"</span><span class="p">),</span> <span class="n">func</span><span class="p">.</span><span class="nb">sum</span><span class="p">(</span><span class="s">"expense"</span><span class="p">))</span>

<span class="c1"># In 1.4+, grouping column "department" is included automatically.
</span><span class="n">df</span><span class="p">.</span><span class="n">groupBy</span><span class="p">(</span><span class="s">"department"</span><span class="p">).</span><span class="n">agg</span><span class="p">(</span><span class="n">func</span><span class="p">.</span><span class="nb">max</span><span class="p">(</span><span class="s">"age"</span><span class="p">),</span> <span class="n">func</span><span class="p">.</span><span class="nb">sum</span><span class="p">(</span><span class="s">"expense"</span><span class="p">))</span>

<span class="c1"># Revert to 1.3.x behavior (not retaining grouping column) by:
</span><span class="n">sqlContext</span><span class="p">.</span><span class="n">setConf</span><span class="p">(</span><span class="s">"spark.sql.retainGroupColumns"</span><span class="p">,</span> <span class="s">"false"</span><span class="p">)</span></code></pre></figure>

  </div>

<div data-lang="scala" class="tab-pane" role="tabpanel" id="tab_scala_0">

    <figure class="highlight"><pre><code class="language-scala" data-lang="scala"><span class="c1">// In 1.3.x, in order for the grouping column "department" to show up,</span>
<span class="c1">// it must be included explicitly as part of the agg function call.</span>
<span class="nv">df</span><span class="o">.</span><span class="py">groupBy</span><span class="o">(</span><span class="s">"department"</span><span class="o">).</span><span class="py">agg</span><span class="o">(</span><span class="n">$</span><span class="s">"department"</span><span class="o">,</span> <span class="nf">max</span><span class="o">(</span><span class="s">"age"</span><span class="o">),</span> <span class="nf">sum</span><span class="o">(</span><span class="s">"expense"</span><span class="o">))</span>

<span class="c1">// In 1.4+, grouping column "department" is included automatically.</span>
<span class="nv">df</span><span class="o">.</span><span class="py">groupBy</span><span class="o">(</span><span class="s">"department"</span><span class="o">).</span><span class="py">agg</span><span class="o">(</span><span class="nf">max</span><span class="o">(</span><span class="s">"age"</span><span class="o">),</span> <span class="nf">sum</span><span class="o">(</span><span class="s">"expense"</span><span class="o">))</span>

<span class="c1">// Revert to 1.3 behavior (not retaining grouping column) by:</span>
<span class="nv">sqlContext</span><span class="o">.</span><span class="py">setConf</span><span class="o">(</span><span class="s">"spark.sql.retainGroupColumns"</span><span class="o">,</span> <span class="s">"false"</span><span class="o">)</span></code></pre></figure>

  </div>

<div data-lang="java" class="tab-pane" role="tabpanel" id="tab_java_0">

    <figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="c1">// In 1.3.x, in order for the grouping column "department" to show up,</span>
<span class="c1">// it must be included explicitly as part of the agg function call.</span>
<span class="n">df</span><span class="o">.</span><span class="na">groupBy</span><span class="o">(</span><span class="s">"department"</span><span class="o">).</span><span class="na">agg</span><span class="o">(</span><span class="n">col</span><span class="o">(</span><span class="s">"department"</span><span class="o">),</span> <span class="n">max</span><span class="o">(</span><span class="s">"age"</span><span class="o">),</span> <span class="n">sum</span><span class="o">(</span><span class="s">"expense"</span><span class="o">));</span>

<span class="c1">// In 1.4+, grouping column "department" is included automatically.</span>
<span class="n">df</span><span class="o">.</span><span class="na">groupBy</span><span class="o">(</span><span class="s">"department"</span><span class="o">).</span><span class="na">agg</span><span class="o">(</span><span class="n">max</span><span class="o">(</span><span class="s">"age"</span><span class="o">),</span> <span class="n">sum</span><span class="o">(</span><span class="s">"expense"</span><span class="o">));</span>

<span class="c1">// Revert to 1.3 behavior (not retaining grouping column) by:</span>
<span class="n">sqlContext</span><span class="o">.</span><span class="na">setConf</span><span class="o">(</span><span class="s">"spark.sql.retainGroupColumns"</span><span class="o">,</span> <span class="s">"false"</span><span class="o">);</span></code></pre></figure>

  </div>

</div>

<h4 class="no_toc" id="behavior-change-on-dataframewithcolumn">Behavior change on DataFrame.withColumn<a class="anchorjs-link " href="https://spark.apache.org/docs/latest/sql-migration-guide.html#behavior-change-on-dataframewithcolumn" aria-label="Anchor link for: behavior change on dataframewithcolumn" data-anchorjs-icon="" style="font-family: anchorjs-icons; font-style: normal; font-variant: normal; font-weight: normal; padding-left: 0.375em;"></a></h4>

<p>Prior to 1.4, DataFrame.withColumn() supports adding a column only. The column will always be added
as a new column with its specified name in the result DataFrame even if there may be any existing
columns of the same name. Since 1.4, DataFrame.withColumn() supports adding a column of a different
name from names of all existing columns or replacing existing columns of the same name.</p>

<p>Note that this change is only for Scala API, not for PySpark and SparkR.</p>

<h2 id="upgrading-from-spark-sql-10-12-to-13">Upgrading from Spark SQL 1.0-1.2 to 1.3<a class="anchorjs-link " href="https://spark.apache.org/docs/latest/sql-migration-guide.html#upgrading-from-spark-sql-10-12-to-13" aria-label="Anchor link for: upgrading from spark sql 10 12 to 13" data-anchorjs-icon="" style="font-family: anchorjs-icons; font-style: normal; font-variant: normal; font-weight: normal; padding-left: 0.375em;"></a></h2>

<p>In Spark 1.3 we removed the “Alpha” label from Spark SQL and as part of this did a cleanup of the
available APIs. From Spark 1.3 onwards, Spark SQL will provide binary compatibility with other
releases in the 1.X series. This compatibility guarantee excludes APIs that are explicitly marked
as unstable (i.e., DeveloperAPI or Experimental).</p>

<h4 class="no_toc" id="rename-of-schemardd-to-dataframe">Rename of SchemaRDD to DataFrame<a class="anchorjs-link " href="https://spark.apache.org/docs/latest/sql-migration-guide.html#rename-of-schemardd-to-dataframe" aria-label="Anchor link for: rename of schemardd to dataframe" data-anchorjs-icon="" style="font-family: anchorjs-icons; font-style: normal; font-variant: normal; font-weight: normal; padding-left: 0.375em;"></a></h4>

<p>The largest change that users will notice when upgrading to Spark SQL 1.3 is that <code class="language-plaintext highlighter-rouge">SchemaRDD</code> has
been renamed to <code class="language-plaintext highlighter-rouge">DataFrame</code>. This is primarily because DataFrames no longer inherit from RDD
directly, but instead provide most of the functionality that RDDs provide though their own
implementation. DataFrames can still be converted to RDDs by calling the <code class="language-plaintext highlighter-rouge">.rdd</code> method.</p>

<p>In Scala, there is a type alias from <code class="language-plaintext highlighter-rouge">SchemaRDD</code> to <code class="language-plaintext highlighter-rouge">DataFrame</code> to provide source compatibility for
some use cases. It is still recommended that users update their code to use <code class="language-plaintext highlighter-rouge">DataFrame</code> instead.
Java and Python users will need to update their code.</p>

<h4 class="no_toc" id="unification-of-the-java-and-scala-apis">Unification of the Java and Scala APIs<a class="anchorjs-link " href="https://spark.apache.org/docs/latest/sql-migration-guide.html#unification-of-the-java-and-scala-apis" aria-label="Anchor link for: unification of the java and scala apis" data-anchorjs-icon="" style="font-family: anchorjs-icons; font-style: normal; font-variant: normal; font-weight: normal; padding-left: 0.375em;"></a></h4>

<p>Prior to Spark 1.3 there were separate Java compatible classes (<code class="language-plaintext highlighter-rouge">JavaSQLContext</code> and <code class="language-plaintext highlighter-rouge">JavaSchemaRDD</code>)
that mirrored the Scala API. In Spark 1.3 the Java API and Scala API have been unified. Users
of either language should use <code class="language-plaintext highlighter-rouge">SQLContext</code> and <code class="language-plaintext highlighter-rouge">DataFrame</code>. In general these classes try to
use types that are usable from both languages (i.e. <code class="language-plaintext highlighter-rouge">Array</code> instead of language-specific collections).
In some cases where no common type exists (e.g., for passing in closures or Maps) function overloading
is used instead.</p>

<p>Additionally, the Java specific types API has been removed. Users of both Scala and Java should
use the classes present in <code class="language-plaintext highlighter-rouge">org.apache.spark.sql.types</code> to describe schema programmatically.</p>

<h4 class="no_toc" id="isolation-of-implicit-conversions-and-removal-of-dsl-package-scala-only">Isolation of Implicit Conversions and Removal of dsl Package (Scala-only)<a class="anchorjs-link " href="https://spark.apache.org/docs/latest/sql-migration-guide.html#isolation-of-implicit-conversions-and-removal-of-dsl-package-scala-only" aria-label="Anchor link for: isolation of implicit conversions and removal of dsl package scala only" data-anchorjs-icon="" style="font-family: anchorjs-icons; font-style: normal; font-variant: normal; font-weight: normal; padding-left: 0.375em;"></a></h4>

<p>Many of the code examples prior to Spark 1.3 started with <code class="language-plaintext highlighter-rouge">import sqlContext._</code>, which brought
all of the functions from sqlContext into scope. In Spark 1.3 we have isolated the implicit
conversions for converting <code class="language-plaintext highlighter-rouge">RDD</code>s into <code class="language-plaintext highlighter-rouge">DataFrame</code>s into an object inside of the <code class="language-plaintext highlighter-rouge">SQLContext</code>.
Users should now write <code class="language-plaintext highlighter-rouge">import sqlContext.implicits._</code>.</p>

<p>Additionally, the implicit conversions now only augment RDDs that are composed of <code class="language-plaintext highlighter-rouge">Product</code>s (i.e.,
case classes or tuples) with a method <code class="language-plaintext highlighter-rouge">toDF</code>, instead of applying automatically.</p>

<p>When using function inside of the DSL (now replaced with the <code class="language-plaintext highlighter-rouge">DataFrame</code> API) users used to import
<code class="language-plaintext highlighter-rouge">org.apache.spark.sql.catalyst.dsl</code>. Instead the public dataframe functions API should be used:
<code class="language-plaintext highlighter-rouge">import org.apache.spark.sql.functions._</code>.</p>

<h4 class="no_toc" id="removal-of-the-type-aliases-in-orgapachesparksql-for-datatype-scala-only">Removal of the type aliases in org.apache.spark.sql for DataType (Scala-only)<a class="anchorjs-link " href="https://spark.apache.org/docs/latest/sql-migration-guide.html#removal-of-the-type-aliases-in-orgapachesparksql-for-datatype-scala-only" aria-label="Anchor link for: removal of the type aliases in orgapachesparksql for datatype scala only" data-anchorjs-icon="" style="font-family: anchorjs-icons; font-style: normal; font-variant: normal; font-weight: normal; padding-left: 0.375em;"></a></h4>

<p>Spark 1.3 removes the type aliases that were present in the base sql package for <code class="language-plaintext highlighter-rouge">DataType</code>. Users
should instead import the classes in <code class="language-plaintext highlighter-rouge">org.apache.spark.sql.types</code></p>

<h4 class="no_toc" id="udf-registration-moved-to-sqlcontextudf-java--scala">UDF Registration Moved to <code class="language-plaintext highlighter-rouge">sqlContext.udf</code> (Java &amp; Scala)<a class="anchorjs-link " href="https://spark.apache.org/docs/latest/sql-migration-guide.html#udf-registration-moved-to-sqlcontextudf-java--scala" aria-label="Anchor link for: udf registration moved to sqlcontextudf java  scala" data-anchorjs-icon="" style="font-family: anchorjs-icons; font-style: normal; font-variant: normal; font-weight: normal; padding-left: 0.375em;"></a></h4>

<p>Functions that are used to register UDFs, either for use in the DataFrame DSL or SQL, have been
moved into the udf object in <code class="language-plaintext highlighter-rouge">SQLContext</code>.</p>

<ul class="nav nav-tabs mb-3" data-tabs="tabs" role="tablist"><li class="nav-item"><button class="active nav-link tab_scala" data-bs-target="#tab_scala_1" data-tab-lang="tab_scala" data-bs-toggle="tab"><b>Scala</b></button></li><li class="nav-item"><button class="nav-link tab_java" data-bs-target="#tab_java_1" data-tab-lang="tab_java" data-bs-toggle="tab"><b>Java</b></button></li></ul><div class="codetabs tab-content">
<div data-lang="scala" class="tab-pane active" role="tabpanel" id="tab_scala_1">

    <figure class="highlight"><pre><code class="language-scala" data-lang="scala"><span class="nv">sqlContext</span><span class="o">.</span><span class="py">udf</span><span class="o">.</span><span class="py">register</span><span class="o">(</span><span class="s">"strLen"</span><span class="o">,</span> <span class="o">(</span><span class="n">s</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="nv">s</span><span class="o">.</span><span class="py">length</span><span class="o">())</span></code></pre></figure>

  </div>

<div data-lang="java" class="tab-pane" role="tabpanel" id="tab_java_1">

    <figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="n">sqlContext</span><span class="o">.</span><span class="na">udf</span><span class="o">().</span><span class="na">register</span><span class="o">(</span><span class="s">"strLen"</span><span class="o">,</span> <span class="o">(</span><span class="nc">String</span> <span class="n">s</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="n">s</span><span class="o">.</span><span class="na">length</span><span class="o">(),</span> <span class="nc">DataTypes</span><span class="o">.</span><span class="na">IntegerType</span><span class="o">);</span></code></pre></figure>

  </div>

</div>

<p>Python UDF registration is unchanged.</p>

<h2 id="compatibility-with-apache-hive">Compatibility with Apache Hive<a class="anchorjs-link " href="https://spark.apache.org/docs/latest/sql-migration-guide.html#compatibility-with-apache-hive" aria-label="Anchor link for: compatibility with apache hive" data-anchorjs-icon="" style="font-family: anchorjs-icons; font-style: normal; font-variant: normal; font-weight: normal; padding-left: 0.375em;"></a></h2>

<p>Spark SQL is designed to be compatible with the Hive Metastore, SerDes and UDFs.
Currently, Hive SerDes and UDFs are based on built-in Hive,
and Spark SQL can be connected to different versions of Hive Metastore
(from 0.12.0 to 2.3.9 and 3.0.0 to 3.1.3. Also see <a href="https://spark.apache.org/docs/latest/sql-data-sources-hive-tables.html#interacting-with-different-versions-of-hive-metastore">Interacting with Different Versions of Hive Metastore</a>).</p>

<h4 class="no_toc" id="deploying-in-existing-hive-warehouses">Deploying in Existing Hive Warehouses<a class="anchorjs-link " href="https://spark.apache.org/docs/latest/sql-migration-guide.html#deploying-in-existing-hive-warehouses" aria-label="Anchor link for: deploying in existing hive warehouses" data-anchorjs-icon="" style="font-family: anchorjs-icons; font-style: normal; font-variant: normal; font-weight: normal; padding-left: 0.375em;"></a></h4>

<p>The Spark SQL Thrift JDBC server is designed to be “out of the box” compatible with existing Hive
installations. You do not need to modify your existing Hive Metastore or change the data placement
or partitioning of your tables.</p>

<h3 class="no_toc" id="supported-hive-features">Supported Hive Features<a class="anchorjs-link " href="https://spark.apache.org/docs/latest/sql-migration-guide.html#supported-hive-features" aria-label="Anchor link for: supported hive features" data-anchorjs-icon="" style="font-family: anchorjs-icons; font-style: normal; font-variant: normal; font-weight: normal; padding-left: 0.375em;"></a></h3>

<p>Spark SQL supports the vast majority of Hive features, such as:</p>

<ul>
  <li>Hive query statements, including:
    <ul>
      <li><code class="language-plaintext highlighter-rouge">SELECT</code></li>
      <li><code class="language-plaintext highlighter-rouge">GROUP BY</code></li>
      <li><code class="language-plaintext highlighter-rouge">ORDER BY</code></li>
      <li><code class="language-plaintext highlighter-rouge">DISTRIBUTE BY</code></li>
      <li><code class="language-plaintext highlighter-rouge">CLUSTER BY</code></li>
      <li><code class="language-plaintext highlighter-rouge">SORT BY</code></li>
    </ul>
  </li>
  <li>All Hive operators, including:
    <ul>
      <li>Relational operators (<code class="language-plaintext highlighter-rouge">=</code>, <code class="language-plaintext highlighter-rouge">&lt;=&gt;</code>, <code class="language-plaintext highlighter-rouge">==</code>, <code class="language-plaintext highlighter-rouge">&lt;&gt;</code>, <code class="language-plaintext highlighter-rouge">&lt;</code>, <code class="language-plaintext highlighter-rouge">&gt;</code>, <code class="language-plaintext highlighter-rouge">&gt;=</code>, <code class="language-plaintext highlighter-rouge">&lt;=</code>, etc)</li>
      <li>Arithmetic operators (<code class="language-plaintext highlighter-rouge">+</code>, <code class="language-plaintext highlighter-rouge">-</code>, <code class="language-plaintext highlighter-rouge">*</code>, <code class="language-plaintext highlighter-rouge">/</code>, <code class="language-plaintext highlighter-rouge">%</code>, etc)</li>
      <li>Logical operators (<code class="language-plaintext highlighter-rouge">AND</code>, <code class="language-plaintext highlighter-rouge">OR</code>, etc)</li>
      <li>Complex type constructors</li>
      <li>Mathematical functions (<code class="language-plaintext highlighter-rouge">sign</code>, <code class="language-plaintext highlighter-rouge">ln</code>, <code class="language-plaintext highlighter-rouge">cos</code>, etc)</li>
      <li>String functions (<code class="language-plaintext highlighter-rouge">instr</code>, <code class="language-plaintext highlighter-rouge">length</code>, <code class="language-plaintext highlighter-rouge">printf</code>, etc)</li>
    </ul>
  </li>
  <li>User defined functions (UDF)</li>
  <li>User defined aggregation functions (UDAF)</li>
  <li>User defined serialization formats (SerDes)</li>
  <li>Window functions</li>
  <li>Joins
    <ul>
      <li><code class="language-plaintext highlighter-rouge">JOIN</code></li>
      <li><code class="language-plaintext highlighter-rouge">{LEFT|RIGHT|FULL} OUTER JOIN</code></li>
      <li><code class="language-plaintext highlighter-rouge">LEFT SEMI JOIN</code></li>
      <li><code class="language-plaintext highlighter-rouge">LEFT ANTI JOIN</code></li>
      <li><code class="language-plaintext highlighter-rouge">CROSS JOIN</code></li>
    </ul>
  </li>
  <li>Unions</li>
  <li>Sub-queries
    <ul>
      <li>
        <p>Sub-queries in the FROM Clause</p>

        <p><code class="language-plaintext highlighter-rouge">SELECT col FROM (SELECT a + b AS col FROM t1) t2</code></p>
      </li>
      <li>
        <p>Sub-queries in WHERE Clause</p>
        <ul>
          <li>
            <p>Correlated or non-correlated IN and NOT IN statement in WHERE Clause</p>

            <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>SELECT col FROM t1 WHERE col IN (SELECT a FROM t2 WHERE t1.a = t2.a)
SELECT col FROM t1 WHERE col IN (SELECT a FROM t2)
</code></pre></div>            </div>
          </li>
          <li>
            <p>Correlated or non-correlated EXISTS and NOT EXISTS statement in WHERE Clause</p>

            <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>SELECT col FROM t1 WHERE EXISTS (SELECT t2.a FROM t2 WHERE t1.a = t2.a AND t2.a &gt; 10)
SELECT col FROM t1 WHERE EXISTS (SELECT t2.a FROM t2 WHERE t2.a &gt; 10)
</code></pre></div>            </div>
          </li>
          <li>
            <p>Non-correlated IN and NOT IN statement in JOIN Condition</p>

            <p><code class="language-plaintext highlighter-rouge">SELECT t1.col FROM t1 JOIN t2 ON t1.a = t2.a AND t1.a IN (SELECT a FROM t3)</code></p>
          </li>
          <li>
            <p>Non-correlated EXISTS and NOT EXISTS statement in JOIN Condition</p>

            <p><code class="language-plaintext highlighter-rouge">SELECT t1.col FROM t1 JOIN t2 ON t1.a = t2.a AND EXISTS (SELECT * FROM t3 WHERE t3.a &gt; 10)</code></p>
          </li>
        </ul>
      </li>
    </ul>
  </li>
  <li>Sampling</li>
  <li>Explain</li>
  <li>Partitioned tables including dynamic partition insertion</li>
  <li>View
    <ul>
      <li>
        <p>If column aliases are not specified in view definition queries, both Spark and Hive will
generate alias names, but in different ways. In order for Spark to be able to read views created
by Hive, users should explicitly specify column aliases in view definition queries. As an
example, Spark cannot read <code class="language-plaintext highlighter-rouge">v1</code> created as below by Hive.</p>

        <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>CREATE VIEW v1 AS SELECT * FROM (SELECT c + 1 FROM (SELECT 1 c) t1) t2;
</code></pre></div>        </div>

        <p>Instead, you should create <code class="language-plaintext highlighter-rouge">v1</code> as below with column aliases explicitly specified.</p>

        <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>CREATE VIEW v1 AS SELECT * FROM (SELECT c + 1 AS inc_c FROM (SELECT 1 c) t1) t2;
</code></pre></div>        </div>
      </li>
    </ul>
  </li>
  <li>All Hive DDL Functions, including:
    <ul>
      <li><code class="language-plaintext highlighter-rouge">CREATE TABLE</code></li>
      <li><code class="language-plaintext highlighter-rouge">CREATE TABLE AS SELECT</code></li>
      <li><code class="language-plaintext highlighter-rouge">CREATE TABLE LIKE</code></li>
      <li><code class="language-plaintext highlighter-rouge">ALTER TABLE</code></li>
    </ul>
  </li>
  <li>Most Hive Data types, including:
    <ul>
      <li><code class="language-plaintext highlighter-rouge">TINYINT</code></li>
      <li><code class="language-plaintext highlighter-rouge">SMALLINT</code></li>
      <li><code class="language-plaintext highlighter-rouge">INT</code></li>
      <li><code class="language-plaintext highlighter-rouge">BIGINT</code></li>
      <li><code class="language-plaintext highlighter-rouge">BOOLEAN</code></li>
      <li><code class="language-plaintext highlighter-rouge">FLOAT</code></li>
      <li><code class="language-plaintext highlighter-rouge">DOUBLE</code></li>
      <li><code class="language-plaintext highlighter-rouge">STRING</code></li>
      <li><code class="language-plaintext highlighter-rouge">BINARY</code></li>
      <li><code class="language-plaintext highlighter-rouge">TIMESTAMP</code></li>
      <li><code class="language-plaintext highlighter-rouge">DATE</code></li>
      <li><code class="language-plaintext highlighter-rouge">ARRAY&lt;&gt;</code></li>
      <li><code class="language-plaintext highlighter-rouge">MAP&lt;&gt;</code></li>
      <li><code class="language-plaintext highlighter-rouge">STRUCT&lt;&gt;</code></li>
    </ul>
  </li>
</ul>

<h3 class="no_toc" id="unsupported-hive-functionality">Unsupported Hive Functionality<a class="anchorjs-link " href="https://spark.apache.org/docs/latest/sql-migration-guide.html#unsupported-hive-functionality" aria-label="Anchor link for: unsupported hive functionality" data-anchorjs-icon="" style="font-family: anchorjs-icons; font-style: normal; font-variant: normal; font-weight: normal; padding-left: 0.375em;"></a></h3>

<p>Below is a list of Hive features that we don’t support yet. Most of these features are rarely used
in Hive deployments.</p>

<p><strong>Esoteric Hive Features</strong></p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">UNION</code> type</li>
  <li>Unique join</li>
  <li>Column statistics collecting: Spark SQL does not piggyback scans to collect column statistics at
the moment and only supports populating the sizeInBytes field of the hive metastore.</li>
</ul>

<p><strong>Hive Input/Output Formats</strong></p>

<ul>
  <li>File format for CLI: For results showing back to the CLI, Spark SQL only supports TextOutputFormat.</li>
  <li>Hadoop archive</li>
</ul>

<p><strong>Hive Optimizations</strong></p>

<p>A handful of Hive optimizations are not yet included in Spark. Some of these (such as indexes) are
less important due to Spark SQL’s in-memory computational model. Others are slotted for future
releases of Spark SQL.</p>

<ul>
  <li>Block-level bitmap indexes and virtual columns (used to build indexes)</li>
  <li>Automatically determine the number of reducers for joins and groupbys: Currently, in Spark SQL, you
need to control the degree of parallelism post-shuffle using “<code class="language-plaintext highlighter-rouge">SET spark.sql.shuffle.partitions=[num_tasks];</code>”.</li>
  <li>Meta-data only query: For queries that can be answered by using only metadata, Spark SQL still
launches tasks to compute the result.</li>
  <li>Skew data flag: Spark SQL does not follow the skew data flags in Hive.</li>
  <li><code class="language-plaintext highlighter-rouge">STREAMTABLE</code> hint in join: Spark SQL does not follow the <code class="language-plaintext highlighter-rouge">STREAMTABLE</code> hint.</li>
  <li>Merge multiple small files for query results: if the result output contains multiple small files,
Hive can optionally merge the small files into fewer large files to avoid overflowing the HDFS
metadata. Spark SQL does not support that.</li>
</ul>

<p><strong>Hive UDF/UDTF/UDAF</strong></p>

<p>Not all the APIs of the Hive UDF/UDTF/UDAF are supported by Spark SQL. Below are the unsupported APIs:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">getRequiredJars</code> and <code class="language-plaintext highlighter-rouge">getRequiredFiles</code> (<code class="language-plaintext highlighter-rouge">UDF</code> and <code class="language-plaintext highlighter-rouge">GenericUDF</code>) are functions to automatically
include additional resources required by this UDF.</li>
  <li><code class="language-plaintext highlighter-rouge">initialize(StructObjectInspector)</code> in <code class="language-plaintext highlighter-rouge">GenericUDTF</code> is not supported yet. Spark SQL currently uses
a deprecated interface <code class="language-plaintext highlighter-rouge">initialize(ObjectInspector[])</code> only.</li>
  <li><code class="language-plaintext highlighter-rouge">configure</code> (<code class="language-plaintext highlighter-rouge">GenericUDF</code>, <code class="language-plaintext highlighter-rouge">GenericUDTF</code>, and <code class="language-plaintext highlighter-rouge">GenericUDAFEvaluator</code>) is a function to initialize
functions with <code class="language-plaintext highlighter-rouge">MapredContext</code>, which is inapplicable to Spark.</li>
  <li><code class="language-plaintext highlighter-rouge">close</code> (<code class="language-plaintext highlighter-rouge">GenericUDF</code> and <code class="language-plaintext highlighter-rouge">GenericUDAFEvaluator</code>) is a function to release associated resources.
Spark SQL does not call this function when tasks finish.</li>
  <li><code class="language-plaintext highlighter-rouge">reset</code> (<code class="language-plaintext highlighter-rouge">GenericUDAFEvaluator</code>) is a function to re-initialize aggregation for reusing the same aggregation.
Spark SQL currently does not support the reuse of aggregation.</li>
  <li><code class="language-plaintext highlighter-rouge">getWindowingEvaluator</code> (<code class="language-plaintext highlighter-rouge">GenericUDAFEvaluator</code>) is a function to optimize aggregation by evaluating
an aggregate over a fixed window.</li>
</ul>

<h3 class="no_toc" id="incompatible-hive-udf">Incompatible Hive UDF<a class="anchorjs-link " href="https://spark.apache.org/docs/latest/sql-migration-guide.html#incompatible-hive-udf" aria-label="Anchor link for: incompatible hive udf" data-anchorjs-icon="" style="font-family: anchorjs-icons; font-style: normal; font-variant: normal; font-weight: normal; padding-left: 0.375em;"></a></h3>

<p>Below are the scenarios in which Hive and Spark generate different results:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">SQRT(n)</code> If n &lt; 0, Hive returns null, Spark SQL returns NaN.</li>
  <li><code class="language-plaintext highlighter-rouge">ACOS(n)</code> If n &lt; -1 or n &gt; 1, Hive returns null, Spark SQL returns NaN.</li>
  <li><code class="language-plaintext highlighter-rouge">ASIN(n)</code> If n &lt; -1 or n &gt; 1, Hive returns null, Spark SQL returns NaN.</li>
  <li><code class="language-plaintext highlighter-rouge">CAST(n AS TIMESTAMP)</code> If n is integral numbers, Hive treats n as milliseconds, Spark SQL treats n as seconds.</li>
</ul>


                </div>
            
             <!-- /container -->
        </div>

        
        

        
        

        
        

        <!-- MathJax Section -->
        
        
    

<div style="position: absolute; width: 0px; height: 0px; overflow: hidden; padding: 0px; border: 0px; margin: 0px;"><div id="MathJax_Font_Test" style="position: absolute; visibility: hidden; top: 0px; left: 0px; width: auto; padding: 0px; border: 0px; margin: 0px; white-space: nowrap; text-align: left; text-indent: 0px; text-transform: none; line-height: normal; letter-spacing: normal; word-spacing: normal; font-size: 40px; font-weight: normal; font-style: normal; font-family: MathJax_Math-italic, sans-serif;"></div></div></body></html>
------MultipartBoundary--42RUKswPkJoFcXtXRQMfSJHaGrWLU1MbiIJyTI5ZSP----
Content-Type: text/css
Content-Transfer-Encoding: binary
Content-Location: cid:css-8ac2b12f-ee9b-4d4a-98d1-b03cd6214bff@mhtml.blink

@charset "utf-8";

.anchorjs-link { opacity: 0; text-decoration: none; -webkit-font-smoothing: antialiased; }

:hover > .anchorjs-link, .anchorjs-link:focus { opacity: 1; }

[data-anchorjs-icon]::after { content: attr(data-anchorjs-icon); }

@font-face { font-family: anchorjs-icons; font-style: normal; font-weight: normal; src: url("data:application/x-font-ttf;charset=utf-8;base64,AAEAAAALAIAAAwAwT1MvMg8SBTUAAAC8AAAAYGNtYXAWi9QdAAABHAAAAFRnYXNwAAAAEAAAAXAAAAAIZ2x5Zgq29TcAAAF4AAABNGhlYWQEZM3pAAACrAAAADZoaGVhBhUDxgAAAuQAAAAkaG10eASAADEAAAMIAAAAFGxvY2EAKACuAAADHAAAAAxtYXhwAAgAVwAAAygAAAAgbmFtZQ5yJ3cAAANIAAAB2nBvc3QAAwAAAAAFJAAAACAAAwJAAZAABQAAApkCzAAAAI8CmQLMAAAB6wAzAQkAAAAAAAAAAAAAAAAAAAABEAAAAAAAAAAAAAAAAAAAAABAAADpywPA/8AAQAPAAEAAAAABAAAAAAAAAAAAAAAgAAAAAAADAAAAAwAAABwAAQADAAAAHAADAAEAAAAcAAQAOAAAAAoACAACAAIAAQAg6cv//f//AAAAAAAg6cv//f//AAH/4xY5AAMAAQAAAAAAAAAAAAAAAQAB//8ADwABAAAAAAAAAAAAAgAANzkBAAAAAAEAAAAAAAAAAAACAAA3OQEAAAAAAQAAAAAAAAAAAAIAADc5AQAAAAACADEARAJTAsAAKwBUAAABIiYnJjQ/AT4BMzIWFxYUDwEGIicmND8BNjQnLgEjIgYPAQYUFxYUBw4BIwciJicmND8BNjIXFhQPAQYUFx4BMzI2PwE2NCcmNDc2MhcWFA8BDgEjARQGDAUtLXoWOR8fORYtLTgKGwoKCjgaGg0gEhIgDXoaGgkJBQwHdR85Fi0tOAobCgoKOBoaDSASEiANehoaCQkKGwotLXoWOR8BMwUFLYEuehYXFxYugC44CQkKGwo4GkoaDQ0NDXoaShoKGwoFBe8XFi6ALjgJCQobCjgaShoNDQ0NehpKGgobCgoKLYEuehYXAAEAAAABAACiToc1Xw889QALBAAAAAAA0XnFFgAAAADRecUWAAAAAAJTAsAAAAAIAAIAAAAAAAAAAQAAA8D/wAAABAAAAAAAAlMAAQAAAAAAAAAAAAAAAAAAAAUAAAAAAAAAAAAAAAACAAAAAoAAMQAAAAAACgAUAB4AmgABAAAABQBVAAIAAAAAAAIAAAAAAAAAAAAAAAAAAAAAAAAADgCuAAEAAAAAAAEADgAAAAEAAAAAAAIABwCfAAEAAAAAAAMADgBLAAEAAAAAAAQADgC0AAEAAAAAAAUACwAqAAEAAAAAAAYADgB1AAEAAAAAAAoAGgDeAAMAAQQJAAEAHAAOAAMAAQQJAAIADgCmAAMAAQQJAAMAHABZAAMAAQQJAAQAHADCAAMAAQQJAAUAFgA1AAMAAQQJAAYAHACDAAMAAQQJAAoANAD4YW5jaG9yanMtaWNvbnMAYQBuAGMAaABvAHIAagBzAC0AaQBjAG8AbgBzVmVyc2lvbiAxLjAAVgBlAHIAcwBpAG8AbgAgADEALgAwYW5jaG9yanMtaWNvbnMAYQBuAGMAaABvAHIAagBzAC0AaQBjAG8AbgBzYW5jaG9yanMtaWNvbnMAYQBuAGMAaABvAHIAagBzAC0AaQBjAG8AbgBzUmVndWxhcgBSAGUAZwB1AGwAYQByYW5jaG9yanMtaWNvbnMAYQBuAGMAaABvAHIAagBzAC0AaQBjAG8AbgBzRm9udCBnZW5lcmF0ZWQgYnkgSWNvTW9vbi4ARgBvAG4AdAAgAGcAZQBuAGUAcgBhAHQAZQBkACAAYgB5ACAASQBjAG8ATQBvAG8AbgAuAAAAAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==") format("truetype"); }
------MultipartBoundary--42RUKswPkJoFcXtXRQMfSJHaGrWLU1MbiIJyTI5ZSP----
Content-Type: text/css
Content-Transfer-Encoding: binary
Content-Location: cid:css-1405535a-4365-4858-96f9-cfeff7402c2d@mhtml.blink

@charset "utf-8";

.MathJax_Hover_Frame { border-radius: 0.25em; box-shadow: rgb(136, 51, 170) 0px 0px 15px; display: inline-block; position: absolute; border: 1px solid rgb(170, 102, 221) !important; }

.MathJax_Menu_Button .MathJax_Hover_Arrow { position: absolute; cursor: pointer; display: inline-block; border: 2px solid rgb(170, 170, 170); border-radius: 4px; font-family: "Courier New", Courier; font-size: 9px; color: rgb(240, 240, 240); }

.MathJax_Menu_Button .MathJax_Hover_Arrow span { display: block; background-color: rgb(170, 170, 170); border: 1px solid; border-radius: 3px; line-height: 0; padding: 4px; }

.MathJax_Hover_Arrow:hover { color: white !important; border: 2px solid rgb(204, 204, 204) !important; }

.MathJax_Hover_Arrow:hover span { background-color: rgb(204, 204, 204) !important; }
------MultipartBoundary--42RUKswPkJoFcXtXRQMfSJHaGrWLU1MbiIJyTI5ZSP----
Content-Type: text/css
Content-Transfer-Encoding: binary
Content-Location: cid:css-39760314-160b-4241-b128-9bf60fa2f874@mhtml.blink

@charset "utf-8";

#MathJax_About { position: fixed; left: 50%; width: auto; text-align: center; border: 3px outset; padding: 1em 2em; background-color: rgb(221, 221, 221); color: black; cursor: default; font-family: message-box; font-size: 120%; font-style: normal; text-indent: 0px; text-transform: none; line-height: normal; letter-spacing: normal; word-spacing: normal; overflow-wrap: normal; white-space: nowrap; float: none; z-index: 201; border-radius: 15px; box-shadow: rgb(128, 128, 128) 0px 10px 20px; }

#MathJax_About.MathJax_MousePost { outline: none; }

.MathJax_Menu { position: absolute; background-color: white; color: black; width: auto; padding: 5px 0px; border: 1px solid rgb(204, 204, 204); margin: 0px; cursor: default; font-style: ; font-variant: normal; font-weight: ; font-stretch: ; font-size: ; font-family: ; font-optical-sizing: ; font-kerning: ; font-feature-settings: ; font-variation-settings: ; text-align: left; text-indent: 0px; text-transform: none; line-height: normal; letter-spacing: normal; word-spacing: normal; overflow-wrap: normal; white-space: nowrap; float: none; z-index: 201; border-radius: 5px; box-shadow: rgb(128, 128, 128) 0px 10px 20px; }

.MathJax_MenuItem { padding: 1px 2em; background: transparent; }

.MathJax_MenuArrow { position: absolute; right: 0.5em; padding-top: 0.25em; color: rgb(102, 102, 102); font-size: 0.75em; }

.MathJax_MenuActive .MathJax_MenuArrow { color: white; }

.MathJax_MenuArrow.RTL { left: 0.5em; right: auto; }

.MathJax_MenuCheck { position: absolute; left: 0.7em; }

.MathJax_MenuCheck.RTL { right: 0.7em; left: auto; }

.MathJax_MenuRadioCheck { position: absolute; left: 0.7em; }

.MathJax_MenuRadioCheck.RTL { right: 0.7em; left: auto; }

.MathJax_MenuLabel { padding: 1px 2em 3px 1.33em; font-style: italic; }

.MathJax_MenuRule { border-top: 1px solid rgb(221, 221, 221); margin: 4px 3px; }

.MathJax_MenuDisabled { color: graytext; }

.MathJax_MenuActive { background-color: rgb(96, 104, 114); color: white; }

.MathJax_MenuDisabled:focus, .MathJax_MenuLabel:focus { background-color: rgb(232, 232, 232); }

.MathJax_ContextMenu:focus { outline: none; }

.MathJax_ContextMenu .MathJax_MenuItem:focus { outline: none; }

#MathJax_AboutClose { top: 0.2em; right: 0.2em; }

.MathJax_Menu .MathJax_MenuClose { top: -10px; left: -10px; }

.MathJax_MenuClose { position: absolute; cursor: pointer; display: inline-block; border: 2px solid rgb(170, 170, 170); border-radius: 18px; font-family: "Courier New", Courier; font-size: 24px; color: rgb(240, 240, 240); }

.MathJax_MenuClose span { display: block; background-color: rgb(170, 170, 170); border: 1.5px solid; border-radius: 18px; line-height: 0; padding: 8px 0px 6px; }

.MathJax_MenuClose:hover { color: white !important; border: 2px solid rgb(204, 204, 204) !important; }

.MathJax_MenuClose:hover span { background-color: rgb(204, 204, 204) !important; }

.MathJax_MenuClose:hover:focus { outline: none; }
------MultipartBoundary--42RUKswPkJoFcXtXRQMfSJHaGrWLU1MbiIJyTI5ZSP----
Content-Type: text/css
Content-Transfer-Encoding: binary
Content-Location: cid:css-1ff15619-c112-4fd7-99ca-295a8cefa60c@mhtml.blink

@charset "utf-8";

.MathJax_Preview .MJXf-math { color: inherit !important; }
------MultipartBoundary--42RUKswPkJoFcXtXRQMfSJHaGrWLU1MbiIJyTI5ZSP----
Content-Type: text/css
Content-Transfer-Encoding: binary
Content-Location: cid:css-64252762-5783-4b36-996b-d611124c6323@mhtml.blink

@charset "utf-8";

.MJX_Assistive_MathML { top: 0px; left: 0px; clip: rect(1px, 1px, 1px, 1px); user-select: none; position: absolute !important; padding: 1px 0px 0px !important; border: 0px !important; height: 1px !important; width: 1px !important; overflow: hidden !important; display: block !important; }

.MJX_Assistive_MathML.MJX_Assistive_MathML_Block { width: 100% !important; }
------MultipartBoundary--42RUKswPkJoFcXtXRQMfSJHaGrWLU1MbiIJyTI5ZSP----
Content-Type: text/css
Content-Transfer-Encoding: binary
Content-Location: cid:css-89346c23-c63b-4387-add5-8c2ec5745ba3@mhtml.blink

@charset "utf-8";

#MathJax_Zoom { position: absolute; background-color: rgb(240, 240, 240); overflow: auto; display: block; z-index: 301; padding: 0.5em; border: 1px solid black; margin: 0px; font-weight: normal; font-style: normal; text-align: left; text-indent: 0px; text-transform: none; line-height: normal; letter-spacing: normal; word-spacing: normal; overflow-wrap: normal; white-space: nowrap; float: none; box-sizing: content-box; box-shadow: rgb(170, 170, 170) 5px 5px 15px; }

#MathJax_ZoomOverlay { position: absolute; left: 0px; top: 0px; z-index: 300; display: inline-block; width: 100%; height: 100%; border: 0px; padding: 0px; margin: 0px; background-color: white; opacity: 0; }

#MathJax_ZoomFrame { position: relative; display: inline-block; height: 0px; width: 0px; }

#MathJax_ZoomEventTrap { position: absolute; left: 0px; top: 0px; z-index: 302; display: inline-block; border: 0px; padding: 0px; margin: 0px; background-color: white; opacity: 0; }
------MultipartBoundary--42RUKswPkJoFcXtXRQMfSJHaGrWLU1MbiIJyTI5ZSP----
Content-Type: text/css
Content-Transfer-Encoding: binary
Content-Location: cid:css-faf1bc5f-d7ee-4ae4-9a83-159e79e009f9@mhtml.blink

@charset "utf-8";

.MathJax_Preview { color: rgb(136, 136, 136); }

#MathJax_Message { position: fixed; left: 1px; bottom: 2px; background-color: rgb(230, 230, 230); border: 1px solid rgb(149, 149, 149); margin: 0px; padding: 2px 8px; z-index: 102; color: black; font-size: 80%; width: auto; white-space: nowrap; }

#MathJax_MSIE_Frame { position: absolute; top: 0px; left: 0px; width: 0px; z-index: 101; border: 0px; margin: 0px; padding: 0px; }

.MathJax_Error { color: rgb(204, 0, 0); font-style: italic; }
------MultipartBoundary--42RUKswPkJoFcXtXRQMfSJHaGrWLU1MbiIJyTI5ZSP----
Content-Type: text/css
Content-Transfer-Encoding: binary
Content-Location: cid:css-61664d54-139a-4a48-8425-c133ec0ad765@mhtml.blink

@charset "utf-8";

.MJXp-script { font-size: 0.8em; }

.MJXp-right { transform-origin: right center; }

.MJXp-bold { font-weight: bold; }

.MJXp-italic { font-style: italic; }

.MJXp-scr { font-family: MathJax_Script, "Times New Roman", Times, STIXGeneral, serif; }

.MJXp-frak { font-family: MathJax_Fraktur, "Times New Roman", Times, STIXGeneral, serif; }

.MJXp-sf { font-family: MathJax_SansSerif, "Times New Roman", Times, STIXGeneral, serif; }

.MJXp-cal { font-family: MathJax_Caligraphic, "Times New Roman", Times, STIXGeneral, serif; }

.MJXp-mono { font-family: MathJax_Typewriter, "Times New Roman", Times, STIXGeneral, serif; }

.MJXp-largeop { font-size: 150%; }

.MJXp-largeop.MJXp-int { vertical-align: -0.2em; }

.MJXp-math { display: inline-block; line-height: 1.2; text-indent: 0px; font-family: "Times New Roman", Times, STIXGeneral, serif; white-space: nowrap; border-collapse: collapse; }

.MJXp-display { display: block; text-align: center; margin: 1em 0px; }

.MJXp-math span { display: inline-block; }

.MJXp-box { display: block !important; text-align: center; }

.MJXp-box::after { content: " "; }

.MJXp-rule { display: block !important; margin-top: 0.1em; }

.MJXp-char { display: block !important; }

.MJXp-mo { margin: 0px 0.15em; }

.MJXp-mfrac { margin: 0px 0.125em; vertical-align: 0.25em; }

.MJXp-denom { display: inline-table !important; width: 100%; }

.MJXp-denom > * { display: table-row !important; }

.MJXp-surd { vertical-align: top; }

.MJXp-surd > * { display: block !important; }

.MJXp-script-box > * { display: table !important; height: 50%; }

.MJXp-script-box > * > * { display: table-cell !important; vertical-align: top; }

.MJXp-script-box > :last-child > * { vertical-align: bottom; }

.MJXp-script-box > * > * > * { display: block !important; }

.MJXp-mphantom { visibility: hidden; }

.MJXp-munderover { display: inline-table !important; }

.MJXp-over { display: inline-block !important; text-align: center; }

.MJXp-over > * { display: block !important; }

.MJXp-munderover > * { display: table-row !important; }

.MJXp-mtable { vertical-align: 0.25em; margin: 0px 0.125em; }

.MJXp-mtable > * { display: inline-table !important; vertical-align: middle; }

.MJXp-mtr { display: table-row !important; }

.MJXp-mtd { text-align: center; padding: 0.5em 0px 0px 0.5em; display: table-cell !important; }

.MJXp-mtr > .MJXp-mtd:first-child { padding-left: 0px; }

.MJXp-mtr:first-child > .MJXp-mtd { padding-top: 0px; }

.MJXp-mlabeledtr { display: table-row !important; }

.MJXp-mlabeledtr > .MJXp-mtd:first-child { padding-left: 0px; }

.MJXp-mlabeledtr:first-child > .MJXp-mtd { padding-top: 0px; }

.MJXp-merror { background-color: rgb(255, 255, 136); color: rgb(204, 0, 0); border: 1px solid rgb(204, 0, 0); padding: 1px 3px; font-style: normal; font-size: 90%; }

.MJXp-scale0 { transform: scaleX(0); }

.MJXp-scale1 { transform: scaleX(0.1); }

.MJXp-scale2 { transform: scaleX(0.2); }

.MJXp-scale3 { transform: scaleX(0.3); }

.MJXp-scale4 { transform: scaleX(0.4); }

.MJXp-scale5 { transform: scaleX(0.5); }

.MJXp-scale6 { transform: scaleX(0.6); }

.MJXp-scale7 { transform: scaleX(0.7); }

.MJXp-scale8 { transform: scaleX(0.8); }

.MJXp-scale9 { transform: scaleX(0.9); }

.MathJax_PHTML .noError { font-size: 90%; text-align: left; color: black; padding: 1px 3px; border: 1px solid; }
------MultipartBoundary--42RUKswPkJoFcXtXRQMfSJHaGrWLU1MbiIJyTI5ZSP----
Content-Type: text/css
Content-Transfer-Encoding: binary
Content-Location: cid:css-4183a3db-38b8-465e-8309-f3d2a86f2919@mhtml.blink

@charset "utf-8";

.MathJax_Display { text-align: center; margin: 1em 0em; position: relative; text-indent: 0px; max-width: none; max-height: none; min-width: 0px; min-height: 0px; width: 100%; display: block !important; }

.MathJax .merror { background-color: rgb(255, 255, 136); color: rgb(204, 0, 0); border: 1px solid rgb(204, 0, 0); padding: 1px 3px; font-style: normal; font-size: 90%; }

.MathJax .MJX-monospace { font-family: monospace; }

.MathJax .MJX-sans-serif { font-family: sans-serif; }

#MathJax_Tooltip { background-color: infobackground; color: infotext; border: 1px solid black; box-shadow: rgb(170, 170, 170) 2px 2px 5px; padding: 3px 4px; z-index: 401; position: absolute; left: 0px; top: 0px; width: auto; height: auto; display: none; }

.MathJax { display: inline; font-style: normal; font-weight: normal; line-height: normal; font-size: 100%; text-indent: 0px; text-align: left; text-transform: none; letter-spacing: normal; word-spacing: normal; overflow-wrap: normal; white-space: nowrap; float: none; direction: ltr; max-width: none; max-height: none; min-width: 0px; min-height: 0px; border: 0px; padding: 0px; margin: 0px; }

.MathJax:focus, body :focus .MathJax { display: inline-table; }

.MathJax.MathJax_FullWidth { text-align: center; display: table-cell !important; width: 10000em !important; }

.MathJax img, .MathJax nobr, .MathJax a { border: 0px; padding: 0px; margin: 0px; max-width: 5000em; max-height: 5000em; min-width: 0px; min-height: 0px; vertical-align: 0px; line-height: normal; text-decoration: none; }

img.MathJax_strut { border: 0px !important; padding: 0px !important; margin: 0px !important; vertical-align: 0px !important; }

.MathJax span { display: inline; position: static; border: 0px; padding: 0px; margin: 0px; vertical-align: 0px; line-height: normal; text-decoration: none; }

.MathJax nobr { white-space: nowrap !important; }

.MathJax img { display: inline !important; float: none !important; }

.MathJax * { transition: none 0s ease 0s; }

.MathJax_Processing { visibility: hidden; position: fixed; width: 0px; height: 0px; overflow: hidden; }

.MathJax_Processed { display: none !important; }

.MathJax_ExBox { overflow: hidden; width: 1px; height: 60ex; min-height: 0px; max-height: none; display: block !important; }

.MathJax .MathJax_EmBox { overflow: hidden; width: 1px; height: 60em; min-height: 0px; max-height: none; display: block !important; }

.MathJax_LineBox { display: table !important; }

.MathJax_LineBox span { min-width: 0px; max-width: none; padding: 0px; border: 0px; margin: 0px; display: table-cell !important; width: 10000em !important; }

.MathJax .MathJax_HitBox { cursor: text; background: white; opacity: 0; }

.MathJax .MathJax_HitBox * { filter: none; opacity: 1; background: transparent; }

#MathJax_Tooltip * { filter: none; opacity: 1; background: transparent; }

@font-face { font-family: MathJax_Main; src: url("https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/fonts/HTML-CSS/TeX/woff/MathJax_Main-Regular.woff?V=2.7.1") format("woff"), url("https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/fonts/HTML-CSS/TeX/otf/MathJax_Main-Regular.otf?V=2.7.1") format("opentype"); }

@font-face { font-family: MathJax_Main-bold; src: url("https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/fonts/HTML-CSS/TeX/woff/MathJax_Main-Bold.woff?V=2.7.1") format("woff"), url("https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/fonts/HTML-CSS/TeX/otf/MathJax_Main-Bold.otf?V=2.7.1") format("opentype"); }

@font-face { font-family: MathJax_Main-italic; src: url("https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/fonts/HTML-CSS/TeX/woff/MathJax_Main-Italic.woff?V=2.7.1") format("woff"), url("https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/fonts/HTML-CSS/TeX/otf/MathJax_Main-Italic.otf?V=2.7.1") format("opentype"); }

@font-face { font-family: MathJax_Math-italic; src: url("https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/fonts/HTML-CSS/TeX/woff/MathJax_Math-Italic.woff?V=2.7.1") format("woff"), url("https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/fonts/HTML-CSS/TeX/otf/MathJax_Math-Italic.otf?V=2.7.1") format("opentype"); }

@font-face { font-family: MathJax_Caligraphic; src: url("https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/fonts/HTML-CSS/TeX/woff/MathJax_Caligraphic-Regular.woff?V=2.7.1") format("woff"), url("https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/fonts/HTML-CSS/TeX/otf/MathJax_Caligraphic-Regular.otf?V=2.7.1") format("opentype"); }

@font-face { font-family: MathJax_Size1; src: url("https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/fonts/HTML-CSS/TeX/woff/MathJax_Size1-Regular.woff?V=2.7.1") format("woff"), url("https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/fonts/HTML-CSS/TeX/otf/MathJax_Size1-Regular.otf?V=2.7.1") format("opentype"); }

@font-face { font-family: MathJax_Size2; src: url("https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/fonts/HTML-CSS/TeX/woff/MathJax_Size2-Regular.woff?V=2.7.1") format("woff"), url("https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/fonts/HTML-CSS/TeX/otf/MathJax_Size2-Regular.otf?V=2.7.1") format("opentype"); }

@font-face { font-family: MathJax_Size3; src: url("https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/fonts/HTML-CSS/TeX/woff/MathJax_Size3-Regular.woff?V=2.7.1") format("woff"), url("https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/fonts/HTML-CSS/TeX/otf/MathJax_Size3-Regular.otf?V=2.7.1") format("opentype"); }

@font-face { font-family: MathJax_Size4; src: url("https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/fonts/HTML-CSS/TeX/woff/MathJax_Size4-Regular.woff?V=2.7.1") format("woff"), url("https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/fonts/HTML-CSS/TeX/otf/MathJax_Size4-Regular.otf?V=2.7.1") format("opentype"); }

.MathJax .noError { font-size: 90%; text-align: left; color: black; padding: 1px 3px; border: 1px solid; }
------MultipartBoundary--42RUKswPkJoFcXtXRQMfSJHaGrWLU1MbiIJyTI5ZSP----
Content-Type: text/css
Content-Transfer-Encoding: binary
Content-Location: https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css

@charset "utf-8";

:root { --bs-blue: #0d6efd; --bs-indigo: #6610f2; --bs-purple: #6f42c1; --bs-pink: #d63384; --bs-red: #dc3545; --bs-orange: #fd7e14; --bs-yellow: #ffc107; --bs-green: #198754; --bs-teal: #20c997; --bs-cyan: #0dcaf0; --bs-white: #fff; --bs-gray: #6c757d; --bs-gray-dark: #343a40; --bs-primary: #0d6efd; --bs-secondary: #6c757d; --bs-success: #198754; --bs-info: #0dcaf0; --bs-warning: #ffc107; --bs-danger: #dc3545; --bs-light: #f8f9fa; --bs-dark: #212529; --bs-font-sans-serif: system-ui,-apple-system,"Segoe UI",Roboto,"Helvetica Neue",Arial,"Noto Sans","Liberation Sans",sans-serif,"Apple Color Emoji","Segoe UI Emoji","Segoe UI Symbol","Noto Color Emoji"; --bs-font-monospace: SFMono-Regular,Menlo,Monaco,Consolas,"Liberation Mono","Courier New",monospace; --bs-gradient: linear-gradient(180deg, rgba(255, 255, 255, 0.15), rgba(255, 255, 255, 0)); }

*, ::after, ::before { box-sizing: border-box; }

@media (prefers-reduced-motion: no-preference) {
  :root { scroll-behavior: smooth; }
}

body { margin: 0px; font-family: var(--bs-font-sans-serif); font-size: 1rem; font-weight: 400; line-height: 1.5; color: rgb(33, 37, 41); background-color: rgb(255, 255, 255); text-size-adjust: 100%; -webkit-tap-highlight-color: transparent; }

hr { margin: 1rem 0px; color: inherit; background-color: currentcolor; border: 0px; opacity: 0.25; }

hr:not([size]) { height: 1px; }

.h1, .h2, .h3, .h4, .h5, .h6, h1, h2, h3, h4, h5, h6 { margin-top: 0px; margin-bottom: 0.5rem; font-weight: 500; line-height: 1.2; }

.h1, h1 { font-size: calc(1.375rem + 1.5vw); }

@media (min-width: 1200px) {
  .h1, h1 { font-size: 2.5rem; }
}

.h2, h2 { font-size: calc(1.325rem + 0.9vw); }

@media (min-width: 1200px) {
  .h2, h2 { font-size: 2rem; }
}

.h3, h3 { font-size: calc(1.3rem + 0.6vw); }

@media (min-width: 1200px) {
  .h3, h3 { font-size: 1.75rem; }
}

.h4, h4 { font-size: calc(1.275rem + 0.3vw); }

@media (min-width: 1200px) {
  .h4, h4 { font-size: 1.5rem; }
}

.h5, h5 { font-size: 1.25rem; }

.h6, h6 { font-size: 1rem; }

p { margin-top: 0px; margin-bottom: 1rem; }

abbr[data-bs-original-title], abbr[title] { text-decoration: underline dotted; cursor: help; text-decoration-skip-ink: none; }

address { margin-bottom: 1rem; font-style: normal; line-height: inherit; }

ol, ul { padding-left: 2rem; }

dl, ol, ul { margin-top: 0px; margin-bottom: 1rem; }

ol ol, ol ul, ul ol, ul ul { margin-bottom: 0px; }

dt { font-weight: 700; }

dd { margin-bottom: 0.5rem; margin-left: 0px; }

blockquote { margin: 0px 0px 1rem; }

b, strong { font-weight: bolder; }

.small, small { font-size: 0.875em; }

.mark, mark { padding: 0.2em; background-color: rgb(252, 248, 227); }

sub, sup { position: relative; font-size: 0.75em; line-height: 0; vertical-align: baseline; }

sub { bottom: -0.25em; }

sup { top: -0.5em; }

a { color: rgb(13, 110, 253); text-decoration: underline; }

a:hover { color: rgb(10, 88, 202); }

a:not([href]):not([class]), a:not([href]):not([class]):hover { color: inherit; text-decoration: none; }

code, kbd, pre, samp { font-family: var(--bs-font-monospace); font-size: 1em; direction: ltr; unicode-bidi: bidi-override; }

pre { display: block; margin-top: 0px; margin-bottom: 1rem; overflow: auto; font-size: 0.875em; }

pre code { font-size: inherit; color: inherit; word-break: normal; }

code { font-size: 0.875em; color: rgb(214, 51, 132); overflow-wrap: break-word; }

a > code { color: inherit; }

kbd { padding: 0.2rem 0.4rem; font-size: 0.875em; color: rgb(255, 255, 255); background-color: rgb(33, 37, 41); border-radius: 0.2rem; }

kbd kbd { padding: 0px; font-size: 1em; font-weight: 700; }

figure { margin: 0px 0px 1rem; }

img, svg { vertical-align: middle; }

table { caption-side: bottom; border-collapse: collapse; }

caption { padding-top: 0.5rem; padding-bottom: 0.5rem; color: rgb(108, 117, 125); text-align: left; }

th { text-align: -webkit-match-parent; }

tbody, td, tfoot, th, thead, tr { border-color: inherit; border-style: solid; border-width: 0px; }

label { display: inline-block; }

button { border-radius: 0px; }

button:focus:not(:focus-visible) { outline: 0px; }

button, input, optgroup, select, textarea { margin: 0px; font-family: inherit; font-size: inherit; line-height: inherit; }

button, select { text-transform: none; }

[role="button"] { cursor: pointer; }

select { overflow-wrap: normal; }

select:disabled { opacity: 1; }

[list]::-webkit-calendar-picker-indicator { display: none; }

[type="button"], [type="reset"], [type="submit"], button { appearance: button; }

[type="button"]:not(:disabled), [type="reset"]:not(:disabled), [type="submit"]:not(:disabled), button:not(:disabled) { cursor: pointer; }

textarea { resize: vertical; }

fieldset { min-width: 0px; padding: 0px; margin: 0px; border: 0px; }

legend { float: left; width: 100%; padding: 0px; margin-bottom: 0.5rem; font-size: calc(1.275rem + 0.3vw); line-height: inherit; }

@media (min-width: 1200px) {
  legend { font-size: 1.5rem; }
}

legend + * { clear: left; }

::-webkit-datetime-edit-day-field, ::-webkit-datetime-edit-fields-wrapper, ::-webkit-datetime-edit-hour-field, ::-webkit-datetime-edit-minute, ::-webkit-datetime-edit-month-field, ::-webkit-datetime-edit-text, ::-webkit-datetime-edit-year-field { padding: 0px; }

::-webkit-inner-spin-button { height: auto; }

[type="search"] { outline-offset: -2px; appearance: textfield; }

::-webkit-search-decoration { appearance: none; }

::-webkit-color-swatch-wrapper { padding: 0px; }

::file-selector-button { font: inherit; }

::-webkit-file-upload-button { font: inherit; appearance: button; }

output { display: inline-block; }

iframe { border: 0px; }

summary { display: list-item; cursor: pointer; }

progress { vertical-align: baseline; }

[hidden] { display: none !important; }

.lead { font-size: 1.25rem; font-weight: 300; }

.display-1 { font-size: calc(1.625rem + 4.5vw); font-weight: 300; line-height: 1.2; }

@media (min-width: 1200px) {
  .display-1 { font-size: 5rem; }
}

.display-2 { font-size: calc(1.575rem + 3.9vw); font-weight: 300; line-height: 1.2; }

@media (min-width: 1200px) {
  .display-2 { font-size: 4.5rem; }
}

.display-3 { font-size: calc(1.525rem + 3.3vw); font-weight: 300; line-height: 1.2; }

@media (min-width: 1200px) {
  .display-3 { font-size: 4rem; }
}

.display-4 { font-size: calc(1.475rem + 2.7vw); font-weight: 300; line-height: 1.2; }

@media (min-width: 1200px) {
  .display-4 { font-size: 3.5rem; }
}

.display-5 { font-size: calc(1.425rem + 2.1vw); font-weight: 300; line-height: 1.2; }

@media (min-width: 1200px) {
  .display-5 { font-size: 3rem; }
}

.display-6 { font-size: calc(1.375rem + 1.5vw); font-weight: 300; line-height: 1.2; }

@media (min-width: 1200px) {
  .display-6 { font-size: 2.5rem; }
}

.list-unstyled { padding-left: 0px; list-style: none; }

.list-inline { padding-left: 0px; list-style: none; }

.list-inline-item { display: inline-block; }

.list-inline-item:not(:last-child) { margin-right: 0.5rem; }

.initialism { font-size: 0.875em; text-transform: uppercase; }

.blockquote { margin-bottom: 1rem; font-size: 1.25rem; }

.blockquote > :last-child { margin-bottom: 0px; }

.blockquote-footer { margin-top: -1rem; margin-bottom: 1rem; font-size: 0.875em; color: rgb(108, 117, 125); }

.blockquote-footer::before { content: "— "; }

.img-fluid { max-width: 100%; height: auto; }

.img-thumbnail { padding: 0.25rem; background-color: rgb(255, 255, 255); border: 1px solid rgb(222, 226, 230); border-radius: 0.25rem; max-width: 100%; height: auto; }

.figure { display: inline-block; }

.figure-img { margin-bottom: 0.5rem; line-height: 1; }

.figure-caption { font-size: 0.875em; color: rgb(108, 117, 125); }

.container, .container-fluid, .container-lg, .container-md, .container-sm, .container-xl, .container-xxl { width: 100%; padding-right: var(--bs-gutter-x,.75rem); padding-left: var(--bs-gutter-x,.75rem); margin-right: auto; margin-left: auto; }

@media (min-width: 576px) {
  .container, .container-sm { max-width: 540px; }
}

@media (min-width: 768px) {
  .container, .container-md, .container-sm { max-width: 720px; }
}

@media (min-width: 992px) {
  .container, .container-lg, .container-md, .container-sm { max-width: 960px; }
}

@media (min-width: 1200px) {
  .container, .container-lg, .container-md, .container-sm, .container-xl { max-width: 1140px; }
}

@media (min-width: 1400px) {
  .container, .container-lg, .container-md, .container-sm, .container-xl, .container-xxl { max-width: 1320px; }
}

.row { --bs-gutter-x: 1.5rem; --bs-gutter-y: 0; display: flex; flex-wrap: wrap; margin-top: calc(var(--bs-gutter-y) * -1); margin-right: calc(var(--bs-gutter-x) * -.5); margin-left: calc(var(--bs-gutter-x) * -.5); }

.row > * { flex-shrink: 0; width: 100%; max-width: 100%; padding-right: calc(var(--bs-gutter-x) * .5); padding-left: calc(var(--bs-gutter-x) * .5); margin-top: var(--bs-gutter-y); }

.col { flex: 1 0 0%; }

.row-cols-auto > * { flex: 0 0 auto; width: auto; }

.row-cols-1 > * { flex: 0 0 auto; width: 100%; }

.row-cols-2 > * { flex: 0 0 auto; width: 50%; }

.row-cols-3 > * { flex: 0 0 auto; width: 33.3333%; }

.row-cols-4 > * { flex: 0 0 auto; width: 25%; }

.row-cols-5 > * { flex: 0 0 auto; width: 20%; }

.row-cols-6 > * { flex: 0 0 auto; width: 16.6667%; }

@media (min-width: 576px) {
  .col-sm { flex: 1 0 0%; }
  .row-cols-sm-auto > * { flex: 0 0 auto; width: auto; }
  .row-cols-sm-1 > * { flex: 0 0 auto; width: 100%; }
  .row-cols-sm-2 > * { flex: 0 0 auto; width: 50%; }
  .row-cols-sm-3 > * { flex: 0 0 auto; width: 33.3333%; }
  .row-cols-sm-4 > * { flex: 0 0 auto; width: 25%; }
  .row-cols-sm-5 > * { flex: 0 0 auto; width: 20%; }
  .row-cols-sm-6 > * { flex: 0 0 auto; width: 16.6667%; }
}

@media (min-width: 768px) {
  .col-md { flex: 1 0 0%; }
  .row-cols-md-auto > * { flex: 0 0 auto; width: auto; }
  .row-cols-md-1 > * { flex: 0 0 auto; width: 100%; }
  .row-cols-md-2 > * { flex: 0 0 auto; width: 50%; }
  .row-cols-md-3 > * { flex: 0 0 auto; width: 33.3333%; }
  .row-cols-md-4 > * { flex: 0 0 auto; width: 25%; }
  .row-cols-md-5 > * { flex: 0 0 auto; width: 20%; }
  .row-cols-md-6 > * { flex: 0 0 auto; width: 16.6667%; }
}

@media (min-width: 992px) {
  .col-lg { flex: 1 0 0%; }
  .row-cols-lg-auto > * { flex: 0 0 auto; width: auto; }
  .row-cols-lg-1 > * { flex: 0 0 auto; width: 100%; }
  .row-cols-lg-2 > * { flex: 0 0 auto; width: 50%; }
  .row-cols-lg-3 > * { flex: 0 0 auto; width: 33.3333%; }
  .row-cols-lg-4 > * { flex: 0 0 auto; width: 25%; }
  .row-cols-lg-5 > * { flex: 0 0 auto; width: 20%; }
  .row-cols-lg-6 > * { flex: 0 0 auto; width: 16.6667%; }
}

@media (min-width: 1200px) {
  .col-xl { flex: 1 0 0%; }
  .row-cols-xl-auto > * { flex: 0 0 auto; width: auto; }
  .row-cols-xl-1 > * { flex: 0 0 auto; width: 100%; }
  .row-cols-xl-2 > * { flex: 0 0 auto; width: 50%; }
  .row-cols-xl-3 > * { flex: 0 0 auto; width: 33.3333%; }
  .row-cols-xl-4 > * { flex: 0 0 auto; width: 25%; }
  .row-cols-xl-5 > * { flex: 0 0 auto; width: 20%; }
  .row-cols-xl-6 > * { flex: 0 0 auto; width: 16.6667%; }
}

@media (min-width: 1400px) {
  .col-xxl { flex: 1 0 0%; }
  .row-cols-xxl-auto > * { flex: 0 0 auto; width: auto; }
  .row-cols-xxl-1 > * { flex: 0 0 auto; width: 100%; }
  .row-cols-xxl-2 > * { flex: 0 0 auto; width: 50%; }
  .row-cols-xxl-3 > * { flex: 0 0 auto; width: 33.3333%; }
  .row-cols-xxl-4 > * { flex: 0 0 auto; width: 25%; }
  .row-cols-xxl-5 > * { flex: 0 0 auto; width: 20%; }
  .row-cols-xxl-6 > * { flex: 0 0 auto; width: 16.6667%; }
}

.col-auto { flex: 0 0 auto; width: auto; }

.col-1 { flex: 0 0 auto; width: 8.33333%; }

.col-2 { flex: 0 0 auto; width: 16.6667%; }

.col-3 { flex: 0 0 auto; width: 25%; }

.col-4 { flex: 0 0 auto; width: 33.3333%; }

.col-5 { flex: 0 0 auto; width: 41.6667%; }

.col-6 { flex: 0 0 auto; width: 50%; }

.col-7 { flex: 0 0 auto; width: 58.3333%; }

.col-8 { flex: 0 0 auto; width: 66.6667%; }

.col-9 { flex: 0 0 auto; width: 75%; }

.col-10 { flex: 0 0 auto; width: 83.3333%; }

.col-11 { flex: 0 0 auto; width: 91.6667%; }

.col-12 { flex: 0 0 auto; width: 100%; }

.offset-1 { margin-left: 8.33333%; }

.offset-2 { margin-left: 16.6667%; }

.offset-3 { margin-left: 25%; }

.offset-4 { margin-left: 33.3333%; }

.offset-5 { margin-left: 41.6667%; }

.offset-6 { margin-left: 50%; }

.offset-7 { margin-left: 58.3333%; }

.offset-8 { margin-left: 66.6667%; }

.offset-9 { margin-left: 75%; }

.offset-10 { margin-left: 83.3333%; }

.offset-11 { margin-left: 91.6667%; }

.g-0, .gx-0 { --bs-gutter-x: 0; }

.g-0, .gy-0 { --bs-gutter-y: 0; }

.g-1, .gx-1 { --bs-gutter-x: 0.25rem; }

.g-1, .gy-1 { --bs-gutter-y: 0.25rem; }

.g-2, .gx-2 { --bs-gutter-x: 0.5rem; }

.g-2, .gy-2 { --bs-gutter-y: 0.5rem; }

.g-3, .gx-3 { --bs-gutter-x: 1rem; }

.g-3, .gy-3 { --bs-gutter-y: 1rem; }

.g-4, .gx-4 { --bs-gutter-x: 1.5rem; }

.g-4, .gy-4 { --bs-gutter-y: 1.5rem; }

.g-5, .gx-5 { --bs-gutter-x: 3rem; }

.g-5, .gy-5 { --bs-gutter-y: 3rem; }

@media (min-width: 576px) {
  .col-sm-auto { flex: 0 0 auto; width: auto; }
  .col-sm-1 { flex: 0 0 auto; width: 8.33333%; }
  .col-sm-2 { flex: 0 0 auto; width: 16.6667%; }
  .col-sm-3 { flex: 0 0 auto; width: 25%; }
  .col-sm-4 { flex: 0 0 auto; width: 33.3333%; }
  .col-sm-5 { flex: 0 0 auto; width: 41.6667%; }
  .col-sm-6 { flex: 0 0 auto; width: 50%; }
  .col-sm-7 { flex: 0 0 auto; width: 58.3333%; }
  .col-sm-8 { flex: 0 0 auto; width: 66.6667%; }
  .col-sm-9 { flex: 0 0 auto; width: 75%; }
  .col-sm-10 { flex: 0 0 auto; width: 83.3333%; }
  .col-sm-11 { flex: 0 0 auto; width: 91.6667%; }
  .col-sm-12 { flex: 0 0 auto; width: 100%; }
  .offset-sm-0 { margin-left: 0px; }
  .offset-sm-1 { margin-left: 8.33333%; }
  .offset-sm-2 { margin-left: 16.6667%; }
  .offset-sm-3 { margin-left: 25%; }
  .offset-sm-4 { margin-left: 33.3333%; }
  .offset-sm-5 { margin-left: 41.6667%; }
  .offset-sm-6 { margin-left: 50%; }
  .offset-sm-7 { margin-left: 58.3333%; }
  .offset-sm-8 { margin-left: 66.6667%; }
  .offset-sm-9 { margin-left: 75%; }
  .offset-sm-10 { margin-left: 83.3333%; }
  .offset-sm-11 { margin-left: 91.6667%; }
  .g-sm-0, .gx-sm-0 { --bs-gutter-x: 0; }
  .g-sm-0, .gy-sm-0 { --bs-gutter-y: 0; }
  .g-sm-1, .gx-sm-1 { --bs-gutter-x: 0.25rem; }
  .g-sm-1, .gy-sm-1 { --bs-gutter-y: 0.25rem; }
  .g-sm-2, .gx-sm-2 { --bs-gutter-x: 0.5rem; }
  .g-sm-2, .gy-sm-2 { --bs-gutter-y: 0.5rem; }
  .g-sm-3, .gx-sm-3 { --bs-gutter-x: 1rem; }
  .g-sm-3, .gy-sm-3 { --bs-gutter-y: 1rem; }
  .g-sm-4, .gx-sm-4 { --bs-gutter-x: 1.5rem; }
  .g-sm-4, .gy-sm-4 { --bs-gutter-y: 1.5rem; }
  .g-sm-5, .gx-sm-5 { --bs-gutter-x: 3rem; }
  .g-sm-5, .gy-sm-5 { --bs-gutter-y: 3rem; }
}

@media (min-width: 768px) {
  .col-md-auto { flex: 0 0 auto; width: auto; }
  .col-md-1 { flex: 0 0 auto; width: 8.33333%; }
  .col-md-2 { flex: 0 0 auto; width: 16.6667%; }
  .col-md-3 { flex: 0 0 auto; width: 25%; }
  .col-md-4 { flex: 0 0 auto; width: 33.3333%; }
  .col-md-5 { flex: 0 0 auto; width: 41.6667%; }
  .col-md-6 { flex: 0 0 auto; width: 50%; }
  .col-md-7 { flex: 0 0 auto; width: 58.3333%; }
  .col-md-8 { flex: 0 0 auto; width: 66.6667%; }
  .col-md-9 { flex: 0 0 auto; width: 75%; }
  .col-md-10 { flex: 0 0 auto; width: 83.3333%; }
  .col-md-11 { flex: 0 0 auto; width: 91.6667%; }
  .col-md-12 { flex: 0 0 auto; width: 100%; }
  .offset-md-0 { margin-left: 0px; }
  .offset-md-1 { margin-left: 8.33333%; }
  .offset-md-2 { margin-left: 16.6667%; }
  .offset-md-3 { margin-left: 25%; }
  .offset-md-4 { margin-left: 33.3333%; }
  .offset-md-5 { margin-left: 41.6667%; }
  .offset-md-6 { margin-left: 50%; }
  .offset-md-7 { margin-left: 58.3333%; }
  .offset-md-8 { margin-left: 66.6667%; }
  .offset-md-9 { margin-left: 75%; }
  .offset-md-10 { margin-left: 83.3333%; }
  .offset-md-11 { margin-left: 91.6667%; }
  .g-md-0, .gx-md-0 { --bs-gutter-x: 0; }
  .g-md-0, .gy-md-0 { --bs-gutter-y: 0; }
  .g-md-1, .gx-md-1 { --bs-gutter-x: 0.25rem; }
  .g-md-1, .gy-md-1 { --bs-gutter-y: 0.25rem; }
  .g-md-2, .gx-md-2 { --bs-gutter-x: 0.5rem; }
  .g-md-2, .gy-md-2 { --bs-gutter-y: 0.5rem; }
  .g-md-3, .gx-md-3 { --bs-gutter-x: 1rem; }
  .g-md-3, .gy-md-3 { --bs-gutter-y: 1rem; }
  .g-md-4, .gx-md-4 { --bs-gutter-x: 1.5rem; }
  .g-md-4, .gy-md-4 { --bs-gutter-y: 1.5rem; }
  .g-md-5, .gx-md-5 { --bs-gutter-x: 3rem; }
  .g-md-5, .gy-md-5 { --bs-gutter-y: 3rem; }
}

@media (min-width: 992px) {
  .col-lg-auto { flex: 0 0 auto; width: auto; }
  .col-lg-1 { flex: 0 0 auto; width: 8.33333%; }
  .col-lg-2 { flex: 0 0 auto; width: 16.6667%; }
  .col-lg-3 { flex: 0 0 auto; width: 25%; }
  .col-lg-4 { flex: 0 0 auto; width: 33.3333%; }
  .col-lg-5 { flex: 0 0 auto; width: 41.6667%; }
  .col-lg-6 { flex: 0 0 auto; width: 50%; }
  .col-lg-7 { flex: 0 0 auto; width: 58.3333%; }
  .col-lg-8 { flex: 0 0 auto; width: 66.6667%; }
  .col-lg-9 { flex: 0 0 auto; width: 75%; }
  .col-lg-10 { flex: 0 0 auto; width: 83.3333%; }
  .col-lg-11 { flex: 0 0 auto; width: 91.6667%; }
  .col-lg-12 { flex: 0 0 auto; width: 100%; }
  .offset-lg-0 { margin-left: 0px; }
  .offset-lg-1 { margin-left: 8.33333%; }
  .offset-lg-2 { margin-left: 16.6667%; }
  .offset-lg-3 { margin-left: 25%; }
  .offset-lg-4 { margin-left: 33.3333%; }
  .offset-lg-5 { margin-left: 41.6667%; }
  .offset-lg-6 { margin-left: 50%; }
  .offset-lg-7 { margin-left: 58.3333%; }
  .offset-lg-8 { margin-left: 66.6667%; }
  .offset-lg-9 { margin-left: 75%; }
  .offset-lg-10 { margin-left: 83.3333%; }
  .offset-lg-11 { margin-left: 91.6667%; }
  .g-lg-0, .gx-lg-0 { --bs-gutter-x: 0; }
  .g-lg-0, .gy-lg-0 { --bs-gutter-y: 0; }
  .g-lg-1, .gx-lg-1 { --bs-gutter-x: 0.25rem; }
  .g-lg-1, .gy-lg-1 { --bs-gutter-y: 0.25rem; }
  .g-lg-2, .gx-lg-2 { --bs-gutter-x: 0.5rem; }
  .g-lg-2, .gy-lg-2 { --bs-gutter-y: 0.5rem; }
  .g-lg-3, .gx-lg-3 { --bs-gutter-x: 1rem; }
  .g-lg-3, .gy-lg-3 { --bs-gutter-y: 1rem; }
  .g-lg-4, .gx-lg-4 { --bs-gutter-x: 1.5rem; }
  .g-lg-4, .gy-lg-4 { --bs-gutter-y: 1.5rem; }
  .g-lg-5, .gx-lg-5 { --bs-gutter-x: 3rem; }
  .g-lg-5, .gy-lg-5 { --bs-gutter-y: 3rem; }
}

@media (min-width: 1200px) {
  .col-xl-auto { flex: 0 0 auto; width: auto; }
  .col-xl-1 { flex: 0 0 auto; width: 8.33333%; }
  .col-xl-2 { flex: 0 0 auto; width: 16.6667%; }
  .col-xl-3 { flex: 0 0 auto; width: 25%; }
  .col-xl-4 { flex: 0 0 auto; width: 33.3333%; }
  .col-xl-5 { flex: 0 0 auto; width: 41.6667%; }
  .col-xl-6 { flex: 0 0 auto; width: 50%; }
  .col-xl-7 { flex: 0 0 auto; width: 58.3333%; }
  .col-xl-8 { flex: 0 0 auto; width: 66.6667%; }
  .col-xl-9 { flex: 0 0 auto; width: 75%; }
  .col-xl-10 { flex: 0 0 auto; width: 83.3333%; }
  .col-xl-11 { flex: 0 0 auto; width: 91.6667%; }
  .col-xl-12 { flex: 0 0 auto; width: 100%; }
  .offset-xl-0 { margin-left: 0px; }
  .offset-xl-1 { margin-left: 8.33333%; }
  .offset-xl-2 { margin-left: 16.6667%; }
  .offset-xl-3 { margin-left: 25%; }
  .offset-xl-4 { margin-left: 33.3333%; }
  .offset-xl-5 { margin-left: 41.6667%; }
  .offset-xl-6 { margin-left: 50%; }
  .offset-xl-7 { margin-left: 58.3333%; }
  .offset-xl-8 { margin-left: 66.6667%; }
  .offset-xl-9 { margin-left: 75%; }
  .offset-xl-10 { margin-left: 83.3333%; }
  .offset-xl-11 { margin-left: 91.6667%; }
  .g-xl-0, .gx-xl-0 { --bs-gutter-x: 0; }
  .g-xl-0, .gy-xl-0 { --bs-gutter-y: 0; }
  .g-xl-1, .gx-xl-1 { --bs-gutter-x: 0.25rem; }
  .g-xl-1, .gy-xl-1 { --bs-gutter-y: 0.25rem; }
  .g-xl-2, .gx-xl-2 { --bs-gutter-x: 0.5rem; }
  .g-xl-2, .gy-xl-2 { --bs-gutter-y: 0.5rem; }
  .g-xl-3, .gx-xl-3 { --bs-gutter-x: 1rem; }
  .g-xl-3, .gy-xl-3 { --bs-gutter-y: 1rem; }
  .g-xl-4, .gx-xl-4 { --bs-gutter-x: 1.5rem; }
  .g-xl-4, .gy-xl-4 { --bs-gutter-y: 1.5rem; }
  .g-xl-5, .gx-xl-5 { --bs-gutter-x: 3rem; }
  .g-xl-5, .gy-xl-5 { --bs-gutter-y: 3rem; }
}

@media (min-width: 1400px) {
  .col-xxl-auto { flex: 0 0 auto; width: auto; }
  .col-xxl-1 { flex: 0 0 auto; width: 8.33333%; }
  .col-xxl-2 { flex: 0 0 auto; width: 16.6667%; }
  .col-xxl-3 { flex: 0 0 auto; width: 25%; }
  .col-xxl-4 { flex: 0 0 auto; width: 33.3333%; }
  .col-xxl-5 { flex: 0 0 auto; width: 41.6667%; }
  .col-xxl-6 { flex: 0 0 auto; width: 50%; }
  .col-xxl-7 { flex: 0 0 auto; width: 58.3333%; }
  .col-xxl-8 { flex: 0 0 auto; width: 66.6667%; }
  .col-xxl-9 { flex: 0 0 auto; width: 75%; }
  .col-xxl-10 { flex: 0 0 auto; width: 83.3333%; }
  .col-xxl-11 { flex: 0 0 auto; width: 91.6667%; }
  .col-xxl-12 { flex: 0 0 auto; width: 100%; }
  .offset-xxl-0 { margin-left: 0px; }
  .offset-xxl-1 { margin-left: 8.33333%; }
  .offset-xxl-2 { margin-left: 16.6667%; }
  .offset-xxl-3 { margin-left: 25%; }
  .offset-xxl-4 { margin-left: 33.3333%; }
  .offset-xxl-5 { margin-left: 41.6667%; }
  .offset-xxl-6 { margin-left: 50%; }
  .offset-xxl-7 { margin-left: 58.3333%; }
  .offset-xxl-8 { margin-left: 66.6667%; }
  .offset-xxl-9 { margin-left: 75%; }
  .offset-xxl-10 { margin-left: 83.3333%; }
  .offset-xxl-11 { margin-left: 91.6667%; }
  .g-xxl-0, .gx-xxl-0 { --bs-gutter-x: 0; }
  .g-xxl-0, .gy-xxl-0 { --bs-gutter-y: 0; }
  .g-xxl-1, .gx-xxl-1 { --bs-gutter-x: 0.25rem; }
  .g-xxl-1, .gy-xxl-1 { --bs-gutter-y: 0.25rem; }
  .g-xxl-2, .gx-xxl-2 { --bs-gutter-x: 0.5rem; }
  .g-xxl-2, .gy-xxl-2 { --bs-gutter-y: 0.5rem; }
  .g-xxl-3, .gx-xxl-3 { --bs-gutter-x: 1rem; }
  .g-xxl-3, .gy-xxl-3 { --bs-gutter-y: 1rem; }
  .g-xxl-4, .gx-xxl-4 { --bs-gutter-x: 1.5rem; }
  .g-xxl-4, .gy-xxl-4 { --bs-gutter-y: 1.5rem; }
  .g-xxl-5, .gx-xxl-5 { --bs-gutter-x: 3rem; }
  .g-xxl-5, .gy-xxl-5 { --bs-gutter-y: 3rem; }
}

.table { --bs-table-bg: transparent; --bs-table-accent-bg: transparent; --bs-table-striped-color: #212529; --bs-table-striped-bg: rgba(0, 0, 0, 0.05); --bs-table-active-color: #212529; --bs-table-active-bg: rgba(0, 0, 0, 0.1); --bs-table-hover-color: #212529; --bs-table-hover-bg: rgba(0, 0, 0, 0.075); width: 100%; margin-bottom: 1rem; color: rgb(33, 37, 41); vertical-align: top; border-color: rgb(222, 226, 230); }

.table > :not(caption) > * > * { padding: 0.5rem; background-color: var(--bs-table-bg); border-bottom-width: 1px; box-shadow: inset 0 0 0 9999px var(--bs-table-accent-bg); }

.table > tbody { vertical-align: inherit; }

.table > thead { vertical-align: bottom; }

.table > :not(:last-child) > :last-child > * { border-bottom-color: currentcolor; }

.caption-top { caption-side: top; }

.table-sm > :not(caption) > * > * { padding: 0.25rem; }

.table-bordered > :not(caption) > * { border-width: 1px 0px; }

.table-bordered > :not(caption) > * > * { border-width: 0px 1px; }

.table-borderless > :not(caption) > * > * { border-bottom-width: 0px; }

.table-striped > tbody > tr:nth-of-type(2n+1) { --bs-table-accent-bg: var(--bs-table-striped-bg); color: var(--bs-table-striped-color); }

.table-active { --bs-table-accent-bg: var(--bs-table-active-bg); color: var(--bs-table-active-color); }

.table-hover > tbody > tr:hover { --bs-table-accent-bg: var(--bs-table-hover-bg); color: var(--bs-table-hover-color); }

.table-primary { --bs-table-bg: #cfe2ff; --bs-table-striped-bg: #c5d7f2; --bs-table-striped-color: #000; --bs-table-active-bg: #bacbe6; --bs-table-active-color: #000; --bs-table-hover-bg: #bfd1ec; --bs-table-hover-color: #000; color: rgb(0, 0, 0); border-color: rgb(186, 203, 230); }

.table-secondary { --bs-table-bg: #e2e3e5; --bs-table-striped-bg: #d7d8da; --bs-table-striped-color: #000; --bs-table-active-bg: #cbccce; --bs-table-active-color: #000; --bs-table-hover-bg: #d1d2d4; --bs-table-hover-color: #000; color: rgb(0, 0, 0); border-color: rgb(203, 204, 206); }

.table-success { --bs-table-bg: #d1e7dd; --bs-table-striped-bg: #c7dbd2; --bs-table-striped-color: #000; --bs-table-active-bg: #bcd0c7; --bs-table-active-color: #000; --bs-table-hover-bg: #c1d6cc; --bs-table-hover-color: #000; color: rgb(0, 0, 0); border-color: rgb(188, 208, 199); }

.table-info { --bs-table-bg: #cff4fc; --bs-table-striped-bg: #c5e8ef; --bs-table-striped-color: #000; --bs-table-active-bg: #badce3; --bs-table-active-color: #000; --bs-table-hover-bg: #bfe2e9; --bs-table-hover-color: #000; color: rgb(0, 0, 0); border-color: rgb(186, 220, 227); }

.table-warning { --bs-table-bg: #fff3cd; --bs-table-striped-bg: #f2e7c3; --bs-table-striped-color: #000; --bs-table-active-bg: #e6dbb9; --bs-table-active-color: #000; --bs-table-hover-bg: #ece1be; --bs-table-hover-color: #000; color: rgb(0, 0, 0); border-color: rgb(230, 219, 185); }

.table-danger { --bs-table-bg: #f8d7da; --bs-table-striped-bg: #eccccf; --bs-table-striped-color: #000; --bs-table-active-bg: #dfc2c4; --bs-table-active-color: #000; --bs-table-hover-bg: #e5c7ca; --bs-table-hover-color: #000; color: rgb(0, 0, 0); border-color: rgb(223, 194, 196); }

.table-light { --bs-table-bg: #f8f9fa; --bs-table-striped-bg: #ecedee; --bs-table-striped-color: #000; --bs-table-active-bg: #dfe0e1; --bs-table-active-color: #000; --bs-table-hover-bg: #e5e6e7; --bs-table-hover-color: #000; color: rgb(0, 0, 0); border-color: rgb(223, 224, 225); }

.table-dark { --bs-table-bg: #212529; --bs-table-striped-bg: #2c3034; --bs-table-striped-color: #fff; --bs-table-active-bg: #373b3e; --bs-table-active-color: #fff; --bs-table-hover-bg: #323539; --bs-table-hover-color: #fff; color: rgb(255, 255, 255); border-color: rgb(55, 59, 62); }

.table-responsive { overflow-x: auto; }

@media (max-width: 575.98px) {
  .table-responsive-sm { overflow-x: auto; }
}

@media (max-width: 767.98px) {
  .table-responsive-md { overflow-x: auto; }
}

@media (max-width: 991.98px) {
  .table-responsive-lg { overflow-x: auto; }
}

@media (max-width: 1199.98px) {
  .table-responsive-xl { overflow-x: auto; }
}

@media (max-width: 1399.98px) {
  .table-responsive-xxl { overflow-x: auto; }
}

.form-label { margin-bottom: 0.5rem; }

.col-form-label { padding-top: calc(1px + 0.375rem); padding-bottom: calc(1px + 0.375rem); margin-bottom: 0px; font-size: inherit; line-height: 1.5; }

.col-form-label-lg { padding-top: calc(1px + 0.5rem); padding-bottom: calc(1px + 0.5rem); font-size: 1.25rem; }

.col-form-label-sm { padding-top: calc(1px + 0.25rem); padding-bottom: calc(1px + 0.25rem); font-size: 0.875rem; }

.form-text { margin-top: 0.25rem; font-size: 0.875em; color: rgb(108, 117, 125); }

.form-control { display: block; width: 100%; padding: 0.375rem 0.75rem; font-size: 1rem; font-weight: 400; line-height: 1.5; color: rgb(33, 37, 41); background-color: rgb(255, 255, 255); background-clip: padding-box; border: 1px solid rgb(206, 212, 218); appearance: none; border-radius: 0.25rem; transition: border-color 0.15s ease-in-out 0s, box-shadow 0.15s ease-in-out 0s; }

@media (prefers-reduced-motion: reduce) {
  .form-control { transition: none 0s ease 0s; }
}

.form-control[type="file"] { overflow: hidden; }

.form-control[type="file"]:not(:disabled):not([readonly]) { cursor: pointer; }

.form-control:focus { color: rgb(33, 37, 41); background-color: rgb(255, 255, 255); border-color: rgb(134, 183, 254); outline: 0px; box-shadow: rgba(13, 110, 253, 0.25) 0px 0px 0px 0.25rem; }

.form-control::-webkit-date-and-time-value { height: 1.5em; }

.form-control::placeholder { color: rgb(108, 117, 125); opacity: 1; }

.form-control:disabled, .form-control[readonly] { background-color: rgb(233, 236, 239); opacity: 1; }

.form-control::file-selector-button { padding: 0.375rem 0.75rem; margin: -0.375rem -0.75rem; margin-inline-end: 0.75rem; color: rgb(33, 37, 41); background-color: rgb(233, 236, 239); pointer-events: none; border-color: inherit; border-style: solid; border-width: 0px; border-inline-end-width: 1px; border-radius: 0px; transition: color 0.15s ease-in-out 0s, background-color 0.15s ease-in-out 0s, border-color 0.15s ease-in-out 0s, box-shadow 0.15s ease-in-out 0s; }

@media (prefers-reduced-motion: reduce) {
  .form-control::file-selector-button { transition: none 0s ease 0s; }
}

.form-control:hover:not(:disabled):not([readonly])::file-selector-button { background-color: rgb(221, 224, 227); }

.form-control::-webkit-file-upload-button { padding: 0.375rem 0.75rem; margin: -0.375rem -0.75rem; margin-inline-end: 0.75rem; color: rgb(33, 37, 41); background-color: rgb(233, 236, 239); pointer-events: none; border-color: inherit; border-style: solid; border-width: 0px; border-inline-end-width: 1px; border-radius: 0px; transition: color 0.15s ease-in-out 0s, background-color 0.15s ease-in-out 0s, border-color 0.15s ease-in-out 0s, box-shadow 0.15s ease-in-out 0s; }

@media (prefers-reduced-motion: reduce) {
  .form-control::-webkit-file-upload-button { transition: none 0s ease 0s; }
}

.form-control:hover:not(:disabled):not([readonly])::-webkit-file-upload-button { background-color: rgb(221, 224, 227); }

.form-control-plaintext { display: block; width: 100%; padding: 0.375rem 0px; margin-bottom: 0px; line-height: 1.5; color: rgb(33, 37, 41); background-color: transparent; border-style: solid; border-color: transparent; border-image: initial; border-width: 1px 0px; }

.form-control-plaintext.form-control-lg, .form-control-plaintext.form-control-sm { padding-right: 0px; padding-left: 0px; }

.form-control-sm { min-height: calc(1.5em + 2px + 0.5rem); padding: 0.25rem 0.5rem; font-size: 0.875rem; border-radius: 0.2rem; }

.form-control-sm::file-selector-button { padding: 0.25rem 0.5rem; margin: -0.25rem -0.5rem; margin-inline-end: 0.5rem; }

.form-control-sm::-webkit-file-upload-button { padding: 0.25rem 0.5rem; margin: -0.25rem -0.5rem; margin-inline-end: 0.5rem; }

.form-control-lg { min-height: calc(1.5em + 2px + 1rem); padding: 0.5rem 1rem; font-size: 1.25rem; border-radius: 0.3rem; }

.form-control-lg::file-selector-button { padding: 0.5rem 1rem; margin: -0.5rem -1rem; margin-inline-end: 1rem; }

.form-control-lg::-webkit-file-upload-button { padding: 0.5rem 1rem; margin: -0.5rem -1rem; margin-inline-end: 1rem; }

textarea.form-control { min-height: calc(1.5em + 2px + 0.75rem); }

textarea.form-control-sm { min-height: calc(1.5em + 2px + 0.5rem); }

textarea.form-control-lg { min-height: calc(1.5em + 2px + 1rem); }

.form-control-color { max-width: 3rem; height: auto; padding: 0.375rem; }

.form-control-color:not(:disabled):not([readonly]) { cursor: pointer; }

.form-control-color::-webkit-color-swatch { height: 1.5em; border-radius: 0.25rem; }

.form-select { display: block; width: 100%; padding: 0.375rem 2.25rem 0.375rem 0.75rem; font-size: 1rem; font-weight: 400; line-height: 1.5; color: rgb(33, 37, 41); background-color: rgb(255, 255, 255); background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 16 16'%3e%3cpath fill='none' stroke='%23343a40' stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='M2 5l6 6 6-6'/%3e%3c/svg%3e"); background-repeat: no-repeat; background-position: right 0.75rem center; background-size: 16px 12px; border: 1px solid rgb(206, 212, 218); border-radius: 0.25rem; transition: border-color 0.15s ease-in-out 0s, box-shadow 0.15s ease-in-out 0s; appearance: none; }

@media (prefers-reduced-motion: reduce) {
  .form-select { transition: none 0s ease 0s; }
}

.form-select:focus { border-color: rgb(134, 183, 254); outline: 0px; box-shadow: rgba(13, 110, 253, 0.25) 0px 0px 0px 0.25rem; }

.form-select[multiple], .form-select[size]:not([size="1"]) { padding-right: 0.75rem; background-image: none; }

.form-select:disabled { background-color: rgb(233, 236, 239); }

.form-select-sm { padding-top: 0.25rem; padding-bottom: 0.25rem; padding-left: 0.5rem; font-size: 0.875rem; }

.form-select-lg { padding-top: 0.5rem; padding-bottom: 0.5rem; padding-left: 1rem; font-size: 1.25rem; }

.form-check { display: block; min-height: 1.5rem; padding-left: 1.5em; margin-bottom: 0.125rem; }

.form-check .form-check-input { float: left; margin-left: -1.5em; }

.form-check-input { width: 1em; height: 1em; margin-top: 0.25em; vertical-align: top; background-color: rgb(255, 255, 255); background-repeat: no-repeat; background-position: center center; background-size: contain; border: 1px solid rgba(0, 0, 0, 0.25); appearance: none; -webkit-print-color-adjust: exact; }

.form-check-input[type="checkbox"] { border-radius: 0.25em; }

.form-check-input[type="radio"] { border-radius: 50%; }

.form-check-input:active { filter: brightness(90%); }

.form-check-input:focus { border-color: rgb(134, 183, 254); outline: 0px; box-shadow: rgba(13, 110, 253, 0.25) 0px 0px 0px 0.25rem; }

.form-check-input:checked { background-color: rgb(13, 110, 253); border-color: rgb(13, 110, 253); }

.form-check-input:checked[type="checkbox"] { background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 20 20'%3e%3cpath fill='none' stroke='%23fff' stroke-linecap='round' stroke-linejoin='round' stroke-width='3' d='M6 10l3 3l6-6'/%3e%3c/svg%3e"); }

.form-check-input:checked[type="radio"] { background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='-4 -4 8 8'%3e%3ccircle r='2' fill='%23fff'/%3e%3c/svg%3e"); }

.form-check-input[type="checkbox"]:indeterminate { background-color: rgb(13, 110, 253); border-color: rgb(13, 110, 253); background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 20 20'%3e%3cpath fill='none' stroke='%23fff' stroke-linecap='round' stroke-linejoin='round' stroke-width='3' d='M6 10h8'/%3e%3c/svg%3e"); }

.form-check-input:disabled { pointer-events: none; filter: none; opacity: 0.5; }

.form-check-input:disabled ~ .form-check-label, .form-check-input[disabled] ~ .form-check-label { opacity: 0.5; }

.form-switch { padding-left: 2.5em; }

.form-switch .form-check-input { width: 2em; margin-left: -2.5em; background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='-4 -4 8 8'%3e%3ccircle r='3' fill='rgba%280, 0, 0, 0.25%29'/%3e%3c/svg%3e"); background-position: left center; border-radius: 2em; transition: background-position 0.15s ease-in-out 0s; }

@media (prefers-reduced-motion: reduce) {
  .form-switch .form-check-input { transition: none 0s ease 0s; }
}

.form-switch .form-check-input:focus { background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='-4 -4 8 8'%3e%3ccircle r='3' fill='%2386b7fe'/%3e%3c/svg%3e"); }

.form-switch .form-check-input:checked { background-position: right center; background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='-4 -4 8 8'%3e%3ccircle r='3' fill='%23fff'/%3e%3c/svg%3e"); }

.form-check-inline { display: inline-block; margin-right: 1rem; }

.btn-check { position: absolute; clip: rect(0px, 0px, 0px, 0px); pointer-events: none; }

.btn-check:disabled + .btn, .btn-check[disabled] + .btn { pointer-events: none; filter: none; opacity: 0.65; }

.form-range { width: 100%; height: 1.5rem; padding: 0px; background-color: transparent; appearance: none; }

.form-range:focus { outline: 0px; }

.form-range:focus::-webkit-slider-thumb { box-shadow: rgb(255, 255, 255) 0px 0px 0px 1px, rgba(13, 110, 253, 0.25) 0px 0px 0px 0.25rem; }

.form-range::-webkit-slider-thumb { width: 1rem; height: 1rem; margin-top: -0.25rem; background-color: rgb(13, 110, 253); border: 0px; border-radius: 1rem; transition: background-color 0.15s ease-in-out 0s, border-color 0.15s ease-in-out 0s, box-shadow 0.15s ease-in-out 0s; appearance: none; }

@media (prefers-reduced-motion: reduce) {
  .form-range::-webkit-slider-thumb { transition: none 0s ease 0s; }
}

.form-range::-webkit-slider-thumb:active { background-color: rgb(182, 212, 254); }

.form-range::-webkit-slider-runnable-track { width: 100%; height: 0.5rem; color: transparent; cursor: pointer; background-color: rgb(222, 226, 230); border-color: transparent; border-radius: 1rem; }

@media (prefers-reduced-motion: reduce) {
}

.form-range:disabled { pointer-events: none; }

.form-range:disabled::-webkit-slider-thumb { background-color: rgb(173, 181, 189); }

.form-floating { position: relative; }

.form-floating > .form-control, .form-floating > .form-select { height: calc(2px + 3.5rem); line-height: 1.25; }

.form-floating > label { position: absolute; top: 0px; left: 0px; height: 100%; padding: 1rem 0.75rem; pointer-events: none; border: 1px solid transparent; transform-origin: 0px 0px; transition: opacity 0.1s ease-in-out 0s, transform 0.1s ease-in-out 0s; }

@media (prefers-reduced-motion: reduce) {
  .form-floating > label { transition: none 0s ease 0s; }
}

.form-floating > .form-control { padding: 1rem 0.75rem; }

.form-floating > .form-control::placeholder { color: transparent; }

.form-floating > .form-control:focus, .form-floating > .form-control:not(:placeholder-shown) { padding-top: 1.625rem; padding-bottom: 0.625rem; }

.form-floating > .form-control:-webkit-autofill { padding-top: 1.625rem; padding-bottom: 0.625rem; }

.form-floating > .form-select { padding-top: 1.625rem; padding-bottom: 0.625rem; }

.form-floating > .form-control:focus ~ label, .form-floating > .form-control:not(:placeholder-shown) ~ label, .form-floating > .form-select ~ label { opacity: 0.65; transform: scale(0.85) translateY(-0.5rem) translateX(0.15rem); }

.form-floating > .form-control:-webkit-autofill ~ label { opacity: 0.65; transform: scale(0.85) translateY(-0.5rem) translateX(0.15rem); }

.input-group { position: relative; display: flex; flex-wrap: wrap; align-items: stretch; width: 100%; }

.input-group > .form-control, .input-group > .form-select { position: relative; flex: 1 1 auto; width: 1%; min-width: 0px; }

.input-group > .form-control:focus, .input-group > .form-select:focus { z-index: 3; }

.input-group .btn { position: relative; z-index: 2; }

.input-group .btn:focus { z-index: 3; }

.input-group-text { display: flex; align-items: center; padding: 0.375rem 0.75rem; font-size: 1rem; font-weight: 400; line-height: 1.5; color: rgb(33, 37, 41); text-align: center; white-space: nowrap; background-color: rgb(233, 236, 239); border: 1px solid rgb(206, 212, 218); border-radius: 0.25rem; }

.input-group-lg > .btn, .input-group-lg > .form-control, .input-group-lg > .form-select, .input-group-lg > .input-group-text { padding: 0.5rem 1rem; font-size: 1.25rem; border-radius: 0.3rem; }

.input-group-sm > .btn, .input-group-sm > .form-control, .input-group-sm > .form-select, .input-group-sm > .input-group-text { padding: 0.25rem 0.5rem; font-size: 0.875rem; border-radius: 0.2rem; }

.input-group-lg > .form-select, .input-group-sm > .form-select { padding-right: 3rem; }

.input-group:not(.has-validation) > .dropdown-toggle:nth-last-child(n+3), .input-group:not(.has-validation) > :not(:last-child):not(.dropdown-toggle):not(.dropdown-menu) { border-top-right-radius: 0px; border-bottom-right-radius: 0px; }

.input-group.has-validation > .dropdown-toggle:nth-last-child(n+4), .input-group.has-validation > :nth-last-child(n+3):not(.dropdown-toggle):not(.dropdown-menu) { border-top-right-radius: 0px; border-bottom-right-radius: 0px; }

.input-group > :not(:first-child):not(.dropdown-menu):not(.valid-tooltip):not(.valid-feedback):not(.invalid-tooltip):not(.invalid-feedback) { margin-left: -1px; border-top-left-radius: 0px; border-bottom-left-radius: 0px; }

.valid-feedback { display: none; width: 100%; margin-top: 0.25rem; font-size: 0.875em; color: rgb(25, 135, 84); }

.valid-tooltip { position: absolute; top: 100%; z-index: 5; display: none; max-width: 100%; padding: 0.25rem 0.5rem; margin-top: 0.1rem; font-size: 0.875rem; color: rgb(255, 255, 255); background-color: rgba(25, 135, 84, 0.9); border-radius: 0.25rem; }

.is-valid ~ .valid-feedback, .is-valid ~ .valid-tooltip, .was-validated :valid ~ .valid-feedback, .was-validated :valid ~ .valid-tooltip { display: block; }

.form-control.is-valid, .was-validated .form-control:valid { border-color: rgb(25, 135, 84); padding-right: calc(1.5em + 0.75rem); background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 8 8'%3e%3cpath fill='%23198754' d='M2.3 6.73L.6 4.53c-.4-1.04.46-1.4 1.1-.8l1.1 1.4 3.4-3.8c.6-.63 1.6-.27 1.2.7l-4 4.6c-.43.5-.8.4-1.1.1z'/%3e%3c/svg%3e"); background-repeat: no-repeat; background-position: right calc(0.375em + 0.1875rem) center; background-size: calc(0.75em + 0.375rem) calc(0.75em + 0.375rem); }

.form-control.is-valid:focus, .was-validated .form-control:valid:focus { border-color: rgb(25, 135, 84); box-shadow: rgba(25, 135, 84, 0.25) 0px 0px 0px 0.25rem; }

.was-validated textarea.form-control:valid, textarea.form-control.is-valid { padding-right: calc(1.5em + 0.75rem); background-position: right calc(0.375em + 0.1875rem) top calc(0.375em + 0.1875rem); }

.form-select.is-valid, .was-validated .form-select:valid { border-color: rgb(25, 135, 84); }

.form-select.is-valid:not([multiple]):not([size]), .form-select.is-valid:not([multiple])[size="1"], .was-validated .form-select:valid:not([multiple]):not([size]), .was-validated .form-select:valid:not([multiple])[size="1"] { padding-right: 4.125rem; background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 16 16'%3e%3cpath fill='none' stroke='%23343a40' stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='M2 5l6 6 6-6'/%3e%3c/svg%3e"), url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 8 8'%3e%3cpath fill='%23198754' d='M2.3 6.73L.6 4.53c-.4-1.04.46-1.4 1.1-.8l1.1 1.4 3.4-3.8c.6-.63 1.6-.27 1.2.7l-4 4.6c-.43.5-.8.4-1.1.1z'/%3e%3c/svg%3e"); background-position: right 0.75rem center, right 2.25rem center; background-size: 16px 12px, calc(0.75em + 0.375rem) calc(0.75em + 0.375rem); }

.form-select.is-valid:focus, .was-validated .form-select:valid:focus { border-color: rgb(25, 135, 84); box-shadow: rgba(25, 135, 84, 0.25) 0px 0px 0px 0.25rem; }

.form-check-input.is-valid, .was-validated .form-check-input:valid { border-color: rgb(25, 135, 84); }

.form-check-input.is-valid:checked, .was-validated .form-check-input:valid:checked { background-color: rgb(25, 135, 84); }

.form-check-input.is-valid:focus, .was-validated .form-check-input:valid:focus { box-shadow: rgba(25, 135, 84, 0.25) 0px 0px 0px 0.25rem; }

.form-check-input.is-valid ~ .form-check-label, .was-validated .form-check-input:valid ~ .form-check-label { color: rgb(25, 135, 84); }

.form-check-inline .form-check-input ~ .valid-feedback { margin-left: 0.5em; }

.input-group .form-control.is-valid, .input-group .form-select.is-valid, .was-validated .input-group .form-control:valid, .was-validated .input-group .form-select:valid { z-index: 1; }

.input-group .form-control.is-valid:focus, .input-group .form-select.is-valid:focus, .was-validated .input-group .form-control:valid:focus, .was-validated .input-group .form-select:valid:focus { z-index: 3; }

.invalid-feedback { display: none; width: 100%; margin-top: 0.25rem; font-size: 0.875em; color: rgb(220, 53, 69); }

.invalid-tooltip { position: absolute; top: 100%; z-index: 5; display: none; max-width: 100%; padding: 0.25rem 0.5rem; margin-top: 0.1rem; font-size: 0.875rem; color: rgb(255, 255, 255); background-color: rgba(220, 53, 69, 0.9); border-radius: 0.25rem; }

.is-invalid ~ .invalid-feedback, .is-invalid ~ .invalid-tooltip, .was-validated :invalid ~ .invalid-feedback, .was-validated :invalid ~ .invalid-tooltip { display: block; }

.form-control.is-invalid, .was-validated .form-control:invalid { border-color: rgb(220, 53, 69); padding-right: calc(1.5em + 0.75rem); background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 12 12' width='12' height='12' fill='none' stroke='%23dc3545'%3e%3ccircle cx='6' cy='6' r='4.5'/%3e%3cpath stroke-linejoin='round' d='M5.8 3.6h.4L6 6.5z'/%3e%3ccircle cx='6' cy='8.2' r='.6' fill='%23dc3545' stroke='none'/%3e%3c/svg%3e"); background-repeat: no-repeat; background-position: right calc(0.375em + 0.1875rem) center; background-size: calc(0.75em + 0.375rem) calc(0.75em + 0.375rem); }

.form-control.is-invalid:focus, .was-validated .form-control:invalid:focus { border-color: rgb(220, 53, 69); box-shadow: rgba(220, 53, 69, 0.25) 0px 0px 0px 0.25rem; }

.was-validated textarea.form-control:invalid, textarea.form-control.is-invalid { padding-right: calc(1.5em + 0.75rem); background-position: right calc(0.375em + 0.1875rem) top calc(0.375em + 0.1875rem); }

.form-select.is-invalid, .was-validated .form-select:invalid { border-color: rgb(220, 53, 69); }

.form-select.is-invalid:not([multiple]):not([size]), .form-select.is-invalid:not([multiple])[size="1"], .was-validated .form-select:invalid:not([multiple]):not([size]), .was-validated .form-select:invalid:not([multiple])[size="1"] { padding-right: 4.125rem; background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 16 16'%3e%3cpath fill='none' stroke='%23343a40' stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='M2 5l6 6 6-6'/%3e%3c/svg%3e"), url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 12 12' width='12' height='12' fill='none' stroke='%23dc3545'%3e%3ccircle cx='6' cy='6' r='4.5'/%3e%3cpath stroke-linejoin='round' d='M5.8 3.6h.4L6 6.5z'/%3e%3ccircle cx='6' cy='8.2' r='.6' fill='%23dc3545' stroke='none'/%3e%3c/svg%3e"); background-position: right 0.75rem center, right 2.25rem center; background-size: 16px 12px, calc(0.75em + 0.375rem) calc(0.75em + 0.375rem); }

.form-select.is-invalid:focus, .was-validated .form-select:invalid:focus { border-color: rgb(220, 53, 69); box-shadow: rgba(220, 53, 69, 0.25) 0px 0px 0px 0.25rem; }

.form-check-input.is-invalid, .was-validated .form-check-input:invalid { border-color: rgb(220, 53, 69); }

.form-check-input.is-invalid:checked, .was-validated .form-check-input:invalid:checked { background-color: rgb(220, 53, 69); }

.form-check-input.is-invalid:focus, .was-validated .form-check-input:invalid:focus { box-shadow: rgba(220, 53, 69, 0.25) 0px 0px 0px 0.25rem; }

.form-check-input.is-invalid ~ .form-check-label, .was-validated .form-check-input:invalid ~ .form-check-label { color: rgb(220, 53, 69); }

.form-check-inline .form-check-input ~ .invalid-feedback { margin-left: 0.5em; }

.input-group .form-control.is-invalid, .input-group .form-select.is-invalid, .was-validated .input-group .form-control:invalid, .was-validated .input-group .form-select:invalid { z-index: 2; }

.input-group .form-control.is-invalid:focus, .input-group .form-select.is-invalid:focus, .was-validated .input-group .form-control:invalid:focus, .was-validated .input-group .form-select:invalid:focus { z-index: 3; }

.btn { display: inline-block; font-weight: 400; line-height: 1.5; color: rgb(33, 37, 41); text-align: center; text-decoration: none; vertical-align: middle; cursor: pointer; user-select: none; background-color: transparent; border: 1px solid transparent; padding: 0.375rem 0.75rem; font-size: 1rem; border-radius: 0.25rem; transition: color 0.15s ease-in-out 0s, background-color 0.15s ease-in-out 0s, border-color 0.15s ease-in-out 0s, box-shadow 0.15s ease-in-out 0s; }

@media (prefers-reduced-motion: reduce) {
  .btn { transition: none 0s ease 0s; }
}

.btn:hover { color: rgb(33, 37, 41); }

.btn-check:focus + .btn, .btn:focus { outline: 0px; box-shadow: rgba(13, 110, 253, 0.25) 0px 0px 0px 0.25rem; }

.btn.disabled, .btn:disabled, fieldset:disabled .btn { pointer-events: none; opacity: 0.65; }

.btn-primary { color: rgb(255, 255, 255); background-color: rgb(13, 110, 253); border-color: rgb(13, 110, 253); }

.btn-primary:hover { color: rgb(255, 255, 255); background-color: rgb(11, 94, 215); border-color: rgb(10, 88, 202); }

.btn-check:focus + .btn-primary, .btn-primary:focus { color: rgb(255, 255, 255); background-color: rgb(11, 94, 215); border-color: rgb(10, 88, 202); box-shadow: rgba(49, 132, 253, 0.5) 0px 0px 0px 0.25rem; }

.btn-check:active + .btn-primary, .btn-check:checked + .btn-primary, .btn-primary.active, .btn-primary:active, .show > .btn-primary.dropdown-toggle { color: rgb(255, 255, 255); background-color: rgb(10, 88, 202); border-color: rgb(10, 83, 190); }

.btn-check:active + .btn-primary:focus, .btn-check:checked + .btn-primary:focus, .btn-primary.active:focus, .btn-primary:active:focus, .show > .btn-primary.dropdown-toggle:focus { box-shadow: rgba(49, 132, 253, 0.5) 0px 0px 0px 0.25rem; }

.btn-primary.disabled, .btn-primary:disabled { color: rgb(255, 255, 255); background-color: rgb(13, 110, 253); border-color: rgb(13, 110, 253); }

.btn-secondary { color: rgb(255, 255, 255); background-color: rgb(108, 117, 125); border-color: rgb(108, 117, 125); }

.btn-secondary:hover { color: rgb(255, 255, 255); background-color: rgb(92, 99, 106); border-color: rgb(86, 94, 100); }

.btn-check:focus + .btn-secondary, .btn-secondary:focus { color: rgb(255, 255, 255); background-color: rgb(92, 99, 106); border-color: rgb(86, 94, 100); box-shadow: rgba(130, 138, 145, 0.5) 0px 0px 0px 0.25rem; }

.btn-check:active + .btn-secondary, .btn-check:checked + .btn-secondary, .btn-secondary.active, .btn-secondary:active, .show > .btn-secondary.dropdown-toggle { color: rgb(255, 255, 255); background-color: rgb(86, 94, 100); border-color: rgb(81, 88, 94); }

.btn-check:active + .btn-secondary:focus, .btn-check:checked + .btn-secondary:focus, .btn-secondary.active:focus, .btn-secondary:active:focus, .show > .btn-secondary.dropdown-toggle:focus { box-shadow: rgba(130, 138, 145, 0.5) 0px 0px 0px 0.25rem; }

.btn-secondary.disabled, .btn-secondary:disabled { color: rgb(255, 255, 255); background-color: rgb(108, 117, 125); border-color: rgb(108, 117, 125); }

.btn-success { color: rgb(255, 255, 255); background-color: rgb(25, 135, 84); border-color: rgb(25, 135, 84); }

.btn-success:hover { color: rgb(255, 255, 255); background-color: rgb(21, 115, 71); border-color: rgb(20, 108, 67); }

.btn-check:focus + .btn-success, .btn-success:focus { color: rgb(255, 255, 255); background-color: rgb(21, 115, 71); border-color: rgb(20, 108, 67); box-shadow: rgba(60, 153, 110, 0.5) 0px 0px 0px 0.25rem; }

.btn-check:active + .btn-success, .btn-check:checked + .btn-success, .btn-success.active, .btn-success:active, .show > .btn-success.dropdown-toggle { color: rgb(255, 255, 255); background-color: rgb(20, 108, 67); border-color: rgb(19, 101, 63); }

.btn-check:active + .btn-success:focus, .btn-check:checked + .btn-success:focus, .btn-success.active:focus, .btn-success:active:focus, .show > .btn-success.dropdown-toggle:focus { box-shadow: rgba(60, 153, 110, 0.5) 0px 0px 0px 0.25rem; }

.btn-success.disabled, .btn-success:disabled { color: rgb(255, 255, 255); background-color: rgb(25, 135, 84); border-color: rgb(25, 135, 84); }

.btn-info { color: rgb(0, 0, 0); background-color: rgb(13, 202, 240); border-color: rgb(13, 202, 240); }

.btn-info:hover { color: rgb(0, 0, 0); background-color: rgb(49, 210, 242); border-color: rgb(37, 207, 242); }

.btn-check:focus + .btn-info, .btn-info:focus { color: rgb(0, 0, 0); background-color: rgb(49, 210, 242); border-color: rgb(37, 207, 242); box-shadow: rgba(11, 172, 204, 0.5) 0px 0px 0px 0.25rem; }

.btn-check:active + .btn-info, .btn-check:checked + .btn-info, .btn-info.active, .btn-info:active, .show > .btn-info.dropdown-toggle { color: rgb(0, 0, 0); background-color: rgb(61, 213, 243); border-color: rgb(37, 207, 242); }

.btn-check:active + .btn-info:focus, .btn-check:checked + .btn-info:focus, .btn-info.active:focus, .btn-info:active:focus, .show > .btn-info.dropdown-toggle:focus { box-shadow: rgba(11, 172, 204, 0.5) 0px 0px 0px 0.25rem; }

.btn-info.disabled, .btn-info:disabled { color: rgb(0, 0, 0); background-color: rgb(13, 202, 240); border-color: rgb(13, 202, 240); }

.btn-warning { color: rgb(0, 0, 0); background-color: rgb(255, 193, 7); border-color: rgb(255, 193, 7); }

.btn-warning:hover { color: rgb(0, 0, 0); background-color: rgb(255, 202, 44); border-color: rgb(255, 199, 32); }

.btn-check:focus + .btn-warning, .btn-warning:focus { color: rgb(0, 0, 0); background-color: rgb(255, 202, 44); border-color: rgb(255, 199, 32); box-shadow: rgba(217, 164, 6, 0.5) 0px 0px 0px 0.25rem; }

.btn-check:active + .btn-warning, .btn-check:checked + .btn-warning, .btn-warning.active, .btn-warning:active, .show > .btn-warning.dropdown-toggle { color: rgb(0, 0, 0); background-color: rgb(255, 205, 57); border-color: rgb(255, 199, 32); }

.btn-check:active + .btn-warning:focus, .btn-check:checked + .btn-warning:focus, .btn-warning.active:focus, .btn-warning:active:focus, .show > .btn-warning.dropdown-toggle:focus { box-shadow: rgba(217, 164, 6, 0.5) 0px 0px 0px 0.25rem; }

.btn-warning.disabled, .btn-warning:disabled { color: rgb(0, 0, 0); background-color: rgb(255, 193, 7); border-color: rgb(255, 193, 7); }

.btn-danger { color: rgb(255, 255, 255); background-color: rgb(220, 53, 69); border-color: rgb(220, 53, 69); }

.btn-danger:hover { color: rgb(255, 255, 255); background-color: rgb(187, 45, 59); border-color: rgb(176, 42, 55); }

.btn-check:focus + .btn-danger, .btn-danger:focus { color: rgb(255, 255, 255); background-color: rgb(187, 45, 59); border-color: rgb(176, 42, 55); box-shadow: rgba(225, 83, 97, 0.5) 0px 0px 0px 0.25rem; }

.btn-check:active + .btn-danger, .btn-check:checked + .btn-danger, .btn-danger.active, .btn-danger:active, .show > .btn-danger.dropdown-toggle { color: rgb(255, 255, 255); background-color: rgb(176, 42, 55); border-color: rgb(165, 40, 52); }

.btn-check:active + .btn-danger:focus, .btn-check:checked + .btn-danger:focus, .btn-danger.active:focus, .btn-danger:active:focus, .show > .btn-danger.dropdown-toggle:focus { box-shadow: rgba(225, 83, 97, 0.5) 0px 0px 0px 0.25rem; }

.btn-danger.disabled, .btn-danger:disabled { color: rgb(255, 255, 255); background-color: rgb(220, 53, 69); border-color: rgb(220, 53, 69); }

.btn-light { color: rgb(0, 0, 0); background-color: rgb(248, 249, 250); border-color: rgb(248, 249, 250); }

.btn-light:hover { color: rgb(0, 0, 0); background-color: rgb(249, 250, 251); border-color: rgb(249, 250, 251); }

.btn-check:focus + .btn-light, .btn-light:focus { color: rgb(0, 0, 0); background-color: rgb(249, 250, 251); border-color: rgb(249, 250, 251); box-shadow: rgba(211, 212, 213, 0.5) 0px 0px 0px 0.25rem; }

.btn-check:active + .btn-light, .btn-check:checked + .btn-light, .btn-light.active, .btn-light:active, .show > .btn-light.dropdown-toggle { color: rgb(0, 0, 0); background-color: rgb(249, 250, 251); border-color: rgb(249, 250, 251); }

.btn-check:active + .btn-light:focus, .btn-check:checked + .btn-light:focus, .btn-light.active:focus, .btn-light:active:focus, .show > .btn-light.dropdown-toggle:focus { box-shadow: rgba(211, 212, 213, 0.5) 0px 0px 0px 0.25rem; }

.btn-light.disabled, .btn-light:disabled { color: rgb(0, 0, 0); background-color: rgb(248, 249, 250); border-color: rgb(248, 249, 250); }

.btn-dark { color: rgb(255, 255, 255); background-color: rgb(33, 37, 41); border-color: rgb(33, 37, 41); }

.btn-dark:hover { color: rgb(255, 255, 255); background-color: rgb(28, 31, 35); border-color: rgb(26, 30, 33); }

.btn-check:focus + .btn-dark, .btn-dark:focus { color: rgb(255, 255, 255); background-color: rgb(28, 31, 35); border-color: rgb(26, 30, 33); box-shadow: rgba(66, 70, 73, 0.5) 0px 0px 0px 0.25rem; }

.btn-check:active + .btn-dark, .btn-check:checked + .btn-dark, .btn-dark.active, .btn-dark:active, .show > .btn-dark.dropdown-toggle { color: rgb(255, 255, 255); background-color: rgb(26, 30, 33); border-color: rgb(25, 28, 31); }

.btn-check:active + .btn-dark:focus, .btn-check:checked + .btn-dark:focus, .btn-dark.active:focus, .btn-dark:active:focus, .show > .btn-dark.dropdown-toggle:focus { box-shadow: rgba(66, 70, 73, 0.5) 0px 0px 0px 0.25rem; }

.btn-dark.disabled, .btn-dark:disabled { color: rgb(255, 255, 255); background-color: rgb(33, 37, 41); border-color: rgb(33, 37, 41); }

.btn-outline-primary { color: rgb(13, 110, 253); border-color: rgb(13, 110, 253); }

.btn-outline-primary:hover { color: rgb(255, 255, 255); background-color: rgb(13, 110, 253); border-color: rgb(13, 110, 253); }

.btn-check:focus + .btn-outline-primary, .btn-outline-primary:focus { box-shadow: rgba(13, 110, 253, 0.5) 0px 0px 0px 0.25rem; }

.btn-check:active + .btn-outline-primary, .btn-check:checked + .btn-outline-primary, .btn-outline-primary.active, .btn-outline-primary.dropdown-toggle.show, .btn-outline-primary:active { color: rgb(255, 255, 255); background-color: rgb(13, 110, 253); border-color: rgb(13, 110, 253); }

.btn-check:active + .btn-outline-primary:focus, .btn-check:checked + .btn-outline-primary:focus, .btn-outline-primary.active:focus, .btn-outline-primary.dropdown-toggle.show:focus, .btn-outline-primary:active:focus { box-shadow: rgba(13, 110, 253, 0.5) 0px 0px 0px 0.25rem; }

.btn-outline-primary.disabled, .btn-outline-primary:disabled { color: rgb(13, 110, 253); background-color: transparent; }

.btn-outline-secondary { color: rgb(108, 117, 125); border-color: rgb(108, 117, 125); }

.btn-outline-secondary:hover { color: rgb(255, 255, 255); background-color: rgb(108, 117, 125); border-color: rgb(108, 117, 125); }

.btn-check:focus + .btn-outline-secondary, .btn-outline-secondary:focus { box-shadow: rgba(108, 117, 125, 0.5) 0px 0px 0px 0.25rem; }

.btn-check:active + .btn-outline-secondary, .btn-check:checked + .btn-outline-secondary, .btn-outline-secondary.active, .btn-outline-secondary.dropdown-toggle.show, .btn-outline-secondary:active { color: rgb(255, 255, 255); background-color: rgb(108, 117, 125); border-color: rgb(108, 117, 125); }

.btn-check:active + .btn-outline-secondary:focus, .btn-check:checked + .btn-outline-secondary:focus, .btn-outline-secondary.active:focus, .btn-outline-secondary.dropdown-toggle.show:focus, .btn-outline-secondary:active:focus { box-shadow: rgba(108, 117, 125, 0.5) 0px 0px 0px 0.25rem; }

.btn-outline-secondary.disabled, .btn-outline-secondary:disabled { color: rgb(108, 117, 125); background-color: transparent; }

.btn-outline-success { color: rgb(25, 135, 84); border-color: rgb(25, 135, 84); }

.btn-outline-success:hover { color: rgb(255, 255, 255); background-color: rgb(25, 135, 84); border-color: rgb(25, 135, 84); }

.btn-check:focus + .btn-outline-success, .btn-outline-success:focus { box-shadow: rgba(25, 135, 84, 0.5) 0px 0px 0px 0.25rem; }

.btn-check:active + .btn-outline-success, .btn-check:checked + .btn-outline-success, .btn-outline-success.active, .btn-outline-success.dropdown-toggle.show, .btn-outline-success:active { color: rgb(255, 255, 255); background-color: rgb(25, 135, 84); border-color: rgb(25, 135, 84); }

.btn-check:active + .btn-outline-success:focus, .btn-check:checked + .btn-outline-success:focus, .btn-outline-success.active:focus, .btn-outline-success.dropdown-toggle.show:focus, .btn-outline-success:active:focus { box-shadow: rgba(25, 135, 84, 0.5) 0px 0px 0px 0.25rem; }

.btn-outline-success.disabled, .btn-outline-success:disabled { color: rgb(25, 135, 84); background-color: transparent; }

.btn-outline-info { color: rgb(13, 202, 240); border-color: rgb(13, 202, 240); }

.btn-outline-info:hover { color: rgb(0, 0, 0); background-color: rgb(13, 202, 240); border-color: rgb(13, 202, 240); }

.btn-check:focus + .btn-outline-info, .btn-outline-info:focus { box-shadow: rgba(13, 202, 240, 0.5) 0px 0px 0px 0.25rem; }

.btn-check:active + .btn-outline-info, .btn-check:checked + .btn-outline-info, .btn-outline-info.active, .btn-outline-info.dropdown-toggle.show, .btn-outline-info:active { color: rgb(0, 0, 0); background-color: rgb(13, 202, 240); border-color: rgb(13, 202, 240); }

.btn-check:active + .btn-outline-info:focus, .btn-check:checked + .btn-outline-info:focus, .btn-outline-info.active:focus, .btn-outline-info.dropdown-toggle.show:focus, .btn-outline-info:active:focus { box-shadow: rgba(13, 202, 240, 0.5) 0px 0px 0px 0.25rem; }

.btn-outline-info.disabled, .btn-outline-info:disabled { color: rgb(13, 202, 240); background-color: transparent; }

.btn-outline-warning { color: rgb(255, 193, 7); border-color: rgb(255, 193, 7); }

.btn-outline-warning:hover { color: rgb(0, 0, 0); background-color: rgb(255, 193, 7); border-color: rgb(255, 193, 7); }

.btn-check:focus + .btn-outline-warning, .btn-outline-warning:focus { box-shadow: rgba(255, 193, 7, 0.5) 0px 0px 0px 0.25rem; }

.btn-check:active + .btn-outline-warning, .btn-check:checked + .btn-outline-warning, .btn-outline-warning.active, .btn-outline-warning.dropdown-toggle.show, .btn-outline-warning:active { color: rgb(0, 0, 0); background-color: rgb(255, 193, 7); border-color: rgb(255, 193, 7); }

.btn-check:active + .btn-outline-warning:focus, .btn-check:checked + .btn-outline-warning:focus, .btn-outline-warning.active:focus, .btn-outline-warning.dropdown-toggle.show:focus, .btn-outline-warning:active:focus { box-shadow: rgba(255, 193, 7, 0.5) 0px 0px 0px 0.25rem; }

.btn-outline-warning.disabled, .btn-outline-warning:disabled { color: rgb(255, 193, 7); background-color: transparent; }

.btn-outline-danger { color: rgb(220, 53, 69); border-color: rgb(220, 53, 69); }

.btn-outline-danger:hover { color: rgb(255, 255, 255); background-color: rgb(220, 53, 69); border-color: rgb(220, 53, 69); }

.btn-check:focus + .btn-outline-danger, .btn-outline-danger:focus { box-shadow: rgba(220, 53, 69, 0.5) 0px 0px 0px 0.25rem; }

.btn-check:active + .btn-outline-danger, .btn-check:checked + .btn-outline-danger, .btn-outline-danger.active, .btn-outline-danger.dropdown-toggle.show, .btn-outline-danger:active { color: rgb(255, 255, 255); background-color: rgb(220, 53, 69); border-color: rgb(220, 53, 69); }

.btn-check:active + .btn-outline-danger:focus, .btn-check:checked + .btn-outline-danger:focus, .btn-outline-danger.active:focus, .btn-outline-danger.dropdown-toggle.show:focus, .btn-outline-danger:active:focus { box-shadow: rgba(220, 53, 69, 0.5) 0px 0px 0px 0.25rem; }

.btn-outline-danger.disabled, .btn-outline-danger:disabled { color: rgb(220, 53, 69); background-color: transparent; }

.btn-outline-light { color: rgb(248, 249, 250); border-color: rgb(248, 249, 250); }

.btn-outline-light:hover { color: rgb(0, 0, 0); background-color: rgb(248, 249, 250); border-color: rgb(248, 249, 250); }

.btn-check:focus + .btn-outline-light, .btn-outline-light:focus { box-shadow: rgba(248, 249, 250, 0.5) 0px 0px 0px 0.25rem; }

.btn-check:active + .btn-outline-light, .btn-check:checked + .btn-outline-light, .btn-outline-light.active, .btn-outline-light.dropdown-toggle.show, .btn-outline-light:active { color: rgb(0, 0, 0); background-color: rgb(248, 249, 250); border-color: rgb(248, 249, 250); }

.btn-check:active + .btn-outline-light:focus, .btn-check:checked + .btn-outline-light:focus, .btn-outline-light.active:focus, .btn-outline-light.dropdown-toggle.show:focus, .btn-outline-light:active:focus { box-shadow: rgba(248, 249, 250, 0.5) 0px 0px 0px 0.25rem; }

.btn-outline-light.disabled, .btn-outline-light:disabled { color: rgb(248, 249, 250); background-color: transparent; }

.btn-outline-dark { color: rgb(33, 37, 41); border-color: rgb(33, 37, 41); }

.btn-outline-dark:hover { color: rgb(255, 255, 255); background-color: rgb(33, 37, 41); border-color: rgb(33, 37, 41); }

.btn-check:focus + .btn-outline-dark, .btn-outline-dark:focus { box-shadow: rgba(33, 37, 41, 0.5) 0px 0px 0px 0.25rem; }

.btn-check:active + .btn-outline-dark, .btn-check:checked + .btn-outline-dark, .btn-outline-dark.active, .btn-outline-dark.dropdown-toggle.show, .btn-outline-dark:active { color: rgb(255, 255, 255); background-color: rgb(33, 37, 41); border-color: rgb(33, 37, 41); }

.btn-check:active + .btn-outline-dark:focus, .btn-check:checked + .btn-outline-dark:focus, .btn-outline-dark.active:focus, .btn-outline-dark.dropdown-toggle.show:focus, .btn-outline-dark:active:focus { box-shadow: rgba(33, 37, 41, 0.5) 0px 0px 0px 0.25rem; }

.btn-outline-dark.disabled, .btn-outline-dark:disabled { color: rgb(33, 37, 41); background-color: transparent; }

.btn-link { font-weight: 400; color: rgb(13, 110, 253); text-decoration: underline; }

.btn-link:hover { color: rgb(10, 88, 202); }

.btn-link.disabled, .btn-link:disabled { color: rgb(108, 117, 125); }

.btn-group-lg > .btn, .btn-lg { padding: 0.5rem 1rem; font-size: 1.25rem; border-radius: 0.3rem; }

.btn-group-sm > .btn, .btn-sm { padding: 0.25rem 0.5rem; font-size: 0.875rem; border-radius: 0.2rem; }

.fade { transition: opacity 0.15s linear 0s; }

@media (prefers-reduced-motion: reduce) {
  .fade { transition: none 0s ease 0s; }
}

.fade:not(.show) { opacity: 0; }

.collapse:not(.show) { display: none; }

.collapsing { height: 0px; overflow: hidden; transition: height 0.35s ease 0s; }

@media (prefers-reduced-motion: reduce) {
  .collapsing { transition: none 0s ease 0s; }
}

.dropdown, .dropend, .dropstart, .dropup { position: relative; }

.dropdown-toggle { white-space: nowrap; }

.dropdown-toggle::after { display: inline-block; margin-left: 0.255em; vertical-align: 0.255em; content: ""; border-width: 0.3em 0.3em 0px; border-top-style: solid; border-top-color: initial; border-right-style: solid; border-right-color: transparent; border-bottom-style: initial; border-bottom-color: initial; border-left-style: solid; border-left-color: transparent; }

.dropdown-toggle:empty::after { margin-left: 0px; }

.dropdown-menu { position: absolute; z-index: 1000; display: none; min-width: 10rem; padding: 0.5rem 0px; margin: 0px; font-size: 1rem; color: rgb(33, 37, 41); text-align: left; list-style: none; background-color: rgb(255, 255, 255); background-clip: padding-box; border: 1px solid rgba(0, 0, 0, 0.15); border-radius: 0.25rem; }

.dropdown-menu[data-bs-popper] { top: 100%; left: 0px; margin-top: 0.125rem; }

.dropdown-menu-start { --bs-position: start; }

.dropdown-menu-start[data-bs-popper] { right: auto; left: 0px; }

.dropdown-menu-end { --bs-position: end; }

.dropdown-menu-end[data-bs-popper] { right: 0px; left: auto; }

@media (min-width: 576px) {
  .dropdown-menu-sm-start { --bs-position: start; }
  .dropdown-menu-sm-start[data-bs-popper] { right: auto; left: 0px; }
  .dropdown-menu-sm-end { --bs-position: end; }
  .dropdown-menu-sm-end[data-bs-popper] { right: 0px; left: auto; }
}

@media (min-width: 768px) {
  .dropdown-menu-md-start { --bs-position: start; }
  .dropdown-menu-md-start[data-bs-popper] { right: auto; left: 0px; }
  .dropdown-menu-md-end { --bs-position: end; }
  .dropdown-menu-md-end[data-bs-popper] { right: 0px; left: auto; }
}

@media (min-width: 992px) {
  .dropdown-menu-lg-start { --bs-position: start; }
  .dropdown-menu-lg-start[data-bs-popper] { right: auto; left: 0px; }
  .dropdown-menu-lg-end { --bs-position: end; }
  .dropdown-menu-lg-end[data-bs-popper] { right: 0px; left: auto; }
}

@media (min-width: 1200px) {
  .dropdown-menu-xl-start { --bs-position: start; }
  .dropdown-menu-xl-start[data-bs-popper] { right: auto; left: 0px; }
  .dropdown-menu-xl-end { --bs-position: end; }
  .dropdown-menu-xl-end[data-bs-popper] { right: 0px; left: auto; }
}

@media (min-width: 1400px) {
  .dropdown-menu-xxl-start { --bs-position: start; }
  .dropdown-menu-xxl-start[data-bs-popper] { right: auto; left: 0px; }
  .dropdown-menu-xxl-end { --bs-position: end; }
  .dropdown-menu-xxl-end[data-bs-popper] { right: 0px; left: auto; }
}

.dropup .dropdown-menu[data-bs-popper] { top: auto; bottom: 100%; margin-top: 0px; margin-bottom: 0.125rem; }

.dropup .dropdown-toggle::after { display: inline-block; margin-left: 0.255em; vertical-align: 0.255em; content: ""; border-width: 0px 0.3em 0.3em; border-top-style: initial; border-top-color: initial; border-right-style: solid; border-right-color: transparent; border-bottom-style: solid; border-bottom-color: initial; border-left-style: solid; border-left-color: transparent; }

.dropup .dropdown-toggle:empty::after { margin-left: 0px; }

.dropend .dropdown-menu[data-bs-popper] { top: 0px; right: auto; left: 100%; margin-top: 0px; margin-left: 0.125rem; }

.dropend .dropdown-toggle::after { display: inline-block; margin-left: 0.255em; vertical-align: 0.255em; content: ""; border-width: 0.3em 0px 0.3em 0.3em; border-top-style: solid; border-top-color: transparent; border-right-style: initial; border-right-color: initial; border-bottom-style: solid; border-bottom-color: transparent; border-left-style: solid; border-left-color: initial; }

.dropend .dropdown-toggle:empty::after { margin-left: 0px; }

.dropend .dropdown-toggle::after { vertical-align: 0px; }

.dropstart .dropdown-menu[data-bs-popper] { top: 0px; right: 100%; left: auto; margin-top: 0px; margin-right: 0.125rem; }

.dropstart .dropdown-toggle::after { display: inline-block; margin-left: 0.255em; vertical-align: 0.255em; content: ""; }

.dropstart .dropdown-toggle::after { display: none; }

.dropstart .dropdown-toggle::before { display: inline-block; margin-right: 0.255em; vertical-align: 0.255em; content: ""; border-top: 0.3em solid transparent; border-right: 0.3em solid; border-bottom: 0.3em solid transparent; }

.dropstart .dropdown-toggle:empty::after { margin-left: 0px; }

.dropstart .dropdown-toggle::before { vertical-align: 0px; }

.dropdown-divider { height: 0px; margin: 0.5rem 0px; overflow: hidden; border-top: 1px solid rgba(0, 0, 0, 0.15); }

.dropdown-item { display: block; width: 100%; padding: 0.25rem 1rem; clear: both; font-weight: 400; color: rgb(33, 37, 41); text-align: inherit; text-decoration: none; white-space: nowrap; background-color: transparent; border: 0px; }

.dropdown-item:focus, .dropdown-item:hover { color: rgb(30, 33, 37); background-color: rgb(233, 236, 239); }

.dropdown-item.active, .dropdown-item:active { color: rgb(255, 255, 255); text-decoration: none; background-color: rgb(13, 110, 253); }

.dropdown-item.disabled, .dropdown-item:disabled { color: rgb(173, 181, 189); pointer-events: none; background-color: transparent; }

.dropdown-menu.show { display: block; }

.dropdown-header { display: block; padding: 0.5rem 1rem; margin-bottom: 0px; font-size: 0.875rem; color: rgb(108, 117, 125); white-space: nowrap; }

.dropdown-item-text { display: block; padding: 0.25rem 1rem; color: rgb(33, 37, 41); }

.dropdown-menu-dark { color: rgb(222, 226, 230); background-color: rgb(52, 58, 64); border-color: rgba(0, 0, 0, 0.15); }

.dropdown-menu-dark .dropdown-item { color: rgb(222, 226, 230); }

.dropdown-menu-dark .dropdown-item:focus, .dropdown-menu-dark .dropdown-item:hover { color: rgb(255, 255, 255); background-color: rgba(255, 255, 255, 0.15); }

.dropdown-menu-dark .dropdown-item.active, .dropdown-menu-dark .dropdown-item:active { color: rgb(255, 255, 255); background-color: rgb(13, 110, 253); }

.dropdown-menu-dark .dropdown-item.disabled, .dropdown-menu-dark .dropdown-item:disabled { color: rgb(173, 181, 189); }

.dropdown-menu-dark .dropdown-divider { border-color: rgba(0, 0, 0, 0.15); }

.dropdown-menu-dark .dropdown-item-text { color: rgb(222, 226, 230); }

.dropdown-menu-dark .dropdown-header { color: rgb(173, 181, 189); }

.btn-group, .btn-group-vertical { position: relative; display: inline-flex; vertical-align: middle; }

.btn-group-vertical > .btn, .btn-group > .btn { position: relative; flex: 1 1 auto; }

.btn-group-vertical > .btn-check:checked + .btn, .btn-group-vertical > .btn-check:focus + .btn, .btn-group-vertical > .btn.active, .btn-group-vertical > .btn:active, .btn-group-vertical > .btn:focus, .btn-group-vertical > .btn:hover, .btn-group > .btn-check:checked + .btn, .btn-group > .btn-check:focus + .btn, .btn-group > .btn.active, .btn-group > .btn:active, .btn-group > .btn:focus, .btn-group > .btn:hover { z-index: 1; }

.btn-toolbar { display: flex; flex-wrap: wrap; justify-content: flex-start; }

.btn-toolbar .input-group { width: auto; }

.btn-group > .btn-group:not(:first-child), .btn-group > .btn:not(:first-child) { margin-left: -1px; }

.btn-group > .btn-group:not(:last-child) > .btn, .btn-group > .btn:not(:last-child):not(.dropdown-toggle) { border-top-right-radius: 0px; border-bottom-right-radius: 0px; }

.btn-group > .btn-group:not(:first-child) > .btn, .btn-group > .btn:nth-child(n+3), .btn-group > :not(.btn-check) + .btn { border-top-left-radius: 0px; border-bottom-left-radius: 0px; }

.dropdown-toggle-split { padding-right: 0.5625rem; padding-left: 0.5625rem; }

.dropdown-toggle-split::after, .dropend .dropdown-toggle-split::after, .dropup .dropdown-toggle-split::after { margin-left: 0px; }

.dropstart .dropdown-toggle-split::before { margin-right: 0px; }

.btn-group-sm > .btn + .dropdown-toggle-split, .btn-sm + .dropdown-toggle-split { padding-right: 0.375rem; padding-left: 0.375rem; }

.btn-group-lg > .btn + .dropdown-toggle-split, .btn-lg + .dropdown-toggle-split { padding-right: 0.75rem; padding-left: 0.75rem; }

.btn-group-vertical { flex-direction: column; align-items: flex-start; justify-content: center; }

.btn-group-vertical > .btn, .btn-group-vertical > .btn-group { width: 100%; }

.btn-group-vertical > .btn-group:not(:first-child), .btn-group-vertical > .btn:not(:first-child) { margin-top: -1px; }

.btn-group-vertical > .btn-group:not(:last-child) > .btn, .btn-group-vertical > .btn:not(:last-child):not(.dropdown-toggle) { border-bottom-right-radius: 0px; border-bottom-left-radius: 0px; }

.btn-group-vertical > .btn-group:not(:first-child) > .btn, .btn-group-vertical > .btn ~ .btn { border-top-left-radius: 0px; border-top-right-radius: 0px; }

.nav { display: flex; flex-wrap: wrap; padding-left: 0px; margin-bottom: 0px; list-style: none; }

.nav-link { display: block; padding: 0.5rem 1rem; color: rgb(13, 110, 253); text-decoration: none; transition: color 0.15s ease-in-out 0s, background-color 0.15s ease-in-out 0s, border-color 0.15s ease-in-out 0s; }

@media (prefers-reduced-motion: reduce) {
  .nav-link { transition: none 0s ease 0s; }
}

.nav-link:focus, .nav-link:hover { color: rgb(10, 88, 202); }

.nav-link.disabled { color: rgb(108, 117, 125); pointer-events: none; cursor: default; }

.nav-tabs { border-bottom: 1px solid rgb(222, 226, 230); }

.nav-tabs .nav-link { margin-bottom: -1px; background: 0px 0px; border: 1px solid transparent; border-top-left-radius: 0.25rem; border-top-right-radius: 0.25rem; }

.nav-tabs .nav-link:focus, .nav-tabs .nav-link:hover { border-color: rgb(233, 236, 239) rgb(233, 236, 239) rgb(222, 226, 230); isolation: isolate; }

.nav-tabs .nav-link.disabled { color: rgb(108, 117, 125); background-color: transparent; border-color: transparent; }

.nav-tabs .nav-item.show .nav-link, .nav-tabs .nav-link.active { color: rgb(73, 80, 87); background-color: rgb(255, 255, 255); border-color: rgb(222, 226, 230) rgb(222, 226, 230) rgb(255, 255, 255); }

.nav-tabs .dropdown-menu { margin-top: -1px; border-top-left-radius: 0px; border-top-right-radius: 0px; }

.nav-pills .nav-link { background: 0px 0px; border: 0px; border-radius: 0.25rem; }

.nav-pills .nav-link.active, .nav-pills .show > .nav-link { color: rgb(255, 255, 255); background-color: rgb(13, 110, 253); }

.nav-fill .nav-item, .nav-fill > .nav-link { flex: 1 1 auto; text-align: center; }

.nav-justified .nav-item, .nav-justified > .nav-link { flex-basis: 0px; flex-grow: 1; text-align: center; }

.nav-fill .nav-item .nav-link, .nav-justified .nav-item .nav-link { width: 100%; }

.tab-content > .tab-pane { display: none; }

.tab-content > .active { display: block; }

.navbar { position: relative; display: flex; flex-wrap: wrap; align-items: center; justify-content: space-between; padding-top: 0.5rem; padding-bottom: 0.5rem; }

.navbar > .container, .navbar > .container-fluid, .navbar > .container-lg, .navbar > .container-md, .navbar > .container-sm, .navbar > .container-xl, .navbar > .container-xxl { display: flex; flex-wrap: inherit; align-items: center; justify-content: space-between; }

.navbar-brand { padding-top: 0.3125rem; padding-bottom: 0.3125rem; margin-right: 1rem; font-size: 1.25rem; text-decoration: none; white-space: nowrap; }

.navbar-nav { display: flex; flex-direction: column; padding-left: 0px; margin-bottom: 0px; list-style: none; }

.navbar-nav .nav-link { padding-right: 0px; padding-left: 0px; }

.navbar-nav .dropdown-menu { position: static; }

.navbar-text { padding-top: 0.5rem; padding-bottom: 0.5rem; }

.navbar-collapse { flex-basis: 100%; flex-grow: 1; align-items: center; }

.navbar-toggler { padding: 0.25rem 0.75rem; font-size: 1.25rem; line-height: 1; background-color: transparent; border: 1px solid transparent; border-radius: 0.25rem; transition: box-shadow 0.15s ease-in-out 0s; }

@media (prefers-reduced-motion: reduce) {
  .navbar-toggler { transition: none 0s ease 0s; }
}

.navbar-toggler:hover { text-decoration: none; }

.navbar-toggler:focus { text-decoration: none; outline: 0px; box-shadow: 0px 0px 0px 0.25rem; }

.navbar-toggler-icon { display: inline-block; width: 1.5em; height: 1.5em; vertical-align: middle; background-repeat: no-repeat; background-position: center center; background-size: 100%; }

.navbar-nav-scroll { max-height: var(--bs-scroll-height,75vh); overflow-y: auto; }

@media (min-width: 576px) {
  .navbar-expand-sm { flex-wrap: nowrap; justify-content: flex-start; }
  .navbar-expand-sm .navbar-nav { flex-direction: row; }
  .navbar-expand-sm .navbar-nav .dropdown-menu { position: absolute; }
  .navbar-expand-sm .navbar-nav .nav-link { padding-right: 0.5rem; padding-left: 0.5rem; }
  .navbar-expand-sm .navbar-nav-scroll { overflow: visible; }
  .navbar-expand-sm .navbar-collapse { display: flex !important; flex-basis: auto; }
  .navbar-expand-sm .navbar-toggler { display: none; }
}

@media (min-width: 768px) {
  .navbar-expand-md { flex-wrap: nowrap; justify-content: flex-start; }
  .navbar-expand-md .navbar-nav { flex-direction: row; }
  .navbar-expand-md .navbar-nav .dropdown-menu { position: absolute; }
  .navbar-expand-md .navbar-nav .nav-link { padding-right: 0.5rem; padding-left: 0.5rem; }
  .navbar-expand-md .navbar-nav-scroll { overflow: visible; }
  .navbar-expand-md .navbar-collapse { display: flex !important; flex-basis: auto; }
  .navbar-expand-md .navbar-toggler { display: none; }
}

@media (min-width: 992px) {
  .navbar-expand-lg { flex-wrap: nowrap; justify-content: flex-start; }
  .navbar-expand-lg .navbar-nav { flex-direction: row; }
  .navbar-expand-lg .navbar-nav .dropdown-menu { position: absolute; }
  .navbar-expand-lg .navbar-nav .nav-link { padding-right: 0.5rem; padding-left: 0.5rem; }
  .navbar-expand-lg .navbar-nav-scroll { overflow: visible; }
  .navbar-expand-lg .navbar-collapse { display: flex !important; flex-basis: auto; }
  .navbar-expand-lg .navbar-toggler { display: none; }
}

@media (min-width: 1200px) {
  .navbar-expand-xl { flex-wrap: nowrap; justify-content: flex-start; }
  .navbar-expand-xl .navbar-nav { flex-direction: row; }
  .navbar-expand-xl .navbar-nav .dropdown-menu { position: absolute; }
  .navbar-expand-xl .navbar-nav .nav-link { padding-right: 0.5rem; padding-left: 0.5rem; }
  .navbar-expand-xl .navbar-nav-scroll { overflow: visible; }
  .navbar-expand-xl .navbar-collapse { display: flex !important; flex-basis: auto; }
  .navbar-expand-xl .navbar-toggler { display: none; }
}

@media (min-width: 1400px) {
  .navbar-expand-xxl { flex-wrap: nowrap; justify-content: flex-start; }
  .navbar-expand-xxl .navbar-nav { flex-direction: row; }
  .navbar-expand-xxl .navbar-nav .dropdown-menu { position: absolute; }
  .navbar-expand-xxl .navbar-nav .nav-link { padding-right: 0.5rem; padding-left: 0.5rem; }
  .navbar-expand-xxl .navbar-nav-scroll { overflow: visible; }
  .navbar-expand-xxl .navbar-collapse { display: flex !important; flex-basis: auto; }
  .navbar-expand-xxl .navbar-toggler { display: none; }
}

.navbar-expand { flex-wrap: nowrap; justify-content: flex-start; }

.navbar-expand .navbar-nav { flex-direction: row; }

.navbar-expand .navbar-nav .dropdown-menu { position: absolute; }

.navbar-expand .navbar-nav .nav-link { padding-right: 0.5rem; padding-left: 0.5rem; }

.navbar-expand .navbar-nav-scroll { overflow: visible; }

.navbar-expand .navbar-collapse { display: flex !important; flex-basis: auto; }

.navbar-expand .navbar-toggler { display: none; }

.navbar-light .navbar-brand { color: rgba(0, 0, 0, 0.9); }

.navbar-light .navbar-brand:focus, .navbar-light .navbar-brand:hover { color: rgba(0, 0, 0, 0.9); }

.navbar-light .navbar-nav .nav-link { color: rgba(0, 0, 0, 0.55); }

.navbar-light .navbar-nav .nav-link:focus, .navbar-light .navbar-nav .nav-link:hover { color: rgba(0, 0, 0, 0.7); }

.navbar-light .navbar-nav .nav-link.disabled { color: rgba(0, 0, 0, 0.3); }

.navbar-light .navbar-nav .nav-link.active, .navbar-light .navbar-nav .show > .nav-link { color: rgba(0, 0, 0, 0.9); }

.navbar-light .navbar-toggler { color: rgba(0, 0, 0, 0.55); border-color: rgba(0, 0, 0, 0.1); }

.navbar-light .navbar-toggler-icon { background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 30 30'%3e%3cpath stroke='rgba%280, 0, 0, 0.55%29' stroke-linecap='round' stroke-miterlimit='10' stroke-width='2' d='M4 7h22M4 15h22M4 23h22'/%3e%3c/svg%3e"); }

.navbar-light .navbar-text { color: rgba(0, 0, 0, 0.55); }

.navbar-light .navbar-text a, .navbar-light .navbar-text a:focus, .navbar-light .navbar-text a:hover { color: rgba(0, 0, 0, 0.9); }

.navbar-dark .navbar-brand { color: rgb(255, 255, 255); }

.navbar-dark .navbar-brand:focus, .navbar-dark .navbar-brand:hover { color: rgb(255, 255, 255); }

.navbar-dark .navbar-nav .nav-link { color: rgba(255, 255, 255, 0.55); }

.navbar-dark .navbar-nav .nav-link:focus, .navbar-dark .navbar-nav .nav-link:hover { color: rgba(255, 255, 255, 0.75); }

.navbar-dark .navbar-nav .nav-link.disabled { color: rgba(255, 255, 255, 0.25); }

.navbar-dark .navbar-nav .nav-link.active, .navbar-dark .navbar-nav .show > .nav-link { color: rgb(255, 255, 255); }

.navbar-dark .navbar-toggler { color: rgba(255, 255, 255, 0.55); border-color: rgba(255, 255, 255, 0.1); }

.navbar-dark .navbar-toggler-icon { background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 30 30'%3e%3cpath stroke='rgba%28255, 255, 255, 0.55%29' stroke-linecap='round' stroke-miterlimit='10' stroke-width='2' d='M4 7h22M4 15h22M4 23h22'/%3e%3c/svg%3e"); }

.navbar-dark .navbar-text { color: rgba(255, 255, 255, 0.55); }

.navbar-dark .navbar-text a, .navbar-dark .navbar-text a:focus, .navbar-dark .navbar-text a:hover { color: rgb(255, 255, 255); }

.card { position: relative; display: flex; flex-direction: column; min-width: 0px; overflow-wrap: break-word; background-color: rgb(255, 255, 255); background-clip: border-box; border: 1px solid rgba(0, 0, 0, 0.125); border-radius: 0.25rem; }

.card > hr { margin-right: 0px; margin-left: 0px; }

.card > .list-group { border-top: inherit; border-bottom: inherit; }

.card > .list-group:first-child { border-top-width: 0px; border-top-left-radius: calc(-1px + 0.25rem); border-top-right-radius: calc(-1px + 0.25rem); }

.card > .list-group:last-child { border-bottom-width: 0px; border-bottom-right-radius: calc(-1px + 0.25rem); border-bottom-left-radius: calc(-1px + 0.25rem); }

.card > .card-header + .list-group, .card > .list-group + .card-footer { border-top: 0px; }

.card-body { flex: 1 1 auto; padding: 1rem; }

.card-title { margin-bottom: 0.5rem; }

.card-subtitle { margin-top: -0.25rem; margin-bottom: 0px; }

.card-text:last-child { margin-bottom: 0px; }

.card-link:hover { text-decoration: none; }

.card-link + .card-link { margin-left: 1rem; }

.card-header { padding: 0.5rem 1rem; margin-bottom: 0px; background-color: rgba(0, 0, 0, 0.03); border-bottom: 1px solid rgba(0, 0, 0, 0.125); }

.card-header:first-child { border-radius: calc(-1px + 0.25rem) calc(-1px + 0.25rem) 0px 0px; }

.card-footer { padding: 0.5rem 1rem; background-color: rgba(0, 0, 0, 0.03); border-top: 1px solid rgba(0, 0, 0, 0.125); }

.card-footer:last-child { border-radius: 0px 0px calc(-1px + 0.25rem) calc(-1px + 0.25rem); }

.card-header-tabs { margin-right: -0.5rem; margin-bottom: -0.5rem; margin-left: -0.5rem; border-bottom: 0px; }

.card-header-pills { margin-right: -0.5rem; margin-left: -0.5rem; }

.card-img-overlay { position: absolute; inset: 0px; padding: 1rem; border-radius: calc(-1px + 0.25rem); }

.card-img, .card-img-bottom, .card-img-top { width: 100%; }

.card-img, .card-img-top { border-top-left-radius: calc(-1px + 0.25rem); border-top-right-radius: calc(-1px + 0.25rem); }

.card-img, .card-img-bottom { border-bottom-right-radius: calc(-1px + 0.25rem); border-bottom-left-radius: calc(-1px + 0.25rem); }

.card-group > .card { margin-bottom: 0.75rem; }

@media (min-width: 576px) {
  .card-group { display: flex; flex-flow: wrap; }
  .card-group > .card { flex: 1 0 0%; margin-bottom: 0px; }
  .card-group > .card + .card { margin-left: 0px; border-left: 0px; }
  .card-group > .card:not(:last-child) { border-top-right-radius: 0px; border-bottom-right-radius: 0px; }
  .card-group > .card:not(:last-child) .card-header, .card-group > .card:not(:last-child) .card-img-top { border-top-right-radius: 0px; }
  .card-group > .card:not(:last-child) .card-footer, .card-group > .card:not(:last-child) .card-img-bottom { border-bottom-right-radius: 0px; }
  .card-group > .card:not(:first-child) { border-top-left-radius: 0px; border-bottom-left-radius: 0px; }
  .card-group > .card:not(:first-child) .card-header, .card-group > .card:not(:first-child) .card-img-top { border-top-left-radius: 0px; }
  .card-group > .card:not(:first-child) .card-footer, .card-group > .card:not(:first-child) .card-img-bottom { border-bottom-left-radius: 0px; }
}

.accordion-button { position: relative; display: flex; align-items: center; width: 100%; padding: 1rem 1.25rem; font-size: 1rem; color: rgb(33, 37, 41); text-align: left; background-color: rgb(255, 255, 255); border: 0px; border-radius: 0px; overflow-anchor: none; transition: color 0.15s ease-in-out 0s, background-color 0.15s ease-in-out 0s, border-color 0.15s ease-in-out 0s, box-shadow 0.15s ease-in-out 0s, border-radius 0.15s ease 0s; }

@media (prefers-reduced-motion: reduce) {
  .accordion-button { transition: none 0s ease 0s; }
}

.accordion-button:not(.collapsed) { color: rgb(12, 99, 228); background-color: rgb(231, 241, 255); box-shadow: rgba(0, 0, 0, 0.125) 0px -1px 0px inset; }

.accordion-button:not(.collapsed)::after { background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 16 16' fill='%230c63e4'%3e%3cpath fill-rule='evenodd' d='M1.646 4.646a.5.5 0 0 1 .708 0L8 10.293l5.646-5.647a.5.5 0 0 1 .708.708l-6 6a.5.5 0 0 1-.708 0l-6-6a.5.5 0 0 1 0-.708z'/%3e%3c/svg%3e"); transform: rotate(-180deg); }

.accordion-button::after { flex-shrink: 0; width: 1.25rem; height: 1.25rem; margin-left: auto; content: ""; background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 16 16' fill='%23212529'%3e%3cpath fill-rule='evenodd' d='M1.646 4.646a.5.5 0 0 1 .708 0L8 10.293l5.646-5.647a.5.5 0 0 1 .708.708l-6 6a.5.5 0 0 1-.708 0l-6-6a.5.5 0 0 1 0-.708z'/%3e%3c/svg%3e"); background-repeat: no-repeat; background-size: 1.25rem; transition: transform 0.2s ease-in-out 0s; }

@media (prefers-reduced-motion: reduce) {
  .accordion-button::after { transition: none 0s ease 0s; }
}

.accordion-button:hover { z-index: 2; }

.accordion-button:focus { z-index: 3; border-color: rgb(134, 183, 254); outline: 0px; box-shadow: rgba(13, 110, 253, 0.25) 0px 0px 0px 0.25rem; }

.accordion-header { margin-bottom: 0px; }

.accordion-item { background-color: rgb(255, 255, 255); border: 1px solid rgba(0, 0, 0, 0.125); }

.accordion-item:first-of-type { border-top-left-radius: 0.25rem; border-top-right-radius: 0.25rem; }

.accordion-item:first-of-type .accordion-button { border-top-left-radius: calc(-1px + 0.25rem); border-top-right-radius: calc(-1px + 0.25rem); }

.accordion-item:not(:first-of-type) { border-top: 0px; }

.accordion-item:last-of-type { border-bottom-right-radius: 0.25rem; border-bottom-left-radius: 0.25rem; }

.accordion-item:last-of-type .accordion-button.collapsed { border-bottom-right-radius: calc(-1px + 0.25rem); border-bottom-left-radius: calc(-1px + 0.25rem); }

.accordion-item:last-of-type .accordion-collapse { border-bottom-right-radius: 0.25rem; border-bottom-left-radius: 0.25rem; }

.accordion-body { padding: 1rem 1.25rem; }

.accordion-flush .accordion-collapse { border-width: 0px; }

.accordion-flush .accordion-item { border-right: 0px; border-left: 0px; border-radius: 0px; }

.accordion-flush .accordion-item:first-child { border-top: 0px; }

.accordion-flush .accordion-item:last-child { border-bottom: 0px; }

.accordion-flush .accordion-item .accordion-button { border-radius: 0px; }

.breadcrumb { display: flex; flex-wrap: wrap; padding: 0px; margin-bottom: 1rem; list-style: none; }

.breadcrumb-item + .breadcrumb-item { padding-left: 0.5rem; }

.breadcrumb-item + .breadcrumb-item::before { float: left; padding-right: 0.5rem; color: rgb(108, 117, 125); content: var(--bs-breadcrumb-divider, "/"); }

.breadcrumb-item.active { color: rgb(108, 117, 125); }

.pagination { display: flex; padding-left: 0px; list-style: none; }

.page-link { position: relative; display: block; color: rgb(13, 110, 253); text-decoration: none; background-color: rgb(255, 255, 255); border: 1px solid rgb(222, 226, 230); transition: color 0.15s ease-in-out 0s, background-color 0.15s ease-in-out 0s, border-color 0.15s ease-in-out 0s, box-shadow 0.15s ease-in-out 0s; }

@media (prefers-reduced-motion: reduce) {
  .page-link { transition: none 0s ease 0s; }
}

.page-link:hover { z-index: 2; color: rgb(10, 88, 202); background-color: rgb(233, 236, 239); border-color: rgb(222, 226, 230); }

.page-link:focus { z-index: 3; color: rgb(10, 88, 202); background-color: rgb(233, 236, 239); outline: 0px; box-shadow: rgba(13, 110, 253, 0.25) 0px 0px 0px 0.25rem; }

.page-item:not(:first-child) .page-link { margin-left: -1px; }

.page-item.active .page-link { z-index: 3; color: rgb(255, 255, 255); background-color: rgb(13, 110, 253); border-color: rgb(13, 110, 253); }

.page-item.disabled .page-link { color: rgb(108, 117, 125); pointer-events: none; background-color: rgb(255, 255, 255); border-color: rgb(222, 226, 230); }

.page-link { padding: 0.375rem 0.75rem; }

.page-item:first-child .page-link { border-top-left-radius: 0.25rem; border-bottom-left-radius: 0.25rem; }

.page-item:last-child .page-link { border-top-right-radius: 0.25rem; border-bottom-right-radius: 0.25rem; }

.pagination-lg .page-link { padding: 0.75rem 1.5rem; font-size: 1.25rem; }

.pagination-lg .page-item:first-child .page-link { border-top-left-radius: 0.3rem; border-bottom-left-radius: 0.3rem; }

.pagination-lg .page-item:last-child .page-link { border-top-right-radius: 0.3rem; border-bottom-right-radius: 0.3rem; }

.pagination-sm .page-link { padding: 0.25rem 0.5rem; font-size: 0.875rem; }

.pagination-sm .page-item:first-child .page-link { border-top-left-radius: 0.2rem; border-bottom-left-radius: 0.2rem; }

.pagination-sm .page-item:last-child .page-link { border-top-right-radius: 0.2rem; border-bottom-right-radius: 0.2rem; }

.badge { display: inline-block; padding: 0.35em 0.65em; font-size: 0.75em; font-weight: 700; line-height: 1; color: rgb(255, 255, 255); text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: 0.25rem; }

.badge:empty { display: none; }

.btn .badge { position: relative; top: -1px; }

.alert { position: relative; padding: 1rem; margin-bottom: 1rem; border: 1px solid transparent; border-radius: 0.25rem; }

.alert-heading { color: inherit; }

.alert-link { font-weight: 700; }

.alert-dismissible { padding-right: 3rem; }

.alert-dismissible .btn-close { position: absolute; top: 0px; right: 0px; z-index: 2; padding: 1.25rem 1rem; }

.alert-primary { color: rgb(8, 66, 152); background-color: rgb(207, 226, 255); border-color: rgb(182, 212, 254); }

.alert-primary .alert-link { color: rgb(6, 53, 122); }

.alert-secondary { color: rgb(65, 70, 75); background-color: rgb(226, 227, 229); border-color: rgb(211, 214, 216); }

.alert-secondary .alert-link { color: rgb(52, 56, 60); }

.alert-success { color: rgb(15, 81, 50); background-color: rgb(209, 231, 221); border-color: rgb(186, 219, 204); }

.alert-success .alert-link { color: rgb(12, 65, 40); }

.alert-info { color: rgb(5, 81, 96); background-color: rgb(207, 244, 252); border-color: rgb(182, 239, 251); }

.alert-info .alert-link { color: rgb(4, 65, 77); }

.alert-warning { color: rgb(102, 77, 3); background-color: rgb(255, 243, 205); border-color: rgb(255, 236, 181); }

.alert-warning .alert-link { color: rgb(82, 62, 2); }

.alert-danger { color: rgb(132, 32, 41); background-color: rgb(248, 215, 218); border-color: rgb(245, 194, 199); }

.alert-danger .alert-link { color: rgb(106, 26, 33); }

.alert-light { color: rgb(99, 100, 100); background-color: rgb(254, 254, 254); border-color: rgb(253, 253, 254); }

.alert-light .alert-link { color: rgb(79, 80, 80); }

.alert-dark { color: rgb(20, 22, 25); background-color: rgb(211, 211, 212); border-color: rgb(188, 190, 191); }

.alert-dark .alert-link { color: rgb(16, 18, 20); }

@-webkit-keyframes progress-bar-stripes { 
  0% { background-position-x: 1rem; }
}

@keyframes progress-bar-stripes { 
  0% { background-position-x: 1rem; }
}

.progress { display: flex; height: 1rem; overflow: hidden; font-size: 0.75rem; background-color: rgb(233, 236, 239); border-radius: 0.25rem; }

.progress-bar { display: flex; flex-direction: column; justify-content: center; overflow: hidden; color: rgb(255, 255, 255); text-align: center; white-space: nowrap; background-color: rgb(13, 110, 253); transition: width 0.6s ease 0s; }

@media (prefers-reduced-motion: reduce) {
  .progress-bar { transition: none 0s ease 0s; }
}

.progress-bar-striped { background-image: linear-gradient(45deg, rgba(255, 255, 255, 0.15) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, 0.15) 50%, rgba(255, 255, 255, 0.15) 75%, transparent 75%, transparent); background-size: 1rem 1rem; }

.progress-bar-animated { animation: 1s linear 0s infinite normal none running progress-bar-stripes; }

@media (prefers-reduced-motion: reduce) {
  .progress-bar-animated { animation: auto ease 0s 1 normal none running none; }
}

.list-group { display: flex; flex-direction: column; padding-left: 0px; margin-bottom: 0px; border-radius: 0.25rem; }

.list-group-numbered { list-style-type: none; counter-reset: section 0; }

.list-group-numbered > li::before { content: counters(section, ".") ". "; counter-increment: section 1; }

.list-group-item-action { width: 100%; color: rgb(73, 80, 87); text-align: inherit; }

.list-group-item-action:focus, .list-group-item-action:hover { z-index: 1; color: rgb(73, 80, 87); text-decoration: none; background-color: rgb(248, 249, 250); }

.list-group-item-action:active { color: rgb(33, 37, 41); background-color: rgb(233, 236, 239); }

.list-group-item { position: relative; display: block; padding: 0.5rem 1rem; color: rgb(33, 37, 41); text-decoration: none; background-color: rgb(255, 255, 255); border: 1px solid rgba(0, 0, 0, 0.125); }

.list-group-item:first-child { border-top-left-radius: inherit; border-top-right-radius: inherit; }

.list-group-item:last-child { border-bottom-right-radius: inherit; border-bottom-left-radius: inherit; }

.list-group-item.disabled, .list-group-item:disabled { color: rgb(108, 117, 125); pointer-events: none; background-color: rgb(255, 255, 255); }

.list-group-item.active { z-index: 2; color: rgb(255, 255, 255); background-color: rgb(13, 110, 253); border-color: rgb(13, 110, 253); }

.list-group-item + .list-group-item { border-top-width: 0px; }

.list-group-item + .list-group-item.active { margin-top: -1px; border-top-width: 1px; }

.list-group-horizontal { flex-direction: row; }

.list-group-horizontal > .list-group-item:first-child { border-bottom-left-radius: 0.25rem; border-top-right-radius: 0px; }

.list-group-horizontal > .list-group-item:last-child { border-top-right-radius: 0.25rem; border-bottom-left-radius: 0px; }

.list-group-horizontal > .list-group-item.active { margin-top: 0px; }

.list-group-horizontal > .list-group-item + .list-group-item { border-top-width: 1px; border-left-width: 0px; }

.list-group-horizontal > .list-group-item + .list-group-item.active { margin-left: -1px; border-left-width: 1px; }

@media (min-width: 576px) {
  .list-group-horizontal-sm { flex-direction: row; }
  .list-group-horizontal-sm > .list-group-item:first-child { border-bottom-left-radius: 0.25rem; border-top-right-radius: 0px; }
  .list-group-horizontal-sm > .list-group-item:last-child { border-top-right-radius: 0.25rem; border-bottom-left-radius: 0px; }
  .list-group-horizontal-sm > .list-group-item.active { margin-top: 0px; }
  .list-group-horizontal-sm > .list-group-item + .list-group-item { border-top-width: 1px; border-left-width: 0px; }
  .list-group-horizontal-sm > .list-group-item + .list-group-item.active { margin-left: -1px; border-left-width: 1px; }
}

@media (min-width: 768px) {
  .list-group-horizontal-md { flex-direction: row; }
  .list-group-horizontal-md > .list-group-item:first-child { border-bottom-left-radius: 0.25rem; border-top-right-radius: 0px; }
  .list-group-horizontal-md > .list-group-item:last-child { border-top-right-radius: 0.25rem; border-bottom-left-radius: 0px; }
  .list-group-horizontal-md > .list-group-item.active { margin-top: 0px; }
  .list-group-horizontal-md > .list-group-item + .list-group-item { border-top-width: 1px; border-left-width: 0px; }
  .list-group-horizontal-md > .list-group-item + .list-group-item.active { margin-left: -1px; border-left-width: 1px; }
}

@media (min-width: 992px) {
  .list-group-horizontal-lg { flex-direction: row; }
  .list-group-horizontal-lg > .list-group-item:first-child { border-bottom-left-radius: 0.25rem; border-top-right-radius: 0px; }
  .list-group-horizontal-lg > .list-group-item:last-child { border-top-right-radius: 0.25rem; border-bottom-left-radius: 0px; }
  .list-group-horizontal-lg > .list-group-item.active { margin-top: 0px; }
  .list-group-horizontal-lg > .list-group-item + .list-group-item { border-top-width: 1px; border-left-width: 0px; }
  .list-group-horizontal-lg > .list-group-item + .list-group-item.active { margin-left: -1px; border-left-width: 1px; }
}

@media (min-width: 1200px) {
  .list-group-horizontal-xl { flex-direction: row; }
  .list-group-horizontal-xl > .list-group-item:first-child { border-bottom-left-radius: 0.25rem; border-top-right-radius: 0px; }
  .list-group-horizontal-xl > .list-group-item:last-child { border-top-right-radius: 0.25rem; border-bottom-left-radius: 0px; }
  .list-group-horizontal-xl > .list-group-item.active { margin-top: 0px; }
  .list-group-horizontal-xl > .list-group-item + .list-group-item { border-top-width: 1px; border-left-width: 0px; }
  .list-group-horizontal-xl > .list-group-item + .list-group-item.active { margin-left: -1px; border-left-width: 1px; }
}

@media (min-width: 1400px) {
  .list-group-horizontal-xxl { flex-direction: row; }
  .list-group-horizontal-xxl > .list-group-item:first-child { border-bottom-left-radius: 0.25rem; border-top-right-radius: 0px; }
  .list-group-horizontal-xxl > .list-group-item:last-child { border-top-right-radius: 0.25rem; border-bottom-left-radius: 0px; }
  .list-group-horizontal-xxl > .list-group-item.active { margin-top: 0px; }
  .list-group-horizontal-xxl > .list-group-item + .list-group-item { border-top-width: 1px; border-left-width: 0px; }
  .list-group-horizontal-xxl > .list-group-item + .list-group-item.active { margin-left: -1px; border-left-width: 1px; }
}

.list-group-flush { border-radius: 0px; }

.list-group-flush > .list-group-item { border-width: 0px 0px 1px; }

.list-group-flush > .list-group-item:last-child { border-bottom-width: 0px; }

.list-group-item-primary { color: rgb(8, 66, 152); background-color: rgb(207, 226, 255); }

.list-group-item-primary.list-group-item-action:focus, .list-group-item-primary.list-group-item-action:hover { color: rgb(8, 66, 152); background-color: rgb(186, 203, 230); }

.list-group-item-primary.list-group-item-action.active { color: rgb(255, 255, 255); background-color: rgb(8, 66, 152); border-color: rgb(8, 66, 152); }

.list-group-item-secondary { color: rgb(65, 70, 75); background-color: rgb(226, 227, 229); }

.list-group-item-secondary.list-group-item-action:focus, .list-group-item-secondary.list-group-item-action:hover { color: rgb(65, 70, 75); background-color: rgb(203, 204, 206); }

.list-group-item-secondary.list-group-item-action.active { color: rgb(255, 255, 255); background-color: rgb(65, 70, 75); border-color: rgb(65, 70, 75); }

.list-group-item-success { color: rgb(15, 81, 50); background-color: rgb(209, 231, 221); }

.list-group-item-success.list-group-item-action:focus, .list-group-item-success.list-group-item-action:hover { color: rgb(15, 81, 50); background-color: rgb(188, 208, 199); }

.list-group-item-success.list-group-item-action.active { color: rgb(255, 255, 255); background-color: rgb(15, 81, 50); border-color: rgb(15, 81, 50); }

.list-group-item-info { color: rgb(5, 81, 96); background-color: rgb(207, 244, 252); }

.list-group-item-info.list-group-item-action:focus, .list-group-item-info.list-group-item-action:hover { color: rgb(5, 81, 96); background-color: rgb(186, 220, 227); }

.list-group-item-info.list-group-item-action.active { color: rgb(255, 255, 255); background-color: rgb(5, 81, 96); border-color: rgb(5, 81, 96); }

.list-group-item-warning { color: rgb(102, 77, 3); background-color: rgb(255, 243, 205); }

.list-group-item-warning.list-group-item-action:focus, .list-group-item-warning.list-group-item-action:hover { color: rgb(102, 77, 3); background-color: rgb(230, 219, 185); }

.list-group-item-warning.list-group-item-action.active { color: rgb(255, 255, 255); background-color: rgb(102, 77, 3); border-color: rgb(102, 77, 3); }

.list-group-item-danger { color: rgb(132, 32, 41); background-color: rgb(248, 215, 218); }

.list-group-item-danger.list-group-item-action:focus, .list-group-item-danger.list-group-item-action:hover { color: rgb(132, 32, 41); background-color: rgb(223, 194, 196); }

.list-group-item-danger.list-group-item-action.active { color: rgb(255, 255, 255); background-color: rgb(132, 32, 41); border-color: rgb(132, 32, 41); }

.list-group-item-light { color: rgb(99, 100, 100); background-color: rgb(254, 254, 254); }

.list-group-item-light.list-group-item-action:focus, .list-group-item-light.list-group-item-action:hover { color: rgb(99, 100, 100); background-color: rgb(229, 229, 229); }

.list-group-item-light.list-group-item-action.active { color: rgb(255, 255, 255); background-color: rgb(99, 100, 100); border-color: rgb(99, 100, 100); }

.list-group-item-dark { color: rgb(20, 22, 25); background-color: rgb(211, 211, 212); }

.list-group-item-dark.list-group-item-action:focus, .list-group-item-dark.list-group-item-action:hover { color: rgb(20, 22, 25); background-color: rgb(190, 190, 191); }

.list-group-item-dark.list-group-item-action.active { color: rgb(255, 255, 255); background-color: rgb(20, 22, 25); border-color: rgb(20, 22, 25); }

.btn-close { box-sizing: content-box; width: 1em; height: 1em; padding: 0.25em; color: rgb(0, 0, 0); background: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 16 16' fill='%23000'%3e%3cpath d='M.293.293a1 1 0 011.414 0L8 6.586 14.293.293a1 1 0 111.414 1.414L9.414 8l6.293 6.293a1 1 0 01-1.414 1.414L8 9.414l-6.293 6.293a1 1 0 01-1.414-1.414L6.586 8 .293 1.707a1 1 0 010-1.414z'/%3e%3c/svg%3e") center center / 1em no-repeat transparent; border: 0px; border-radius: 0.25rem; opacity: 0.5; }

.btn-close:hover { color: rgb(0, 0, 0); text-decoration: none; opacity: 0.75; }

.btn-close:focus { outline: 0px; box-shadow: rgba(13, 110, 253, 0.25) 0px 0px 0px 0.25rem; opacity: 1; }

.btn-close.disabled, .btn-close:disabled { pointer-events: none; user-select: none; opacity: 0.25; }

.btn-close-white { filter: invert(1) grayscale(100%) brightness(200%); }

.toast { width: 350px; max-width: 100%; font-size: 0.875rem; pointer-events: auto; background-color: rgba(255, 255, 255, 0.85); background-clip: padding-box; border: 1px solid rgba(0, 0, 0, 0.1); box-shadow: rgba(0, 0, 0, 0.15) 0px 0.5rem 1rem; border-radius: 0.25rem; }

.toast:not(.showing):not(.show) { opacity: 0; }

.toast.hide { display: none; }

.toast-container { width: max-content; max-width: 100%; pointer-events: none; }

.toast-container > :not(:last-child) { margin-bottom: 0.75rem; }

.toast-header { display: flex; align-items: center; padding: 0.5rem 0.75rem; color: rgb(108, 117, 125); background-color: rgba(255, 255, 255, 0.85); background-clip: padding-box; border-bottom: 1px solid rgba(0, 0, 0, 0.05); border-top-left-radius: calc(-1px + 0.25rem); border-top-right-radius: calc(-1px + 0.25rem); }

.toast-header .btn-close { margin-right: -0.375rem; margin-left: 0.75rem; }

.toast-body { padding: 0.75rem; overflow-wrap: break-word; }

.modal { position: fixed; top: 0px; left: 0px; z-index: 1060; display: none; width: 100%; height: 100%; overflow: hidden auto; outline: 0px; }

.modal-dialog { position: relative; width: auto; margin: 0.5rem; pointer-events: none; }

.modal.fade .modal-dialog { transition: transform 0.3s ease-out 0s; transform: translate(0px, -50px); }

@media (prefers-reduced-motion: reduce) {
  .modal.fade .modal-dialog { transition: none 0s ease 0s; }
}

.modal.show .modal-dialog { transform: none; }

.modal.modal-static .modal-dialog { transform: scale(1.02); }

.modal-dialog-scrollable { height: calc(100% - 1rem); }

.modal-dialog-scrollable .modal-content { max-height: 100%; overflow: hidden; }

.modal-dialog-scrollable .modal-body { overflow-y: auto; }

.modal-dialog-centered { display: flex; align-items: center; min-height: calc(100% - 1rem); }

.modal-content { position: relative; display: flex; flex-direction: column; width: 100%; pointer-events: auto; background-color: rgb(255, 255, 255); background-clip: padding-box; border: 1px solid rgba(0, 0, 0, 0.2); border-radius: 0.3rem; outline: 0px; }

.modal-backdrop { position: fixed; top: 0px; left: 0px; z-index: 1040; width: 100vw; height: 100vh; background-color: rgb(0, 0, 0); }

.modal-backdrop.fade { opacity: 0; }

.modal-backdrop.show { opacity: 0.5; }

.modal-header { display: flex; flex-shrink: 0; align-items: center; justify-content: space-between; padding: 1rem; border-bottom: 1px solid rgb(222, 226, 230); border-top-left-radius: calc(-1px + 0.3rem); border-top-right-radius: calc(-1px + 0.3rem); }

.modal-header .btn-close { padding: 0.5rem; margin: -0.5rem -0.5rem -0.5rem auto; }

.modal-title { margin-bottom: 0px; line-height: 1.5; }

.modal-body { position: relative; flex: 1 1 auto; padding: 1rem; }

.modal-footer { display: flex; flex-wrap: wrap; flex-shrink: 0; align-items: center; justify-content: flex-end; padding: 0.75rem; border-top: 1px solid rgb(222, 226, 230); border-bottom-right-radius: calc(-1px + 0.3rem); border-bottom-left-radius: calc(-1px + 0.3rem); }

.modal-footer > * { margin: 0.25rem; }

@media (min-width: 576px) {
  .modal-dialog { max-width: 500px; margin: 1.75rem auto; }
  .modal-dialog-scrollable { height: calc(100% - 3.5rem); }
  .modal-dialog-centered { min-height: calc(100% - 3.5rem); }
  .modal-sm { max-width: 300px; }
}

@media (min-width: 992px) {
  .modal-lg, .modal-xl { max-width: 800px; }
}

@media (min-width: 1200px) {
  .modal-xl { max-width: 1140px; }
}

.modal-fullscreen { width: 100vw; max-width: none; height: 100%; margin: 0px; }

.modal-fullscreen .modal-content { height: 100%; border: 0px; border-radius: 0px; }

.modal-fullscreen .modal-header { border-radius: 0px; }

.modal-fullscreen .modal-body { overflow-y: auto; }

.modal-fullscreen .modal-footer { border-radius: 0px; }

@media (max-width: 575.98px) {
  .modal-fullscreen-sm-down { width: 100vw; max-width: none; height: 100%; margin: 0px; }
  .modal-fullscreen-sm-down .modal-content { height: 100%; border: 0px; border-radius: 0px; }
  .modal-fullscreen-sm-down .modal-header { border-radius: 0px; }
  .modal-fullscreen-sm-down .modal-body { overflow-y: auto; }
  .modal-fullscreen-sm-down .modal-footer { border-radius: 0px; }
}

@media (max-width: 767.98px) {
  .modal-fullscreen-md-down { width: 100vw; max-width: none; height: 100%; margin: 0px; }
  .modal-fullscreen-md-down .modal-content { height: 100%; border: 0px; border-radius: 0px; }
  .modal-fullscreen-md-down .modal-header { border-radius: 0px; }
  .modal-fullscreen-md-down .modal-body { overflow-y: auto; }
  .modal-fullscreen-md-down .modal-footer { border-radius: 0px; }
}

@media (max-width: 991.98px) {
  .modal-fullscreen-lg-down { width: 100vw; max-width: none; height: 100%; margin: 0px; }
  .modal-fullscreen-lg-down .modal-content { height: 100%; border: 0px; border-radius: 0px; }
  .modal-fullscreen-lg-down .modal-header { border-radius: 0px; }
  .modal-fullscreen-lg-down .modal-body { overflow-y: auto; }
  .modal-fullscreen-lg-down .modal-footer { border-radius: 0px; }
}

@media (max-width: 1199.98px) {
  .modal-fullscreen-xl-down { width: 100vw; max-width: none; height: 100%; margin: 0px; }
  .modal-fullscreen-xl-down .modal-content { height: 100%; border: 0px; border-radius: 0px; }
  .modal-fullscreen-xl-down .modal-header { border-radius: 0px; }
  .modal-fullscreen-xl-down .modal-body { overflow-y: auto; }
  .modal-fullscreen-xl-down .modal-footer { border-radius: 0px; }
}

@media (max-width: 1399.98px) {
  .modal-fullscreen-xxl-down { width: 100vw; max-width: none; height: 100%; margin: 0px; }
  .modal-fullscreen-xxl-down .modal-content { height: 100%; border: 0px; border-radius: 0px; }
  .modal-fullscreen-xxl-down .modal-header { border-radius: 0px; }
  .modal-fullscreen-xxl-down .modal-body { overflow-y: auto; }
  .modal-fullscreen-xxl-down .modal-footer { border-radius: 0px; }
}

.tooltip { position: absolute; z-index: 1080; display: block; margin: 0px; font-family: var(--bs-font-sans-serif); font-style: normal; font-weight: 400; line-height: 1.5; text-align: start; text-decoration: none; text-shadow: none; text-transform: none; letter-spacing: normal; word-break: normal; word-spacing: normal; white-space: normal; line-break: auto; font-size: 0.875rem; overflow-wrap: break-word; opacity: 0; }

.tooltip.show { opacity: 0.9; }

.tooltip .tooltip-arrow { position: absolute; display: block; width: 0.8rem; height: 0.4rem; }

.tooltip .tooltip-arrow::before { position: absolute; content: ""; border-color: transparent; border-style: solid; }

.bs-tooltip-auto[data-popper-placement^="top"], .bs-tooltip-top { padding: 0.4rem 0px; }

.bs-tooltip-auto[data-popper-placement^="top"] .tooltip-arrow, .bs-tooltip-top .tooltip-arrow { bottom: 0px; }

.bs-tooltip-auto[data-popper-placement^="top"] .tooltip-arrow::before, .bs-tooltip-top .tooltip-arrow::before { top: -1px; border-width: 0.4rem 0.4rem 0px; border-top-color: rgb(0, 0, 0); }

.bs-tooltip-auto[data-popper-placement^="right"], .bs-tooltip-end { padding: 0px 0.4rem; }

.bs-tooltip-auto[data-popper-placement^="right"] .tooltip-arrow, .bs-tooltip-end .tooltip-arrow { left: 0px; width: 0.4rem; height: 0.8rem; }

.bs-tooltip-auto[data-popper-placement^="right"] .tooltip-arrow::before, .bs-tooltip-end .tooltip-arrow::before { right: -1px; border-width: 0.4rem 0.4rem 0.4rem 0px; border-right-color: rgb(0, 0, 0); }

.bs-tooltip-auto[data-popper-placement^="bottom"], .bs-tooltip-bottom { padding: 0.4rem 0px; }

.bs-tooltip-auto[data-popper-placement^="bottom"] .tooltip-arrow, .bs-tooltip-bottom .tooltip-arrow { top: 0px; }

.bs-tooltip-auto[data-popper-placement^="bottom"] .tooltip-arrow::before, .bs-tooltip-bottom .tooltip-arrow::before { bottom: -1px; border-width: 0px 0.4rem 0.4rem; border-bottom-color: rgb(0, 0, 0); }

.bs-tooltip-auto[data-popper-placement^="left"], .bs-tooltip-start { padding: 0px 0.4rem; }

.bs-tooltip-auto[data-popper-placement^="left"] .tooltip-arrow, .bs-tooltip-start .tooltip-arrow { right: 0px; width: 0.4rem; height: 0.8rem; }

.bs-tooltip-auto[data-popper-placement^="left"] .tooltip-arrow::before, .bs-tooltip-start .tooltip-arrow::before { left: -1px; border-width: 0.4rem 0px 0.4rem 0.4rem; border-left-color: rgb(0, 0, 0); }

.tooltip-inner { max-width: 200px; padding: 0.25rem 0.5rem; color: rgb(255, 255, 255); text-align: center; background-color: rgb(0, 0, 0); border-radius: 0.25rem; }

.popover { position: absolute; top: 0px; left: 0px; z-index: 1070; display: block; max-width: 276px; font-family: var(--bs-font-sans-serif); font-style: normal; font-weight: 400; line-height: 1.5; text-align: start; text-decoration: none; text-shadow: none; text-transform: none; letter-spacing: normal; word-break: normal; word-spacing: normal; white-space: normal; line-break: auto; font-size: 0.875rem; overflow-wrap: break-word; background-color: rgb(255, 255, 255); background-clip: padding-box; border: 1px solid rgba(0, 0, 0, 0.2); border-radius: 0.3rem; }

.popover .popover-arrow { position: absolute; display: block; width: 1rem; height: 0.5rem; }

.popover .popover-arrow::after, .popover .popover-arrow::before { position: absolute; display: block; content: ""; border-color: transparent; border-style: solid; }

.bs-popover-auto[data-popper-placement^="top"] > .popover-arrow, .bs-popover-top > .popover-arrow { bottom: calc(-1px - 0.5rem); }

.bs-popover-auto[data-popper-placement^="top"] > .popover-arrow::before, .bs-popover-top > .popover-arrow::before { bottom: 0px; border-width: 0.5rem 0.5rem 0px; border-top-color: rgba(0, 0, 0, 0.25); }

.bs-popover-auto[data-popper-placement^="top"] > .popover-arrow::after, .bs-popover-top > .popover-arrow::after { bottom: 1px; border-width: 0.5rem 0.5rem 0px; border-top-color: rgb(255, 255, 255); }

.bs-popover-auto[data-popper-placement^="right"] > .popover-arrow, .bs-popover-end > .popover-arrow { left: calc(-1px - 0.5rem); width: 0.5rem; height: 1rem; }

.bs-popover-auto[data-popper-placement^="right"] > .popover-arrow::before, .bs-popover-end > .popover-arrow::before { left: 0px; border-width: 0.5rem 0.5rem 0.5rem 0px; border-right-color: rgba(0, 0, 0, 0.25); }

.bs-popover-auto[data-popper-placement^="right"] > .popover-arrow::after, .bs-popover-end > .popover-arrow::after { left: 1px; border-width: 0.5rem 0.5rem 0.5rem 0px; border-right-color: rgb(255, 255, 255); }

.bs-popover-auto[data-popper-placement^="bottom"] > .popover-arrow, .bs-popover-bottom > .popover-arrow { top: calc(-1px - 0.5rem); }

.bs-popover-auto[data-popper-placement^="bottom"] > .popover-arrow::before, .bs-popover-bottom > .popover-arrow::before { top: 0px; border-width: 0px 0.5rem 0.5rem; border-bottom-color: rgba(0, 0, 0, 0.25); }

.bs-popover-auto[data-popper-placement^="bottom"] > .popover-arrow::after, .bs-popover-bottom > .popover-arrow::after { top: 1px; border-width: 0px 0.5rem 0.5rem; border-bottom-color: rgb(255, 255, 255); }

.bs-popover-auto[data-popper-placement^="bottom"] .popover-header::before, .bs-popover-bottom .popover-header::before { position: absolute; top: 0px; left: 50%; display: block; width: 1rem; margin-left: -0.5rem; content: ""; border-bottom: 1px solid rgb(240, 240, 240); }

.bs-popover-auto[data-popper-placement^="left"] > .popover-arrow, .bs-popover-start > .popover-arrow { right: calc(-1px - 0.5rem); width: 0.5rem; height: 1rem; }

.bs-popover-auto[data-popper-placement^="left"] > .popover-arrow::before, .bs-popover-start > .popover-arrow::before { right: 0px; border-width: 0.5rem 0px 0.5rem 0.5rem; border-left-color: rgba(0, 0, 0, 0.25); }

.bs-popover-auto[data-popper-placement^="left"] > .popover-arrow::after, .bs-popover-start > .popover-arrow::after { right: 1px; border-width: 0.5rem 0px 0.5rem 0.5rem; border-left-color: rgb(255, 255, 255); }

.popover-header { padding: 0.5rem 1rem; margin-bottom: 0px; font-size: 1rem; background-color: rgb(240, 240, 240); border-bottom: 1px solid rgba(0, 0, 0, 0.2); border-top-left-radius: calc(-1px + 0.3rem); border-top-right-radius: calc(-1px + 0.3rem); }

.popover-header:empty { display: none; }

.popover-body { padding: 1rem; color: rgb(33, 37, 41); }

.carousel { position: relative; }

.carousel.pointer-event { touch-action: pan-y; }

.carousel-inner { position: relative; width: 100%; overflow: hidden; }

.carousel-inner::after { display: block; clear: both; content: ""; }

.carousel-item { position: relative; display: none; float: left; width: 100%; margin-right: -100%; backface-visibility: hidden; transition: transform 0.6s ease-in-out 0s; }

@media (prefers-reduced-motion: reduce) {
  .carousel-item { transition: none 0s ease 0s; }
}

.carousel-item-next, .carousel-item-prev, .carousel-item.active { display: block; }

.active.carousel-item-end, .carousel-item-next:not(.carousel-item-start) { transform: translateX(100%); }

.active.carousel-item-start, .carousel-item-prev:not(.carousel-item-end) { transform: translateX(-100%); }

.carousel-fade .carousel-item { opacity: 0; transition-property: opacity; transform: none; }

.carousel-fade .carousel-item-next.carousel-item-start, .carousel-fade .carousel-item-prev.carousel-item-end, .carousel-fade .carousel-item.active { z-index: 1; opacity: 1; }

.carousel-fade .active.carousel-item-end, .carousel-fade .active.carousel-item-start { z-index: 0; opacity: 0; transition: opacity 0s ease 0.6s; }

@media (prefers-reduced-motion: reduce) {
  .carousel-fade .active.carousel-item-end, .carousel-fade .active.carousel-item-start { transition: none 0s ease 0s; }
}

.carousel-control-next, .carousel-control-prev { position: absolute; top: 0px; bottom: 0px; z-index: 1; display: flex; align-items: center; justify-content: center; width: 15%; padding: 0px; color: rgb(255, 255, 255); text-align: center; background: 0px 0px; border: 0px; opacity: 0.5; transition: opacity 0.15s ease 0s; }

@media (prefers-reduced-motion: reduce) {
  .carousel-control-next, .carousel-control-prev { transition: none 0s ease 0s; }
}

.carousel-control-next:focus, .carousel-control-next:hover, .carousel-control-prev:focus, .carousel-control-prev:hover { color: rgb(255, 255, 255); text-decoration: none; outline: 0px; opacity: 0.9; }

.carousel-control-prev { left: 0px; }

.carousel-control-next { right: 0px; }

.carousel-control-next-icon, .carousel-control-prev-icon { display: inline-block; width: 2rem; height: 2rem; background-repeat: no-repeat; background-position: 50% center; background-size: 100% 100%; }

.carousel-control-prev-icon { background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 16 16' fill='%23fff'%3e%3cpath d='M11.354 1.646a.5.5 0 0 1 0 .708L5.707 8l5.647 5.646a.5.5 0 0 1-.708.708l-6-6a.5.5 0 0 1 0-.708l6-6a.5.5 0 0 1 .708 0z'/%3e%3c/svg%3e"); }

.carousel-control-next-icon { background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 16 16' fill='%23fff'%3e%3cpath d='M4.646 1.646a.5.5 0 0 1 .708 0l6 6a.5.5 0 0 1 0 .708l-6 6a.5.5 0 0 1-.708-.708L10.293 8 4.646 2.354a.5.5 0 0 1 0-.708z'/%3e%3c/svg%3e"); }

.carousel-indicators { position: absolute; right: 0px; bottom: 0px; left: 0px; z-index: 2; display: flex; justify-content: center; padding: 0px; margin-right: 15%; margin-bottom: 1rem; margin-left: 15%; list-style: none; }

.carousel-indicators [data-bs-target] { box-sizing: content-box; flex: 0 1 auto; width: 30px; height: 3px; padding: 0px; margin-right: 3px; margin-left: 3px; text-indent: -999px; cursor: pointer; background-color: rgb(255, 255, 255); background-clip: padding-box; border-width: 10px 0px; border-right-style: initial; border-left-style: initial; border-right-color: initial; border-left-color: initial; border-image: initial; border-top-style: solid; border-top-color: transparent; border-bottom-style: solid; border-bottom-color: transparent; opacity: 0.5; transition: opacity 0.6s ease 0s; }

@media (prefers-reduced-motion: reduce) {
  .carousel-indicators [data-bs-target] { transition: none 0s ease 0s; }
}

.carousel-indicators .active { opacity: 1; }

.carousel-caption { position: absolute; right: 15%; bottom: 1.25rem; left: 15%; padding-top: 1.25rem; padding-bottom: 1.25rem; color: rgb(255, 255, 255); text-align: center; }

.carousel-dark .carousel-control-next-icon, .carousel-dark .carousel-control-prev-icon { filter: invert(1) grayscale(1); }

.carousel-dark .carousel-indicators [data-bs-target] { background-color: rgb(0, 0, 0); }

.carousel-dark .carousel-caption { color: rgb(0, 0, 0); }

@-webkit-keyframes spinner-border { 
  100% { transform: rotate(360deg); }
}

@keyframes spinner-border { 
  100% { transform: rotate(360deg); }
}

.spinner-border { display: inline-block; width: 2rem; height: 2rem; vertical-align: -0.125em; border-width: 0.25em; border-style: solid; border-color: currentcolor transparent currentcolor currentcolor; border-image: initial; border-radius: 50%; animation: 0.75s linear 0s infinite normal none running spinner-border; }

.spinner-border-sm { width: 1rem; height: 1rem; border-width: 0.2em; }

@-webkit-keyframes spinner-grow { 
  0% { transform: scale(0); }
  50% { opacity: 1; transform: none; }
}

@keyframes spinner-grow { 
  0% { transform: scale(0); }
  50% { opacity: 1; transform: none; }
}

.spinner-grow { display: inline-block; width: 2rem; height: 2rem; vertical-align: -0.125em; background-color: currentcolor; border-radius: 50%; opacity: 0; animation: 0.75s linear 0s infinite normal none running spinner-grow; }

.spinner-grow-sm { width: 1rem; height: 1rem; }

@media (prefers-reduced-motion: reduce) {
  .spinner-border, .spinner-grow { animation-duration: 1.5s; }
}

.offcanvas { position: fixed; bottom: 0px; z-index: 1050; display: flex; flex-direction: column; max-width: 100%; visibility: hidden; background-color: rgb(255, 255, 255); background-clip: padding-box; outline: 0px; transition: transform 0.3s ease-in-out 0s; }

@media (prefers-reduced-motion: reduce) {
  .offcanvas { transition: none 0s ease 0s; }
}

.offcanvas-header { display: flex; align-items: center; justify-content: space-between; padding: 1rem; }

.offcanvas-header .btn-close { padding: 0.5rem; margin-top: -0.5rem; margin-right: -0.5rem; margin-bottom: -0.5rem; }

.offcanvas-title { margin-bottom: 0px; line-height: 1.5; }

.offcanvas-body { flex-grow: 1; padding: 1rem; overflow-y: auto; }

.offcanvas-start { top: 0px; left: 0px; width: 400px; border-right: 1px solid rgba(0, 0, 0, 0.2); transform: translateX(-100%); }

.offcanvas-end { top: 0px; right: 0px; width: 400px; border-left: 1px solid rgba(0, 0, 0, 0.2); transform: translateX(100%); }

.offcanvas-top { top: 0px; right: 0px; left: 0px; height: 30vh; max-height: 100%; border-bottom: 1px solid rgba(0, 0, 0, 0.2); transform: translateY(-100%); }

.offcanvas-bottom { right: 0px; left: 0px; height: 30vh; max-height: 100%; border-top: 1px solid rgba(0, 0, 0, 0.2); transform: translateY(100%); }

.offcanvas.show { transform: none; }

.clearfix::after { display: block; clear: both; content: ""; }

.link-primary { color: rgb(13, 110, 253); }

.link-primary:focus, .link-primary:hover { color: rgb(10, 88, 202); }

.link-secondary { color: rgb(108, 117, 125); }

.link-secondary:focus, .link-secondary:hover { color: rgb(86, 94, 100); }

.link-success { color: rgb(25, 135, 84); }

.link-success:focus, .link-success:hover { color: rgb(20, 108, 67); }

.link-info { color: rgb(13, 202, 240); }

.link-info:focus, .link-info:hover { color: rgb(61, 213, 243); }

.link-warning { color: rgb(255, 193, 7); }

.link-warning:focus, .link-warning:hover { color: rgb(255, 205, 57); }

.link-danger { color: rgb(220, 53, 69); }

.link-danger:focus, .link-danger:hover { color: rgb(176, 42, 55); }

.link-light { color: rgb(248, 249, 250); }

.link-light:focus, .link-light:hover { color: rgb(249, 250, 251); }

.link-dark { color: rgb(33, 37, 41); }

.link-dark:focus, .link-dark:hover { color: rgb(26, 30, 33); }

.ratio { position: relative; width: 100%; }

.ratio::before { display: block; padding-top: var(--bs-aspect-ratio); content: ""; }

.ratio > * { position: absolute; top: 0px; left: 0px; width: 100%; height: 100%; }

.ratio-1x1 { --bs-aspect-ratio: 100%; }

.ratio-4x3 { --bs-aspect-ratio: calc(3 / 4 * 100%); }

.ratio-16x9 { --bs-aspect-ratio: calc(9 / 16 * 100%); }

.ratio-21x9 { --bs-aspect-ratio: calc(9 / 21 * 100%); }

.fixed-top { position: fixed; top: 0px; right: 0px; left: 0px; z-index: 1030; }

.fixed-bottom { position: fixed; right: 0px; bottom: 0px; left: 0px; z-index: 1030; }

.sticky-top { position: sticky; top: 0px; z-index: 1020; }

@media (min-width: 576px) {
  .sticky-sm-top { position: sticky; top: 0px; z-index: 1020; }
}

@media (min-width: 768px) {
  .sticky-md-top { position: sticky; top: 0px; z-index: 1020; }
}

@media (min-width: 992px) {
  .sticky-lg-top { position: sticky; top: 0px; z-index: 1020; }
}

@media (min-width: 1200px) {
  .sticky-xl-top { position: sticky; top: 0px; z-index: 1020; }
}

@media (min-width: 1400px) {
  .sticky-xxl-top { position: sticky; top: 0px; z-index: 1020; }
}

.visually-hidden, .visually-hidden-focusable:not(:focus):not(:focus-within) { position: absolute !important; width: 1px !important; height: 1px !important; padding: 0px !important; margin: -1px !important; overflow: hidden !important; clip: rect(0px, 0px, 0px, 0px) !important; white-space: nowrap !important; border: 0px !important; }

.stretched-link::after { position: absolute; inset: 0px; z-index: 1; content: ""; }

.text-truncate { overflow: hidden; text-overflow: ellipsis; white-space: nowrap; }

.align-baseline { vertical-align: baseline !important; }

.align-top { vertical-align: top !important; }

.align-middle { vertical-align: middle !important; }

.align-bottom { vertical-align: bottom !important; }

.align-text-bottom { vertical-align: text-bottom !important; }

.align-text-top { vertical-align: text-top !important; }

.float-start { float: left !important; }

.float-end { float: right !important; }

.float-none { float: none !important; }

.overflow-auto { overflow: auto !important; }

.overflow-hidden { overflow: hidden !important; }

.overflow-visible { overflow: visible !important; }

.overflow-scroll { overflow: scroll !important; }

.d-inline { display: inline !important; }

.d-inline-block { display: inline-block !important; }

.d-block { display: block !important; }

.d-grid { display: grid !important; }

.d-table { display: table !important; }

.d-table-row { display: table-row !important; }

.d-table-cell { display: table-cell !important; }

.d-flex { display: flex !important; }

.d-inline-flex { display: inline-flex !important; }

.d-none { display: none !important; }

.shadow { box-shadow: rgba(0, 0, 0, 0.15) 0px 0.5rem 1rem !important; }

.shadow-sm { box-shadow: rgba(0, 0, 0, 0.075) 0px 0.125rem 0.25rem !important; }

.shadow-lg { box-shadow: rgba(0, 0, 0, 0.176) 0px 1rem 3rem !important; }

.shadow-none { box-shadow: none !important; }

.position-static { position: static !important; }

.position-relative { position: relative !important; }

.position-absolute { position: absolute !important; }

.position-fixed { position: fixed !important; }

.position-sticky { position: sticky !important; }

.top-0 { top: 0px !important; }

.top-50 { top: 50% !important; }

.top-100 { top: 100% !important; }

.bottom-0 { bottom: 0px !important; }

.bottom-50 { bottom: 50% !important; }

.bottom-100 { bottom: 100% !important; }

.start-0 { left: 0px !important; }

.start-50 { left: 50% !important; }

.start-100 { left: 100% !important; }

.end-0 { right: 0px !important; }

.end-50 { right: 50% !important; }

.end-100 { right: 100% !important; }

.translate-middle { transform: translate(-50%, -50%) !important; }

.translate-middle-x { transform: translateX(-50%) !important; }

.translate-middle-y { transform: translateY(-50%) !important; }

.border { border: 1px solid rgb(222, 226, 230) !important; }

.border-0 { border: 0px !important; }

.border-top { border-top: 1px solid rgb(222, 226, 230) !important; }

.border-top-0 { border-top: 0px !important; }

.border-end { border-right: 1px solid rgb(222, 226, 230) !important; }

.border-end-0 { border-right: 0px !important; }

.border-bottom { border-bottom: 1px solid rgb(222, 226, 230) !important; }

.border-bottom-0 { border-bottom: 0px !important; }

.border-start { border-left: 1px solid rgb(222, 226, 230) !important; }

.border-start-0 { border-left: 0px !important; }

.border-primary { border-color: rgb(13, 110, 253) !important; }

.border-secondary { border-color: rgb(108, 117, 125) !important; }

.border-success { border-color: rgb(25, 135, 84) !important; }

.border-info { border-color: rgb(13, 202, 240) !important; }

.border-warning { border-color: rgb(255, 193, 7) !important; }

.border-danger { border-color: rgb(220, 53, 69) !important; }

.border-light { border-color: rgb(248, 249, 250) !important; }

.border-dark { border-color: rgb(33, 37, 41) !important; }

.border-white { border-color: rgb(255, 255, 255) !important; }

.border-1 { border-width: 1px !important; }

.border-2 { border-width: 2px !important; }

.border-3 { border-width: 3px !important; }

.border-4 { border-width: 4px !important; }

.border-5 { border-width: 5px !important; }

.w-25 { width: 25% !important; }

.w-50 { width: 50% !important; }

.w-75 { width: 75% !important; }

.w-100 { width: 100% !important; }

.w-auto { width: auto !important; }

.mw-100 { max-width: 100% !important; }

.vw-100 { width: 100vw !important; }

.min-vw-100 { min-width: 100vw !important; }

.h-25 { height: 25% !important; }

.h-50 { height: 50% !important; }

.h-75 { height: 75% !important; }

.h-100 { height: 100% !important; }

.h-auto { height: auto !important; }

.mh-100 { max-height: 100% !important; }

.vh-100 { height: 100vh !important; }

.min-vh-100 { min-height: 100vh !important; }

.flex-fill { flex: 1 1 auto !important; }

.flex-row { flex-direction: row !important; }

.flex-column { flex-direction: column !important; }

.flex-row-reverse { flex-direction: row-reverse !important; }

.flex-column-reverse { flex-direction: column-reverse !important; }

.flex-grow-0 { flex-grow: 0 !important; }

.flex-grow-1 { flex-grow: 1 !important; }

.flex-shrink-0 { flex-shrink: 0 !important; }

.flex-shrink-1 { flex-shrink: 1 !important; }

.flex-wrap { flex-wrap: wrap !important; }

.flex-nowrap { flex-wrap: nowrap !important; }

.flex-wrap-reverse { flex-wrap: wrap-reverse !important; }

.gap-0 { gap: 0px !important; }

.gap-1 { gap: 0.25rem !important; }

.gap-2 { gap: 0.5rem !important; }

.gap-3 { gap: 1rem !important; }

.gap-4 { gap: 1.5rem !important; }

.gap-5 { gap: 3rem !important; }

.justify-content-start { justify-content: flex-start !important; }

.justify-content-end { justify-content: flex-end !important; }

.justify-content-center { justify-content: center !important; }

.justify-content-between { justify-content: space-between !important; }

.justify-content-around { justify-content: space-around !important; }

.justify-content-evenly { justify-content: space-evenly !important; }

.align-items-start { align-items: flex-start !important; }

.align-items-end { align-items: flex-end !important; }

.align-items-center { align-items: center !important; }

.align-items-baseline { align-items: baseline !important; }

.align-items-stretch { align-items: stretch !important; }

.align-content-start { align-content: flex-start !important; }

.align-content-end { align-content: flex-end !important; }

.align-content-center { align-content: center !important; }

.align-content-between { align-content: space-between !important; }

.align-content-around { align-content: space-around !important; }

.align-content-stretch { align-content: stretch !important; }

.align-self-auto { align-self: auto !important; }

.align-self-start { align-self: flex-start !important; }

.align-self-end { align-self: flex-end !important; }

.align-self-center { align-self: center !important; }

.align-self-baseline { align-self: baseline !important; }

.align-self-stretch { align-self: stretch !important; }

.order-first { order: -1 !important; }

.order-0 { order: 0 !important; }

.order-1 { order: 1 !important; }

.order-2 { order: 2 !important; }

.order-3 { order: 3 !important; }

.order-4 { order: 4 !important; }

.order-5 { order: 5 !important; }

.order-last { order: 6 !important; }

.m-0 { margin: 0px !important; }

.m-1 { margin: 0.25rem !important; }

.m-2 { margin: 0.5rem !important; }

.m-3 { margin: 1rem !important; }

.m-4 { margin: 1.5rem !important; }

.m-5 { margin: 3rem !important; }

.m-auto { margin: auto !important; }

.mx-0 { margin-right: 0px !important; margin-left: 0px !important; }

.mx-1 { margin-right: 0.25rem !important; margin-left: 0.25rem !important; }

.mx-2 { margin-right: 0.5rem !important; margin-left: 0.5rem !important; }

.mx-3 { margin-right: 1rem !important; margin-left: 1rem !important; }

.mx-4 { margin-right: 1.5rem !important; margin-left: 1.5rem !important; }

.mx-5 { margin-right: 3rem !important; margin-left: 3rem !important; }

.mx-auto { margin-right: auto !important; margin-left: auto !important; }

.my-0 { margin-top: 0px !important; margin-bottom: 0px !important; }

.my-1 { margin-top: 0.25rem !important; margin-bottom: 0.25rem !important; }

.my-2 { margin-top: 0.5rem !important; margin-bottom: 0.5rem !important; }

.my-3 { margin-top: 1rem !important; margin-bottom: 1rem !important; }

.my-4 { margin-top: 1.5rem !important; margin-bottom: 1.5rem !important; }

.my-5 { margin-top: 3rem !important; margin-bottom: 3rem !important; }

.my-auto { margin-top: auto !important; margin-bottom: auto !important; }

.mt-0 { margin-top: 0px !important; }

.mt-1 { margin-top: 0.25rem !important; }

.mt-2 { margin-top: 0.5rem !important; }

.mt-3 { margin-top: 1rem !important; }

.mt-4 { margin-top: 1.5rem !important; }

.mt-5 { margin-top: 3rem !important; }

.mt-auto { margin-top: auto !important; }

.me-0 { margin-right: 0px !important; }

.me-1 { margin-right: 0.25rem !important; }

.me-2 { margin-right: 0.5rem !important; }

.me-3 { margin-right: 1rem !important; }

.me-4 { margin-right: 1.5rem !important; }

.me-5 { margin-right: 3rem !important; }

.me-auto { margin-right: auto !important; }

.mb-0 { margin-bottom: 0px !important; }

.mb-1 { margin-bottom: 0.25rem !important; }

.mb-2 { margin-bottom: 0.5rem !important; }

.mb-3 { margin-bottom: 1rem !important; }

.mb-4 { margin-bottom: 1.5rem !important; }

.mb-5 { margin-bottom: 3rem !important; }

.mb-auto { margin-bottom: auto !important; }

.ms-0 { margin-left: 0px !important; }

.ms-1 { margin-left: 0.25rem !important; }

.ms-2 { margin-left: 0.5rem !important; }

.ms-3 { margin-left: 1rem !important; }

.ms-4 { margin-left: 1.5rem !important; }

.ms-5 { margin-left: 3rem !important; }

.ms-auto { margin-left: auto !important; }

.p-0 { padding: 0px !important; }

.p-1 { padding: 0.25rem !important; }

.p-2 { padding: 0.5rem !important; }

.p-3 { padding: 1rem !important; }

.p-4 { padding: 1.5rem !important; }

.p-5 { padding: 3rem !important; }

.px-0 { padding-right: 0px !important; padding-left: 0px !important; }

.px-1 { padding-right: 0.25rem !important; padding-left: 0.25rem !important; }

.px-2 { padding-right: 0.5rem !important; padding-left: 0.5rem !important; }

.px-3 { padding-right: 1rem !important; padding-left: 1rem !important; }

.px-4 { padding-right: 1.5rem !important; padding-left: 1.5rem !important; }

.px-5 { padding-right: 3rem !important; padding-left: 3rem !important; }

.py-0 { padding-top: 0px !important; padding-bottom: 0px !important; }

.py-1 { padding-top: 0.25rem !important; padding-bottom: 0.25rem !important; }

.py-2 { padding-top: 0.5rem !important; padding-bottom: 0.5rem !important; }

.py-3 { padding-top: 1rem !important; padding-bottom: 1rem !important; }

.py-4 { padding-top: 1.5rem !important; padding-bottom: 1.5rem !important; }

.py-5 { padding-top: 3rem !important; padding-bottom: 3rem !important; }

.pt-0 { padding-top: 0px !important; }

.pt-1 { padding-top: 0.25rem !important; }

.pt-2 { padding-top: 0.5rem !important; }

.pt-3 { padding-top: 1rem !important; }

.pt-4 { padding-top: 1.5rem !important; }

.pt-5 { padding-top: 3rem !important; }

.pe-0 { padding-right: 0px !important; }

.pe-1 { padding-right: 0.25rem !important; }

.pe-2 { padding-right: 0.5rem !important; }

.pe-3 { padding-right: 1rem !important; }

.pe-4 { padding-right: 1.5rem !important; }

.pe-5 { padding-right: 3rem !important; }

.pb-0 { padding-bottom: 0px !important; }

.pb-1 { padding-bottom: 0.25rem !important; }

.pb-2 { padding-bottom: 0.5rem !important; }

.pb-3 { padding-bottom: 1rem !important; }

.pb-4 { padding-bottom: 1.5rem !important; }

.pb-5 { padding-bottom: 3rem !important; }

.ps-0 { padding-left: 0px !important; }

.ps-1 { padding-left: 0.25rem !important; }

.ps-2 { padding-left: 0.5rem !important; }

.ps-3 { padding-left: 1rem !important; }

.ps-4 { padding-left: 1.5rem !important; }

.ps-5 { padding-left: 3rem !important; }

.font-monospace { font-family: var(--bs-font-monospace) !important; }

.fs-1 { font-size: calc(1.375rem + 1.5vw) !important; }

.fs-2 { font-size: calc(1.325rem + 0.9vw) !important; }

.fs-3 { font-size: calc(1.3rem + 0.6vw) !important; }

.fs-4 { font-size: calc(1.275rem + 0.3vw) !important; }

.fs-5 { font-size: 1.25rem !important; }

.fs-6 { font-size: 1rem !important; }

.fst-italic { font-style: italic !important; }

.fst-normal { font-style: normal !important; }

.fw-light { font-weight: 300 !important; }

.fw-lighter { font-weight: lighter !important; }

.fw-normal { font-weight: 400 !important; }

.fw-bold { font-weight: 700 !important; }

.fw-bolder { font-weight: bolder !important; }

.lh-1 { line-height: 1 !important; }

.lh-sm { line-height: 1.25 !important; }

.lh-base { line-height: 1.5 !important; }

.lh-lg { line-height: 2 !important; }

.text-start { text-align: left !important; }

.text-end { text-align: right !important; }

.text-center { text-align: center !important; }

.text-decoration-none { text-decoration: none !important; }

.text-decoration-underline { text-decoration: underline !important; }

.text-decoration-line-through { text-decoration: line-through !important; }

.text-lowercase { text-transform: lowercase !important; }

.text-uppercase { text-transform: uppercase !important; }

.text-capitalize { text-transform: capitalize !important; }

.text-wrap { white-space: normal !important; }

.text-nowrap { white-space: nowrap !important; }

.text-break { overflow-wrap: break-word !important; word-break: break-word !important; }

.text-primary { color: rgb(13, 110, 253) !important; }

.text-secondary { color: rgb(108, 117, 125) !important; }

.text-success { color: rgb(25, 135, 84) !important; }

.text-info { color: rgb(13, 202, 240) !important; }

.text-warning { color: rgb(255, 193, 7) !important; }

.text-danger { color: rgb(220, 53, 69) !important; }

.text-light { color: rgb(248, 249, 250) !important; }

.text-dark { color: rgb(33, 37, 41) !important; }

.text-white { color: rgb(255, 255, 255) !important; }

.text-body { color: rgb(33, 37, 41) !important; }

.text-muted { color: rgb(108, 117, 125) !important; }

.text-black-50 { color: rgba(0, 0, 0, 0.5) !important; }

.text-white-50 { color: rgba(255, 255, 255, 0.5) !important; }

.text-reset { color: inherit !important; }

.bg-primary { background-color: rgb(13, 110, 253) !important; }

.bg-secondary { background-color: rgb(108, 117, 125) !important; }

.bg-success { background-color: rgb(25, 135, 84) !important; }

.bg-info { background-color: rgb(13, 202, 240) !important; }

.bg-warning { background-color: rgb(255, 193, 7) !important; }

.bg-danger { background-color: rgb(220, 53, 69) !important; }

.bg-light { background-color: rgb(248, 249, 250) !important; }

.bg-dark { background-color: rgb(33, 37, 41) !important; }

.bg-body { background-color: rgb(255, 255, 255) !important; }

.bg-white { background-color: rgb(255, 255, 255) !important; }

.bg-transparent { background-color: transparent !important; }

.bg-gradient { background-image: var(--bs-gradient) !important; }

.user-select-all { user-select: all !important; }

.user-select-auto { user-select: auto !important; }

.user-select-none { user-select: none !important; }

.pe-none { pointer-events: none !important; }

.pe-auto { pointer-events: auto !important; }

.rounded { border-radius: 0.25rem !important; }

.rounded-0 { border-radius: 0px !important; }

.rounded-1 { border-radius: 0.2rem !important; }

.rounded-2 { border-radius: 0.25rem !important; }

.rounded-3 { border-radius: 0.3rem !important; }

.rounded-circle { border-radius: 50% !important; }

.rounded-pill { border-radius: 50rem !important; }

.rounded-top { border-top-left-radius: 0.25rem !important; border-top-right-radius: 0.25rem !important; }

.rounded-end { border-top-right-radius: 0.25rem !important; border-bottom-right-radius: 0.25rem !important; }

.rounded-bottom { border-bottom-right-radius: 0.25rem !important; border-bottom-left-radius: 0.25rem !important; }

.rounded-start { border-bottom-left-radius: 0.25rem !important; border-top-left-radius: 0.25rem !important; }

.visible { visibility: visible !important; }

.invisible { visibility: hidden !important; }

@media (min-width: 576px) {
  .float-sm-start { float: left !important; }
  .float-sm-end { float: right !important; }
  .float-sm-none { float: none !important; }
  .d-sm-inline { display: inline !important; }
  .d-sm-inline-block { display: inline-block !important; }
  .d-sm-block { display: block !important; }
  .d-sm-grid { display: grid !important; }
  .d-sm-table { display: table !important; }
  .d-sm-table-row { display: table-row !important; }
  .d-sm-table-cell { display: table-cell !important; }
  .d-sm-flex { display: flex !important; }
  .d-sm-inline-flex { display: inline-flex !important; }
  .d-sm-none { display: none !important; }
  .flex-sm-fill { flex: 1 1 auto !important; }
  .flex-sm-row { flex-direction: row !important; }
  .flex-sm-column { flex-direction: column !important; }
  .flex-sm-row-reverse { flex-direction: row-reverse !important; }
  .flex-sm-column-reverse { flex-direction: column-reverse !important; }
  .flex-sm-grow-0 { flex-grow: 0 !important; }
  .flex-sm-grow-1 { flex-grow: 1 !important; }
  .flex-sm-shrink-0 { flex-shrink: 0 !important; }
  .flex-sm-shrink-1 { flex-shrink: 1 !important; }
  .flex-sm-wrap { flex-wrap: wrap !important; }
  .flex-sm-nowrap { flex-wrap: nowrap !important; }
  .flex-sm-wrap-reverse { flex-wrap: wrap-reverse !important; }
  .gap-sm-0 { gap: 0px !important; }
  .gap-sm-1 { gap: 0.25rem !important; }
  .gap-sm-2 { gap: 0.5rem !important; }
  .gap-sm-3 { gap: 1rem !important; }
  .gap-sm-4 { gap: 1.5rem !important; }
  .gap-sm-5 { gap: 3rem !important; }
  .justify-content-sm-start { justify-content: flex-start !important; }
  .justify-content-sm-end { justify-content: flex-end !important; }
  .justify-content-sm-center { justify-content: center !important; }
  .justify-content-sm-between { justify-content: space-between !important; }
  .justify-content-sm-around { justify-content: space-around !important; }
  .justify-content-sm-evenly { justify-content: space-evenly !important; }
  .align-items-sm-start { align-items: flex-start !important; }
  .align-items-sm-end { align-items: flex-end !important; }
  .align-items-sm-center { align-items: center !important; }
  .align-items-sm-baseline { align-items: baseline !important; }
  .align-items-sm-stretch { align-items: stretch !important; }
  .align-content-sm-start { align-content: flex-start !important; }
  .align-content-sm-end { align-content: flex-end !important; }
  .align-content-sm-center { align-content: center !important; }
  .align-content-sm-between { align-content: space-between !important; }
  .align-content-sm-around { align-content: space-around !important; }
  .align-content-sm-stretch { align-content: stretch !important; }
  .align-self-sm-auto { align-self: auto !important; }
  .align-self-sm-start { align-self: flex-start !important; }
  .align-self-sm-end { align-self: flex-end !important; }
  .align-self-sm-center { align-self: center !important; }
  .align-self-sm-baseline { align-self: baseline !important; }
  .align-self-sm-stretch { align-self: stretch !important; }
  .order-sm-first { order: -1 !important; }
  .order-sm-0 { order: 0 !important; }
  .order-sm-1 { order: 1 !important; }
  .order-sm-2 { order: 2 !important; }
  .order-sm-3 { order: 3 !important; }
  .order-sm-4 { order: 4 !important; }
  .order-sm-5 { order: 5 !important; }
  .order-sm-last { order: 6 !important; }
  .m-sm-0 { margin: 0px !important; }
  .m-sm-1 { margin: 0.25rem !important; }
  .m-sm-2 { margin: 0.5rem !important; }
  .m-sm-3 { margin: 1rem !important; }
  .m-sm-4 { margin: 1.5rem !important; }
  .m-sm-5 { margin: 3rem !important; }
  .m-sm-auto { margin: auto !important; }
  .mx-sm-0 { margin-right: 0px !important; margin-left: 0px !important; }
  .mx-sm-1 { margin-right: 0.25rem !important; margin-left: 0.25rem !important; }
  .mx-sm-2 { margin-right: 0.5rem !important; margin-left: 0.5rem !important; }
  .mx-sm-3 { margin-right: 1rem !important; margin-left: 1rem !important; }
  .mx-sm-4 { margin-right: 1.5rem !important; margin-left: 1.5rem !important; }
  .mx-sm-5 { margin-right: 3rem !important; margin-left: 3rem !important; }
  .mx-sm-auto { margin-right: auto !important; margin-left: auto !important; }
  .my-sm-0 { margin-top: 0px !important; margin-bottom: 0px !important; }
  .my-sm-1 { margin-top: 0.25rem !important; margin-bottom: 0.25rem !important; }
  .my-sm-2 { margin-top: 0.5rem !important; margin-bottom: 0.5rem !important; }
  .my-sm-3 { margin-top: 1rem !important; margin-bottom: 1rem !important; }
  .my-sm-4 { margin-top: 1.5rem !important; margin-bottom: 1.5rem !important; }
  .my-sm-5 { margin-top: 3rem !important; margin-bottom: 3rem !important; }
  .my-sm-auto { margin-top: auto !important; margin-bottom: auto !important; }
  .mt-sm-0 { margin-top: 0px !important; }
  .mt-sm-1 { margin-top: 0.25rem !important; }
  .mt-sm-2 { margin-top: 0.5rem !important; }
  .mt-sm-3 { margin-top: 1rem !important; }
  .mt-sm-4 { margin-top: 1.5rem !important; }
  .mt-sm-5 { margin-top: 3rem !important; }
  .mt-sm-auto { margin-top: auto !important; }
  .me-sm-0 { margin-right: 0px !important; }
  .me-sm-1 { margin-right: 0.25rem !important; }
  .me-sm-2 { margin-right: 0.5rem !important; }
  .me-sm-3 { margin-right: 1rem !important; }
  .me-sm-4 { margin-right: 1.5rem !important; }
  .me-sm-5 { margin-right: 3rem !important; }
  .me-sm-auto { margin-right: auto !important; }
  .mb-sm-0 { margin-bottom: 0px !important; }
  .mb-sm-1 { margin-bottom: 0.25rem !important; }
  .mb-sm-2 { margin-bottom: 0.5rem !important; }
  .mb-sm-3 { margin-bottom: 1rem !important; }
  .mb-sm-4 { margin-bottom: 1.5rem !important; }
  .mb-sm-5 { margin-bottom: 3rem !important; }
  .mb-sm-auto { margin-bottom: auto !important; }
  .ms-sm-0 { margin-left: 0px !important; }
  .ms-sm-1 { margin-left: 0.25rem !important; }
  .ms-sm-2 { margin-left: 0.5rem !important; }
  .ms-sm-3 { margin-left: 1rem !important; }
  .ms-sm-4 { margin-left: 1.5rem !important; }
  .ms-sm-5 { margin-left: 3rem !important; }
  .ms-sm-auto { margin-left: auto !important; }
  .p-sm-0 { padding: 0px !important; }
  .p-sm-1 { padding: 0.25rem !important; }
  .p-sm-2 { padding: 0.5rem !important; }
  .p-sm-3 { padding: 1rem !important; }
  .p-sm-4 { padding: 1.5rem !important; }
  .p-sm-5 { padding: 3rem !important; }
  .px-sm-0 { padding-right: 0px !important; padding-left: 0px !important; }
  .px-sm-1 { padding-right: 0.25rem !important; padding-left: 0.25rem !important; }
  .px-sm-2 { padding-right: 0.5rem !important; padding-left: 0.5rem !important; }
  .px-sm-3 { padding-right: 1rem !important; padding-left: 1rem !important; }
  .px-sm-4 { padding-right: 1.5rem !important; padding-left: 1.5rem !important; }
  .px-sm-5 { padding-right: 3rem !important; padding-left: 3rem !important; }
  .py-sm-0 { padding-top: 0px !important; padding-bottom: 0px !important; }
  .py-sm-1 { padding-top: 0.25rem !important; padding-bottom: 0.25rem !important; }
  .py-sm-2 { padding-top: 0.5rem !important; padding-bottom: 0.5rem !important; }
  .py-sm-3 { padding-top: 1rem !important; padding-bottom: 1rem !important; }
  .py-sm-4 { padding-top: 1.5rem !important; padding-bottom: 1.5rem !important; }
  .py-sm-5 { padding-top: 3rem !important; padding-bottom: 3rem !important; }
  .pt-sm-0 { padding-top: 0px !important; }
  .pt-sm-1 { padding-top: 0.25rem !important; }
  .pt-sm-2 { padding-top: 0.5rem !important; }
  .pt-sm-3 { padding-top: 1rem !important; }
  .pt-sm-4 { padding-top: 1.5rem !important; }
  .pt-sm-5 { padding-top: 3rem !important; }
  .pe-sm-0 { padding-right: 0px !important; }
  .pe-sm-1 { padding-right: 0.25rem !important; }
  .pe-sm-2 { padding-right: 0.5rem !important; }
  .pe-sm-3 { padding-right: 1rem !important; }
  .pe-sm-4 { padding-right: 1.5rem !important; }
  .pe-sm-5 { padding-right: 3rem !important; }
  .pb-sm-0 { padding-bottom: 0px !important; }
  .pb-sm-1 { padding-bottom: 0.25rem !important; }
  .pb-sm-2 { padding-bottom: 0.5rem !important; }
  .pb-sm-3 { padding-bottom: 1rem !important; }
  .pb-sm-4 { padding-bottom: 1.5rem !important; }
  .pb-sm-5 { padding-bottom: 3rem !important; }
  .ps-sm-0 { padding-left: 0px !important; }
  .ps-sm-1 { padding-left: 0.25rem !important; }
  .ps-sm-2 { padding-left: 0.5rem !important; }
  .ps-sm-3 { padding-left: 1rem !important; }
  .ps-sm-4 { padding-left: 1.5rem !important; }
  .ps-sm-5 { padding-left: 3rem !important; }
  .text-sm-start { text-align: left !important; }
  .text-sm-end { text-align: right !important; }
  .text-sm-center { text-align: center !important; }
}

@media (min-width: 768px) {
  .float-md-start { float: left !important; }
  .float-md-end { float: right !important; }
  .float-md-none { float: none !important; }
  .d-md-inline { display: inline !important; }
  .d-md-inline-block { display: inline-block !important; }
  .d-md-block { display: block !important; }
  .d-md-grid { display: grid !important; }
  .d-md-table { display: table !important; }
  .d-md-table-row { display: table-row !important; }
  .d-md-table-cell { display: table-cell !important; }
  .d-md-flex { display: flex !important; }
  .d-md-inline-flex { display: inline-flex !important; }
  .d-md-none { display: none !important; }
  .flex-md-fill { flex: 1 1 auto !important; }
  .flex-md-row { flex-direction: row !important; }
  .flex-md-column { flex-direction: column !important; }
  .flex-md-row-reverse { flex-direction: row-reverse !important; }
  .flex-md-column-reverse { flex-direction: column-reverse !important; }
  .flex-md-grow-0 { flex-grow: 0 !important; }
  .flex-md-grow-1 { flex-grow: 1 !important; }
  .flex-md-shrink-0 { flex-shrink: 0 !important; }
  .flex-md-shrink-1 { flex-shrink: 1 !important; }
  .flex-md-wrap { flex-wrap: wrap !important; }
  .flex-md-nowrap { flex-wrap: nowrap !important; }
  .flex-md-wrap-reverse { flex-wrap: wrap-reverse !important; }
  .gap-md-0 { gap: 0px !important; }
  .gap-md-1 { gap: 0.25rem !important; }
  .gap-md-2 { gap: 0.5rem !important; }
  .gap-md-3 { gap: 1rem !important; }
  .gap-md-4 { gap: 1.5rem !important; }
  .gap-md-5 { gap: 3rem !important; }
  .justify-content-md-start { justify-content: flex-start !important; }
  .justify-content-md-end { justify-content: flex-end !important; }
  .justify-content-md-center { justify-content: center !important; }
  .justify-content-md-between { justify-content: space-between !important; }
  .justify-content-md-around { justify-content: space-around !important; }
  .justify-content-md-evenly { justify-content: space-evenly !important; }
  .align-items-md-start { align-items: flex-start !important; }
  .align-items-md-end { align-items: flex-end !important; }
  .align-items-md-center { align-items: center !important; }
  .align-items-md-baseline { align-items: baseline !important; }
  .align-items-md-stretch { align-items: stretch !important; }
  .align-content-md-start { align-content: flex-start !important; }
  .align-content-md-end { align-content: flex-end !important; }
  .align-content-md-center { align-content: center !important; }
  .align-content-md-between { align-content: space-between !important; }
  .align-content-md-around { align-content: space-around !important; }
  .align-content-md-stretch { align-content: stretch !important; }
  .align-self-md-auto { align-self: auto !important; }
  .align-self-md-start { align-self: flex-start !important; }
  .align-self-md-end { align-self: flex-end !important; }
  .align-self-md-center { align-self: center !important; }
  .align-self-md-baseline { align-self: baseline !important; }
  .align-self-md-stretch { align-self: stretch !important; }
  .order-md-first { order: -1 !important; }
  .order-md-0 { order: 0 !important; }
  .order-md-1 { order: 1 !important; }
  .order-md-2 { order: 2 !important; }
  .order-md-3 { order: 3 !important; }
  .order-md-4 { order: 4 !important; }
  .order-md-5 { order: 5 !important; }
  .order-md-last { order: 6 !important; }
  .m-md-0 { margin: 0px !important; }
  .m-md-1 { margin: 0.25rem !important; }
  .m-md-2 { margin: 0.5rem !important; }
  .m-md-3 { margin: 1rem !important; }
  .m-md-4 { margin: 1.5rem !important; }
  .m-md-5 { margin: 3rem !important; }
  .m-md-auto { margin: auto !important; }
  .mx-md-0 { margin-right: 0px !important; margin-left: 0px !important; }
  .mx-md-1 { margin-right: 0.25rem !important; margin-left: 0.25rem !important; }
  .mx-md-2 { margin-right: 0.5rem !important; margin-left: 0.5rem !important; }
  .mx-md-3 { margin-right: 1rem !important; margin-left: 1rem !important; }
  .mx-md-4 { margin-right: 1.5rem !important; margin-left: 1.5rem !important; }
  .mx-md-5 { margin-right: 3rem !important; margin-left: 3rem !important; }
  .mx-md-auto { margin-right: auto !important; margin-left: auto !important; }
  .my-md-0 { margin-top: 0px !important; margin-bottom: 0px !important; }
  .my-md-1 { margin-top: 0.25rem !important; margin-bottom: 0.25rem !important; }
  .my-md-2 { margin-top: 0.5rem !important; margin-bottom: 0.5rem !important; }
  .my-md-3 { margin-top: 1rem !important; margin-bottom: 1rem !important; }
  .my-md-4 { margin-top: 1.5rem !important; margin-bottom: 1.5rem !important; }
  .my-md-5 { margin-top: 3rem !important; margin-bottom: 3rem !important; }
  .my-md-auto { margin-top: auto !important; margin-bottom: auto !important; }
  .mt-md-0 { margin-top: 0px !important; }
  .mt-md-1 { margin-top: 0.25rem !important; }
  .mt-md-2 { margin-top: 0.5rem !important; }
  .mt-md-3 { margin-top: 1rem !important; }
  .mt-md-4 { margin-top: 1.5rem !important; }
  .mt-md-5 { margin-top: 3rem !important; }
  .mt-md-auto { margin-top: auto !important; }
  .me-md-0 { margin-right: 0px !important; }
  .me-md-1 { margin-right: 0.25rem !important; }
  .me-md-2 { margin-right: 0.5rem !important; }
  .me-md-3 { margin-right: 1rem !important; }
  .me-md-4 { margin-right: 1.5rem !important; }
  .me-md-5 { margin-right: 3rem !important; }
  .me-md-auto { margin-right: auto !important; }
  .mb-md-0 { margin-bottom: 0px !important; }
  .mb-md-1 { margin-bottom: 0.25rem !important; }
  .mb-md-2 { margin-bottom: 0.5rem !important; }
  .mb-md-3 { margin-bottom: 1rem !important; }
  .mb-md-4 { margin-bottom: 1.5rem !important; }
  .mb-md-5 { margin-bottom: 3rem !important; }
  .mb-md-auto { margin-bottom: auto !important; }
  .ms-md-0 { margin-left: 0px !important; }
  .ms-md-1 { margin-left: 0.25rem !important; }
  .ms-md-2 { margin-left: 0.5rem !important; }
  .ms-md-3 { margin-left: 1rem !important; }
  .ms-md-4 { margin-left: 1.5rem !important; }
  .ms-md-5 { margin-left: 3rem !important; }
  .ms-md-auto { margin-left: auto !important; }
  .p-md-0 { padding: 0px !important; }
  .p-md-1 { padding: 0.25rem !important; }
  .p-md-2 { padding: 0.5rem !important; }
  .p-md-3 { padding: 1rem !important; }
  .p-md-4 { padding: 1.5rem !important; }
  .p-md-5 { padding: 3rem !important; }
  .px-md-0 { padding-right: 0px !important; padding-left: 0px !important; }
  .px-md-1 { padding-right: 0.25rem !important; padding-left: 0.25rem !important; }
  .px-md-2 { padding-right: 0.5rem !important; padding-left: 0.5rem !important; }
  .px-md-3 { padding-right: 1rem !important; padding-left: 1rem !important; }
  .px-md-4 { padding-right: 1.5rem !important; padding-left: 1.5rem !important; }
  .px-md-5 { padding-right: 3rem !important; padding-left: 3rem !important; }
  .py-md-0 { padding-top: 0px !important; padding-bottom: 0px !important; }
  .py-md-1 { padding-top: 0.25rem !important; padding-bottom: 0.25rem !important; }
  .py-md-2 { padding-top: 0.5rem !important; padding-bottom: 0.5rem !important; }
  .py-md-3 { padding-top: 1rem !important; padding-bottom: 1rem !important; }
  .py-md-4 { padding-top: 1.5rem !important; padding-bottom: 1.5rem !important; }
  .py-md-5 { padding-top: 3rem !important; padding-bottom: 3rem !important; }
  .pt-md-0 { padding-top: 0px !important; }
  .pt-md-1 { padding-top: 0.25rem !important; }
  .pt-md-2 { padding-top: 0.5rem !important; }
  .pt-md-3 { padding-top: 1rem !important; }
  .pt-md-4 { padding-top: 1.5rem !important; }
  .pt-md-5 { padding-top: 3rem !important; }
  .pe-md-0 { padding-right: 0px !important; }
  .pe-md-1 { padding-right: 0.25rem !important; }
  .pe-md-2 { padding-right: 0.5rem !important; }
  .pe-md-3 { padding-right: 1rem !important; }
  .pe-md-4 { padding-right: 1.5rem !important; }
  .pe-md-5 { padding-right: 3rem !important; }
  .pb-md-0 { padding-bottom: 0px !important; }
  .pb-md-1 { padding-bottom: 0.25rem !important; }
  .pb-md-2 { padding-bottom: 0.5rem !important; }
  .pb-md-3 { padding-bottom: 1rem !important; }
  .pb-md-4 { padding-bottom: 1.5rem !important; }
  .pb-md-5 { padding-bottom: 3rem !important; }
  .ps-md-0 { padding-left: 0px !important; }
  .ps-md-1 { padding-left: 0.25rem !important; }
  .ps-md-2 { padding-left: 0.5rem !important; }
  .ps-md-3 { padding-left: 1rem !important; }
  .ps-md-4 { padding-left: 1.5rem !important; }
  .ps-md-5 { padding-left: 3rem !important; }
  .text-md-start { text-align: left !important; }
  .text-md-end { text-align: right !important; }
  .text-md-center { text-align: center !important; }
}

@media (min-width: 992px) {
  .float-lg-start { float: left !important; }
  .float-lg-end { float: right !important; }
  .float-lg-none { float: none !important; }
  .d-lg-inline { display: inline !important; }
  .d-lg-inline-block { display: inline-block !important; }
  .d-lg-block { display: block !important; }
  .d-lg-grid { display: grid !important; }
  .d-lg-table { display: table !important; }
  .d-lg-table-row { display: table-row !important; }
  .d-lg-table-cell { display: table-cell !important; }
  .d-lg-flex { display: flex !important; }
  .d-lg-inline-flex { display: inline-flex !important; }
  .d-lg-none { display: none !important; }
  .flex-lg-fill { flex: 1 1 auto !important; }
  .flex-lg-row { flex-direction: row !important; }
  .flex-lg-column { flex-direction: column !important; }
  .flex-lg-row-reverse { flex-direction: row-reverse !important; }
  .flex-lg-column-reverse { flex-direction: column-reverse !important; }
  .flex-lg-grow-0 { flex-grow: 0 !important; }
  .flex-lg-grow-1 { flex-grow: 1 !important; }
  .flex-lg-shrink-0 { flex-shrink: 0 !important; }
  .flex-lg-shrink-1 { flex-shrink: 1 !important; }
  .flex-lg-wrap { flex-wrap: wrap !important; }
  .flex-lg-nowrap { flex-wrap: nowrap !important; }
  .flex-lg-wrap-reverse { flex-wrap: wrap-reverse !important; }
  .gap-lg-0 { gap: 0px !important; }
  .gap-lg-1 { gap: 0.25rem !important; }
  .gap-lg-2 { gap: 0.5rem !important; }
  .gap-lg-3 { gap: 1rem !important; }
  .gap-lg-4 { gap: 1.5rem !important; }
  .gap-lg-5 { gap: 3rem !important; }
  .justify-content-lg-start { justify-content: flex-start !important; }
  .justify-content-lg-end { justify-content: flex-end !important; }
  .justify-content-lg-center { justify-content: center !important; }
  .justify-content-lg-between { justify-content: space-between !important; }
  .justify-content-lg-around { justify-content: space-around !important; }
  .justify-content-lg-evenly { justify-content: space-evenly !important; }
  .align-items-lg-start { align-items: flex-start !important; }
  .align-items-lg-end { align-items: flex-end !important; }
  .align-items-lg-center { align-items: center !important; }
  .align-items-lg-baseline { align-items: baseline !important; }
  .align-items-lg-stretch { align-items: stretch !important; }
  .align-content-lg-start { align-content: flex-start !important; }
  .align-content-lg-end { align-content: flex-end !important; }
  .align-content-lg-center { align-content: center !important; }
  .align-content-lg-between { align-content: space-between !important; }
  .align-content-lg-around { align-content: space-around !important; }
  .align-content-lg-stretch { align-content: stretch !important; }
  .align-self-lg-auto { align-self: auto !important; }
  .align-self-lg-start { align-self: flex-start !important; }
  .align-self-lg-end { align-self: flex-end !important; }
  .align-self-lg-center { align-self: center !important; }
  .align-self-lg-baseline { align-self: baseline !important; }
  .align-self-lg-stretch { align-self: stretch !important; }
  .order-lg-first { order: -1 !important; }
  .order-lg-0 { order: 0 !important; }
  .order-lg-1 { order: 1 !important; }
  .order-lg-2 { order: 2 !important; }
  .order-lg-3 { order: 3 !important; }
  .order-lg-4 { order: 4 !important; }
  .order-lg-5 { order: 5 !important; }
  .order-lg-last { order: 6 !important; }
  .m-lg-0 { margin: 0px !important; }
  .m-lg-1 { margin: 0.25rem !important; }
  .m-lg-2 { margin: 0.5rem !important; }
  .m-lg-3 { margin: 1rem !important; }
  .m-lg-4 { margin: 1.5rem !important; }
  .m-lg-5 { margin: 3rem !important; }
  .m-lg-auto { margin: auto !important; }
  .mx-lg-0 { margin-right: 0px !important; margin-left: 0px !important; }
  .mx-lg-1 { margin-right: 0.25rem !important; margin-left: 0.25rem !important; }
  .mx-lg-2 { margin-right: 0.5rem !important; margin-left: 0.5rem !important; }
  .mx-lg-3 { margin-right: 1rem !important; margin-left: 1rem !important; }
  .mx-lg-4 { margin-right: 1.5rem !important; margin-left: 1.5rem !important; }
  .mx-lg-5 { margin-right: 3rem !important; margin-left: 3rem !important; }
  .mx-lg-auto { margin-right: auto !important; margin-left: auto !important; }
  .my-lg-0 { margin-top: 0px !important; margin-bottom: 0px !important; }
  .my-lg-1 { margin-top: 0.25rem !important; margin-bottom: 0.25rem !important; }
  .my-lg-2 { margin-top: 0.5rem !important; margin-bottom: 0.5rem !important; }
  .my-lg-3 { margin-top: 1rem !important; margin-bottom: 1rem !important; }
  .my-lg-4 { margin-top: 1.5rem !important; margin-bottom: 1.5rem !important; }
  .my-lg-5 { margin-top: 3rem !important; margin-bottom: 3rem !important; }
  .my-lg-auto { margin-top: auto !important; margin-bottom: auto !important; }
  .mt-lg-0 { margin-top: 0px !important; }
  .mt-lg-1 { margin-top: 0.25rem !important; }
  .mt-lg-2 { margin-top: 0.5rem !important; }
  .mt-lg-3 { margin-top: 1rem !important; }
  .mt-lg-4 { margin-top: 1.5rem !important; }
  .mt-lg-5 { margin-top: 3rem !important; }
  .mt-lg-auto { margin-top: auto !important; }
  .me-lg-0 { margin-right: 0px !important; }
  .me-lg-1 { margin-right: 0.25rem !important; }
  .me-lg-2 { margin-right: 0.5rem !important; }
  .me-lg-3 { margin-right: 1rem !important; }
  .me-lg-4 { margin-right: 1.5rem !important; }
  .me-lg-5 { margin-right: 3rem !important; }
  .me-lg-auto { margin-right: auto !important; }
  .mb-lg-0 { margin-bottom: 0px !important; }
  .mb-lg-1 { margin-bottom: 0.25rem !important; }
  .mb-lg-2 { margin-bottom: 0.5rem !important; }
  .mb-lg-3 { margin-bottom: 1rem !important; }
  .mb-lg-4 { margin-bottom: 1.5rem !important; }
  .mb-lg-5 { margin-bottom: 3rem !important; }
  .mb-lg-auto { margin-bottom: auto !important; }
  .ms-lg-0 { margin-left: 0px !important; }
  .ms-lg-1 { margin-left: 0.25rem !important; }
  .ms-lg-2 { margin-left: 0.5rem !important; }
  .ms-lg-3 { margin-left: 1rem !important; }
  .ms-lg-4 { margin-left: 1.5rem !important; }
  .ms-lg-5 { margin-left: 3rem !important; }
  .ms-lg-auto { margin-left: auto !important; }
  .p-lg-0 { padding: 0px !important; }
  .p-lg-1 { padding: 0.25rem !important; }
  .p-lg-2 { padding: 0.5rem !important; }
  .p-lg-3 { padding: 1rem !important; }
  .p-lg-4 { padding: 1.5rem !important; }
  .p-lg-5 { padding: 3rem !important; }
  .px-lg-0 { padding-right: 0px !important; padding-left: 0px !important; }
  .px-lg-1 { padding-right: 0.25rem !important; padding-left: 0.25rem !important; }
  .px-lg-2 { padding-right: 0.5rem !important; padding-left: 0.5rem !important; }
  .px-lg-3 { padding-right: 1rem !important; padding-left: 1rem !important; }
  .px-lg-4 { padding-right: 1.5rem !important; padding-left: 1.5rem !important; }
  .px-lg-5 { padding-right: 3rem !important; padding-left: 3rem !important; }
  .py-lg-0 { padding-top: 0px !important; padding-bottom: 0px !important; }
  .py-lg-1 { padding-top: 0.25rem !important; padding-bottom: 0.25rem !important; }
  .py-lg-2 { padding-top: 0.5rem !important; padding-bottom: 0.5rem !important; }
  .py-lg-3 { padding-top: 1rem !important; padding-bottom: 1rem !important; }
  .py-lg-4 { padding-top: 1.5rem !important; padding-bottom: 1.5rem !important; }
  .py-lg-5 { padding-top: 3rem !important; padding-bottom: 3rem !important; }
  .pt-lg-0 { padding-top: 0px !important; }
  .pt-lg-1 { padding-top: 0.25rem !important; }
  .pt-lg-2 { padding-top: 0.5rem !important; }
  .pt-lg-3 { padding-top: 1rem !important; }
  .pt-lg-4 { padding-top: 1.5rem !important; }
  .pt-lg-5 { padding-top: 3rem !important; }
  .pe-lg-0 { padding-right: 0px !important; }
  .pe-lg-1 { padding-right: 0.25rem !important; }
  .pe-lg-2 { padding-right: 0.5rem !important; }
  .pe-lg-3 { padding-right: 1rem !important; }
  .pe-lg-4 { padding-right: 1.5rem !important; }
  .pe-lg-5 { padding-right: 3rem !important; }
  .pb-lg-0 { padding-bottom: 0px !important; }
  .pb-lg-1 { padding-bottom: 0.25rem !important; }
  .pb-lg-2 { padding-bottom: 0.5rem !important; }
  .pb-lg-3 { padding-bottom: 1rem !important; }
  .pb-lg-4 { padding-bottom: 1.5rem !important; }
  .pb-lg-5 { padding-bottom: 3rem !important; }
  .ps-lg-0 { padding-left: 0px !important; }
  .ps-lg-1 { padding-left: 0.25rem !important; }
  .ps-lg-2 { padding-left: 0.5rem !important; }
  .ps-lg-3 { padding-left: 1rem !important; }
  .ps-lg-4 { padding-left: 1.5rem !important; }
  .ps-lg-5 { padding-left: 3rem !important; }
  .text-lg-start { text-align: left !important; }
  .text-lg-end { text-align: right !important; }
  .text-lg-center { text-align: center !important; }
}

@media (min-width: 1200px) {
  .float-xl-start { float: left !important; }
  .float-xl-end { float: right !important; }
  .float-xl-none { float: none !important; }
  .d-xl-inline { display: inline !important; }
  .d-xl-inline-block { display: inline-block !important; }
  .d-xl-block { display: block !important; }
  .d-xl-grid { display: grid !important; }
  .d-xl-table { display: table !important; }
  .d-xl-table-row { display: table-row !important; }
  .d-xl-table-cell { display: table-cell !important; }
  .d-xl-flex { display: flex !important; }
  .d-xl-inline-flex { display: inline-flex !important; }
  .d-xl-none { display: none !important; }
  .flex-xl-fill { flex: 1 1 auto !important; }
  .flex-xl-row { flex-direction: row !important; }
  .flex-xl-column { flex-direction: column !important; }
  .flex-xl-row-reverse { flex-direction: row-reverse !important; }
  .flex-xl-column-reverse { flex-direction: column-reverse !important; }
  .flex-xl-grow-0 { flex-grow: 0 !important; }
  .flex-xl-grow-1 { flex-grow: 1 !important; }
  .flex-xl-shrink-0 { flex-shrink: 0 !important; }
  .flex-xl-shrink-1 { flex-shrink: 1 !important; }
  .flex-xl-wrap { flex-wrap: wrap !important; }
  .flex-xl-nowrap { flex-wrap: nowrap !important; }
  .flex-xl-wrap-reverse { flex-wrap: wrap-reverse !important; }
  .gap-xl-0 { gap: 0px !important; }
  .gap-xl-1 { gap: 0.25rem !important; }
  .gap-xl-2 { gap: 0.5rem !important; }
  .gap-xl-3 { gap: 1rem !important; }
  .gap-xl-4 { gap: 1.5rem !important; }
  .gap-xl-5 { gap: 3rem !important; }
  .justify-content-xl-start { justify-content: flex-start !important; }
  .justify-content-xl-end { justify-content: flex-end !important; }
  .justify-content-xl-center { justify-content: center !important; }
  .justify-content-xl-between { justify-content: space-between !important; }
  .justify-content-xl-around { justify-content: space-around !important; }
  .justify-content-xl-evenly { justify-content: space-evenly !important; }
  .align-items-xl-start { align-items: flex-start !important; }
  .align-items-xl-end { align-items: flex-end !important; }
  .align-items-xl-center { align-items: center !important; }
  .align-items-xl-baseline { align-items: baseline !important; }
  .align-items-xl-stretch { align-items: stretch !important; }
  .align-content-xl-start { align-content: flex-start !important; }
  .align-content-xl-end { align-content: flex-end !important; }
  .align-content-xl-center { align-content: center !important; }
  .align-content-xl-between { align-content: space-between !important; }
  .align-content-xl-around { align-content: space-around !important; }
  .align-content-xl-stretch { align-content: stretch !important; }
  .align-self-xl-auto { align-self: auto !important; }
  .align-self-xl-start { align-self: flex-start !important; }
  .align-self-xl-end { align-self: flex-end !important; }
  .align-self-xl-center { align-self: center !important; }
  .align-self-xl-baseline { align-self: baseline !important; }
  .align-self-xl-stretch { align-self: stretch !important; }
  .order-xl-first { order: -1 !important; }
  .order-xl-0 { order: 0 !important; }
  .order-xl-1 { order: 1 !important; }
  .order-xl-2 { order: 2 !important; }
  .order-xl-3 { order: 3 !important; }
  .order-xl-4 { order: 4 !important; }
  .order-xl-5 { order: 5 !important; }
  .order-xl-last { order: 6 !important; }
  .m-xl-0 { margin: 0px !important; }
  .m-xl-1 { margin: 0.25rem !important; }
  .m-xl-2 { margin: 0.5rem !important; }
  .m-xl-3 { margin: 1rem !important; }
  .m-xl-4 { margin: 1.5rem !important; }
  .m-xl-5 { margin: 3rem !important; }
  .m-xl-auto { margin: auto !important; }
  .mx-xl-0 { margin-right: 0px !important; margin-left: 0px !important; }
  .mx-xl-1 { margin-right: 0.25rem !important; margin-left: 0.25rem !important; }
  .mx-xl-2 { margin-right: 0.5rem !important; margin-left: 0.5rem !important; }
  .mx-xl-3 { margin-right: 1rem !important; margin-left: 1rem !important; }
  .mx-xl-4 { margin-right: 1.5rem !important; margin-left: 1.5rem !important; }
  .mx-xl-5 { margin-right: 3rem !important; margin-left: 3rem !important; }
  .mx-xl-auto { margin-right: auto !important; margin-left: auto !important; }
  .my-xl-0 { margin-top: 0px !important; margin-bottom: 0px !important; }
  .my-xl-1 { margin-top: 0.25rem !important; margin-bottom: 0.25rem !important; }
  .my-xl-2 { margin-top: 0.5rem !important; margin-bottom: 0.5rem !important; }
  .my-xl-3 { margin-top: 1rem !important; margin-bottom: 1rem !important; }
  .my-xl-4 { margin-top: 1.5rem !important; margin-bottom: 1.5rem !important; }
  .my-xl-5 { margin-top: 3rem !important; margin-bottom: 3rem !important; }
  .my-xl-auto { margin-top: auto !important; margin-bottom: auto !important; }
  .mt-xl-0 { margin-top: 0px !important; }
  .mt-xl-1 { margin-top: 0.25rem !important; }
  .mt-xl-2 { margin-top: 0.5rem !important; }
  .mt-xl-3 { margin-top: 1rem !important; }
  .mt-xl-4 { margin-top: 1.5rem !important; }
  .mt-xl-5 { margin-top: 3rem !important; }
  .mt-xl-auto { margin-top: auto !important; }
  .me-xl-0 { margin-right: 0px !important; }
  .me-xl-1 { margin-right: 0.25rem !important; }
  .me-xl-2 { margin-right: 0.5rem !important; }
  .me-xl-3 { margin-right: 1rem !important; }
  .me-xl-4 { margin-right: 1.5rem !important; }
  .me-xl-5 { margin-right: 3rem !important; }
  .me-xl-auto { margin-right: auto !important; }
  .mb-xl-0 { margin-bottom: 0px !important; }
  .mb-xl-1 { margin-bottom: 0.25rem !important; }
  .mb-xl-2 { margin-bottom: 0.5rem !important; }
  .mb-xl-3 { margin-bottom: 1rem !important; }
  .mb-xl-4 { margin-bottom: 1.5rem !important; }
  .mb-xl-5 { margin-bottom: 3rem !important; }
  .mb-xl-auto { margin-bottom: auto !important; }
  .ms-xl-0 { margin-left: 0px !important; }
  .ms-xl-1 { margin-left: 0.25rem !important; }
  .ms-xl-2 { margin-left: 0.5rem !important; }
  .ms-xl-3 { margin-left: 1rem !important; }
  .ms-xl-4 { margin-left: 1.5rem !important; }
  .ms-xl-5 { margin-left: 3rem !important; }
  .ms-xl-auto { margin-left: auto !important; }
  .p-xl-0 { padding: 0px !important; }
  .p-xl-1 { padding: 0.25rem !important; }
  .p-xl-2 { padding: 0.5rem !important; }
  .p-xl-3 { padding: 1rem !important; }
  .p-xl-4 { padding: 1.5rem !important; }
  .p-xl-5 { padding: 3rem !important; }
  .px-xl-0 { padding-right: 0px !important; padding-left: 0px !important; }
  .px-xl-1 { padding-right: 0.25rem !important; padding-left: 0.25rem !important; }
  .px-xl-2 { padding-right: 0.5rem !important; padding-left: 0.5rem !important; }
  .px-xl-3 { padding-right: 1rem !important; padding-left: 1rem !important; }
  .px-xl-4 { padding-right: 1.5rem !important; padding-left: 1.5rem !important; }
  .px-xl-5 { padding-right: 3rem !important; padding-left: 3rem !important; }
  .py-xl-0 { padding-top: 0px !important; padding-bottom: 0px !important; }
  .py-xl-1 { padding-top: 0.25rem !important; padding-bottom: 0.25rem !important; }
  .py-xl-2 { padding-top: 0.5rem !important; padding-bottom: 0.5rem !important; }
  .py-xl-3 { padding-top: 1rem !important; padding-bottom: 1rem !important; }
  .py-xl-4 { padding-top: 1.5rem !important; padding-bottom: 1.5rem !important; }
  .py-xl-5 { padding-top: 3rem !important; padding-bottom: 3rem !important; }
  .pt-xl-0 { padding-top: 0px !important; }
  .pt-xl-1 { padding-top: 0.25rem !important; }
  .pt-xl-2 { padding-top: 0.5rem !important; }
  .pt-xl-3 { padding-top: 1rem !important; }
  .pt-xl-4 { padding-top: 1.5rem !important; }
  .pt-xl-5 { padding-top: 3rem !important; }
  .pe-xl-0 { padding-right: 0px !important; }
  .pe-xl-1 { padding-right: 0.25rem !important; }
  .pe-xl-2 { padding-right: 0.5rem !important; }
  .pe-xl-3 { padding-right: 1rem !important; }
  .pe-xl-4 { padding-right: 1.5rem !important; }
  .pe-xl-5 { padding-right: 3rem !important; }
  .pb-xl-0 { padding-bottom: 0px !important; }
  .pb-xl-1 { padding-bottom: 0.25rem !important; }
  .pb-xl-2 { padding-bottom: 0.5rem !important; }
  .pb-xl-3 { padding-bottom: 1rem !important; }
  .pb-xl-4 { padding-bottom: 1.5rem !important; }
  .pb-xl-5 { padding-bottom: 3rem !important; }
  .ps-xl-0 { padding-left: 0px !important; }
  .ps-xl-1 { padding-left: 0.25rem !important; }
  .ps-xl-2 { padding-left: 0.5rem !important; }
  .ps-xl-3 { padding-left: 1rem !important; }
  .ps-xl-4 { padding-left: 1.5rem !important; }
  .ps-xl-5 { padding-left: 3rem !important; }
  .text-xl-start { text-align: left !important; }
  .text-xl-end { text-align: right !important; }
  .text-xl-center { text-align: center !important; }
}

@media (min-width: 1400px) {
  .float-xxl-start { float: left !important; }
  .float-xxl-end { float: right !important; }
  .float-xxl-none { float: none !important; }
  .d-xxl-inline { display: inline !important; }
  .d-xxl-inline-block { display: inline-block !important; }
  .d-xxl-block { display: block !important; }
  .d-xxl-grid { display: grid !important; }
  .d-xxl-table { display: table !important; }
  .d-xxl-table-row { display: table-row !important; }
  .d-xxl-table-cell { display: table-cell !important; }
  .d-xxl-flex { display: flex !important; }
  .d-xxl-inline-flex { display: inline-flex !important; }
  .d-xxl-none { display: none !important; }
  .flex-xxl-fill { flex: 1 1 auto !important; }
  .flex-xxl-row { flex-direction: row !important; }
  .flex-xxl-column { flex-direction: column !important; }
  .flex-xxl-row-reverse { flex-direction: row-reverse !important; }
  .flex-xxl-column-reverse { flex-direction: column-reverse !important; }
  .flex-xxl-grow-0 { flex-grow: 0 !important; }
  .flex-xxl-grow-1 { flex-grow: 1 !important; }
  .flex-xxl-shrink-0 { flex-shrink: 0 !important; }
  .flex-xxl-shrink-1 { flex-shrink: 1 !important; }
  .flex-xxl-wrap { flex-wrap: wrap !important; }
  .flex-xxl-nowrap { flex-wrap: nowrap !important; }
  .flex-xxl-wrap-reverse { flex-wrap: wrap-reverse !important; }
  .gap-xxl-0 { gap: 0px !important; }
  .gap-xxl-1 { gap: 0.25rem !important; }
  .gap-xxl-2 { gap: 0.5rem !important; }
  .gap-xxl-3 { gap: 1rem !important; }
  .gap-xxl-4 { gap: 1.5rem !important; }
  .gap-xxl-5 { gap: 3rem !important; }
  .justify-content-xxl-start { justify-content: flex-start !important; }
  .justify-content-xxl-end { justify-content: flex-end !important; }
  .justify-content-xxl-center { justify-content: center !important; }
  .justify-content-xxl-between { justify-content: space-between !important; }
  .justify-content-xxl-around { justify-content: space-around !important; }
  .justify-content-xxl-evenly { justify-content: space-evenly !important; }
  .align-items-xxl-start { align-items: flex-start !important; }
  .align-items-xxl-end { align-items: flex-end !important; }
  .align-items-xxl-center { align-items: center !important; }
  .align-items-xxl-baseline { align-items: baseline !important; }
  .align-items-xxl-stretch { align-items: stretch !important; }
  .align-content-xxl-start { align-content: flex-start !important; }
  .align-content-xxl-end { align-content: flex-end !important; }
  .align-content-xxl-center { align-content: center !important; }
  .align-content-xxl-between { align-content: space-between !important; }
  .align-content-xxl-around { align-content: space-around !important; }
  .align-content-xxl-stretch { align-content: stretch !important; }
  .align-self-xxl-auto { align-self: auto !important; }
  .align-self-xxl-start { align-self: flex-start !important; }
  .align-self-xxl-end { align-self: flex-end !important; }
  .align-self-xxl-center { align-self: center !important; }
  .align-self-xxl-baseline { align-self: baseline !important; }
  .align-self-xxl-stretch { align-self: stretch !important; }
  .order-xxl-first { order: -1 !important; }
  .order-xxl-0 { order: 0 !important; }
  .order-xxl-1 { order: 1 !important; }
  .order-xxl-2 { order: 2 !important; }
  .order-xxl-3 { order: 3 !important; }
  .order-xxl-4 { order: 4 !important; }
  .order-xxl-5 { order: 5 !important; }
  .order-xxl-last { order: 6 !important; }
  .m-xxl-0 { margin: 0px !important; }
  .m-xxl-1 { margin: 0.25rem !important; }
  .m-xxl-2 { margin: 0.5rem !important; }
  .m-xxl-3 { margin: 1rem !important; }
  .m-xxl-4 { margin: 1.5rem !important; }
  .m-xxl-5 { margin: 3rem !important; }
  .m-xxl-auto { margin: auto !important; }
  .mx-xxl-0 { margin-right: 0px !important; margin-left: 0px !important; }
  .mx-xxl-1 { margin-right: 0.25rem !important; margin-left: 0.25rem !important; }
  .mx-xxl-2 { margin-right: 0.5rem !important; margin-left: 0.5rem !important; }
  .mx-xxl-3 { margin-right: 1rem !important; margin-left: 1rem !important; }
  .mx-xxl-4 { margin-right: 1.5rem !important; margin-left: 1.5rem !important; }
  .mx-xxl-5 { margin-right: 3rem !important; margin-left: 3rem !important; }
  .mx-xxl-auto { margin-right: auto !important; margin-left: auto !important; }
  .my-xxl-0 { margin-top: 0px !important; margin-bottom: 0px !important; }
  .my-xxl-1 { margin-top: 0.25rem !important; margin-bottom: 0.25rem !important; }
  .my-xxl-2 { margin-top: 0.5rem !important; margin-bottom: 0.5rem !important; }
  .my-xxl-3 { margin-top: 1rem !important; margin-bottom: 1rem !important; }
  .my-xxl-4 { margin-top: 1.5rem !important; margin-bottom: 1.5rem !important; }
  .my-xxl-5 { margin-top: 3rem !important; margin-bottom: 3rem !important; }
  .my-xxl-auto { margin-top: auto !important; margin-bottom: auto !important; }
  .mt-xxl-0 { margin-top: 0px !important; }
  .mt-xxl-1 { margin-top: 0.25rem !important; }
  .mt-xxl-2 { margin-top: 0.5rem !important; }
  .mt-xxl-3 { margin-top: 1rem !important; }
  .mt-xxl-4 { margin-top: 1.5rem !important; }
  .mt-xxl-5 { margin-top: 3rem !important; }
  .mt-xxl-auto { margin-top: auto !important; }
  .me-xxl-0 { margin-right: 0px !important; }
  .me-xxl-1 { margin-right: 0.25rem !important; }
  .me-xxl-2 { margin-right: 0.5rem !important; }
  .me-xxl-3 { margin-right: 1rem !important; }
  .me-xxl-4 { margin-right: 1.5rem !important; }
  .me-xxl-5 { margin-right: 3rem !important; }
  .me-xxl-auto { margin-right: auto !important; }
  .mb-xxl-0 { margin-bottom: 0px !important; }
  .mb-xxl-1 { margin-bottom: 0.25rem !important; }
  .mb-xxl-2 { margin-bottom: 0.5rem !important; }
  .mb-xxl-3 { margin-bottom: 1rem !important; }
  .mb-xxl-4 { margin-bottom: 1.5rem !important; }
  .mb-xxl-5 { margin-bottom: 3rem !important; }
  .mb-xxl-auto { margin-bottom: auto !important; }
  .ms-xxl-0 { margin-left: 0px !important; }
  .ms-xxl-1 { margin-left: 0.25rem !important; }
  .ms-xxl-2 { margin-left: 0.5rem !important; }
  .ms-xxl-3 { margin-left: 1rem !important; }
  .ms-xxl-4 { margin-left: 1.5rem !important; }
  .ms-xxl-5 { margin-left: 3rem !important; }
  .ms-xxl-auto { margin-left: auto !important; }
  .p-xxl-0 { padding: 0px !important; }
  .p-xxl-1 { padding: 0.25rem !important; }
  .p-xxl-2 { padding: 0.5rem !important; }
  .p-xxl-3 { padding: 1rem !important; }
  .p-xxl-4 { padding: 1.5rem !important; }
  .p-xxl-5 { padding: 3rem !important; }
  .px-xxl-0 { padding-right: 0px !important; padding-left: 0px !important; }
  .px-xxl-1 { padding-right: 0.25rem !important; padding-left: 0.25rem !important; }
  .px-xxl-2 { padding-right: 0.5rem !important; padding-left: 0.5rem !important; }
  .px-xxl-3 { padding-right: 1rem !important; padding-left: 1rem !important; }
  .px-xxl-4 { padding-right: 1.5rem !important; padding-left: 1.5rem !important; }
  .px-xxl-5 { padding-right: 3rem !important; padding-left: 3rem !important; }
  .py-xxl-0 { padding-top: 0px !important; padding-bottom: 0px !important; }
  .py-xxl-1 { padding-top: 0.25rem !important; padding-bottom: 0.25rem !important; }
  .py-xxl-2 { padding-top: 0.5rem !important; padding-bottom: 0.5rem !important; }
  .py-xxl-3 { padding-top: 1rem !important; padding-bottom: 1rem !important; }
  .py-xxl-4 { padding-top: 1.5rem !important; padding-bottom: 1.5rem !important; }
  .py-xxl-5 { padding-top: 3rem !important; padding-bottom: 3rem !important; }
  .pt-xxl-0 { padding-top: 0px !important; }
  .pt-xxl-1 { padding-top: 0.25rem !important; }
  .pt-xxl-2 { padding-top: 0.5rem !important; }
  .pt-xxl-3 { padding-top: 1rem !important; }
  .pt-xxl-4 { padding-top: 1.5rem !important; }
  .pt-xxl-5 { padding-top: 3rem !important; }
  .pe-xxl-0 { padding-right: 0px !important; }
  .pe-xxl-1 { padding-right: 0.25rem !important; }
  .pe-xxl-2 { padding-right: 0.5rem !important; }
  .pe-xxl-3 { padding-right: 1rem !important; }
  .pe-xxl-4 { padding-right: 1.5rem !important; }
  .pe-xxl-5 { padding-right: 3rem !important; }
  .pb-xxl-0 { padding-bottom: 0px !important; }
  .pb-xxl-1 { padding-bottom: 0.25rem !important; }
  .pb-xxl-2 { padding-bottom: 0.5rem !important; }
  .pb-xxl-3 { padding-bottom: 1rem !important; }
  .pb-xxl-4 { padding-bottom: 1.5rem !important; }
  .pb-xxl-5 { padding-bottom: 3rem !important; }
  .ps-xxl-0 { padding-left: 0px !important; }
  .ps-xxl-1 { padding-left: 0.25rem !important; }
  .ps-xxl-2 { padding-left: 0.5rem !important; }
  .ps-xxl-3 { padding-left: 1rem !important; }
  .ps-xxl-4 { padding-left: 1.5rem !important; }
  .ps-xxl-5 { padding-left: 3rem !important; }
  .text-xxl-start { text-align: left !important; }
  .text-xxl-end { text-align: right !important; }
  .text-xxl-center { text-align: center !important; }
}

@media (min-width: 1200px) {
  .fs-1 { font-size: 2.5rem !important; }
  .fs-2 { font-size: 2rem !important; }
  .fs-3 { font-size: 1.75rem !important; }
  .fs-4 { font-size: 1.5rem !important; }
}

@media print {
  .d-print-inline { display: inline !important; }
  .d-print-inline-block { display: inline-block !important; }
  .d-print-block { display: block !important; }
  .d-print-grid { display: grid !important; }
  .d-print-table { display: table !important; }
  .d-print-table-row { display: table-row !important; }
  .d-print-table-cell { display: table-cell !important; }
  .d-print-flex { display: flex !important; }
  .d-print-inline-flex { display: inline-flex !important; }
  .d-print-none { display: none !important; }
}
------MultipartBoundary--42RUKswPkJoFcXtXRQMfSJHaGrWLU1MbiIJyTI5ZSP----
Content-Type: text/css
Content-Transfer-Encoding: binary
Content-Location: https://fonts.googleapis.com/css2?family=DM+Sans:ital,wght@0,400;0,500;0,700;1,400;1,500;1,700&Courier+Prime:wght@400;700&display=swap

@charset "utf-8";

@font-face { font-family: "DM Sans"; font-style: italic; font-weight: 400; font-display: swap; src: url("https://fonts.gstatic.com/s/dmsans/v15/rP2Wp2ywxg089UriCZaSExd86J3t9jz86MvyyKK58UfivUw4aw.woff2") format("woff2"); unicode-range: U+100-2AF, U+304, U+308, U+329, U+1E00-1E9F, U+1EF2-1EFF, U+2020, U+20A0-20AB, U+20AD-20C0, U+2113, U+2C60-2C7F, U+A720-A7FF; }

@font-face { font-family: "DM Sans"; font-style: italic; font-weight: 400; font-display: swap; src: url("https://fonts.gstatic.com/s/dmsans/v15/rP2Wp2ywxg089UriCZaSExd86J3t9jz86MvyyKy58UfivUw.woff2") format("woff2"); unicode-range: U+0-FF, U+131, U+152-153, U+2BB-2BC, U+2C6, U+2DA, U+2DC, U+304, U+308, U+329, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD; }

@font-face { font-family: "DM Sans"; font-style: italic; font-weight: 500; font-display: swap; src: url("https://fonts.gstatic.com/s/dmsans/v15/rP2Wp2ywxg089UriCZaSExd86J3t9jz86MvyyKK58UfivUw4aw.woff2") format("woff2"); unicode-range: U+100-2AF, U+304, U+308, U+329, U+1E00-1E9F, U+1EF2-1EFF, U+2020, U+20A0-20AB, U+20AD-20C0, U+2113, U+2C60-2C7F, U+A720-A7FF; }

@font-face { font-family: "DM Sans"; font-style: italic; font-weight: 500; font-display: swap; src: url("https://fonts.gstatic.com/s/dmsans/v15/rP2Wp2ywxg089UriCZaSExd86J3t9jz86MvyyKy58UfivUw.woff2") format("woff2"); unicode-range: U+0-FF, U+131, U+152-153, U+2BB-2BC, U+2C6, U+2DA, U+2DC, U+304, U+308, U+329, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD; }

@font-face { font-family: "DM Sans"; font-style: italic; font-weight: 700; font-display: swap; src: url("https://fonts.gstatic.com/s/dmsans/v15/rP2Wp2ywxg089UriCZaSExd86J3t9jz86MvyyKK58UfivUw4aw.woff2") format("woff2"); unicode-range: U+100-2AF, U+304, U+308, U+329, U+1E00-1E9F, U+1EF2-1EFF, U+2020, U+20A0-20AB, U+20AD-20C0, U+2113, U+2C60-2C7F, U+A720-A7FF; }

@font-face { font-family: "DM Sans"; font-style: italic; font-weight: 700; font-display: swap; src: url("https://fonts.gstatic.com/s/dmsans/v15/rP2Wp2ywxg089UriCZaSExd86J3t9jz86MvyyKy58UfivUw.woff2") format("woff2"); unicode-range: U+0-FF, U+131, U+152-153, U+2BB-2BC, U+2C6, U+2DA, U+2DC, U+304, U+308, U+329, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD; }

@font-face { font-family: "DM Sans"; font-style: normal; font-weight: 400; font-display: swap; src: url("https://fonts.gstatic.com/s/dmsans/v15/rP2Yp2ywxg089UriI5-g4vlH9VoD8Cmcqbu6-K6z9mXgjU0.woff2") format("woff2"); unicode-range: U+100-2AF, U+304, U+308, U+329, U+1E00-1E9F, U+1EF2-1EFF, U+2020, U+20A0-20AB, U+20AD-20C0, U+2113, U+2C60-2C7F, U+A720-A7FF; }

@font-face { font-family: "DM Sans"; font-style: normal; font-weight: 400; font-display: swap; src: url("https://fonts.gstatic.com/s/dmsans/v15/rP2Yp2ywxg089UriI5-g4vlH9VoD8Cmcqbu0-K6z9mXg.woff2") format("woff2"); unicode-range: U+0-FF, U+131, U+152-153, U+2BB-2BC, U+2C6, U+2DA, U+2DC, U+304, U+308, U+329, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD; }

@font-face { font-family: "DM Sans"; font-style: normal; font-weight: 500; font-display: swap; src: url("https://fonts.gstatic.com/s/dmsans/v15/rP2Yp2ywxg089UriI5-g4vlH9VoD8Cmcqbu6-K6z9mXgjU0.woff2") format("woff2"); unicode-range: U+100-2AF, U+304, U+308, U+329, U+1E00-1E9F, U+1EF2-1EFF, U+2020, U+20A0-20AB, U+20AD-20C0, U+2113, U+2C60-2C7F, U+A720-A7FF; }

@font-face { font-family: "DM Sans"; font-style: normal; font-weight: 500; font-display: swap; src: url("https://fonts.gstatic.com/s/dmsans/v15/rP2Yp2ywxg089UriI5-g4vlH9VoD8Cmcqbu0-K6z9mXg.woff2") format("woff2"); unicode-range: U+0-FF, U+131, U+152-153, U+2BB-2BC, U+2C6, U+2DA, U+2DC, U+304, U+308, U+329, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD; }

@font-face { font-family: "DM Sans"; font-style: normal; font-weight: 700; font-display: swap; src: url("https://fonts.gstatic.com/s/dmsans/v15/rP2Yp2ywxg089UriI5-g4vlH9VoD8Cmcqbu6-K6z9mXgjU0.woff2") format("woff2"); unicode-range: U+100-2AF, U+304, U+308, U+329, U+1E00-1E9F, U+1EF2-1EFF, U+2020, U+20A0-20AB, U+20AD-20C0, U+2113, U+2C60-2C7F, U+A720-A7FF; }

@font-face { font-family: "DM Sans"; font-style: normal; font-weight: 700; font-display: swap; src: url("https://fonts.gstatic.com/s/dmsans/v15/rP2Yp2ywxg089UriI5-g4vlH9VoD8Cmcqbu0-K6z9mXg.woff2") format("woff2"); unicode-range: U+0-FF, U+131, U+152-153, U+2BB-2BC, U+2C6, U+2DA, U+2DC, U+304, U+308, U+329, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD; }
------MultipartBoundary--42RUKswPkJoFcXtXRQMfSJHaGrWLU1MbiIJyTI5ZSP----
Content-Type: text/css
Content-Transfer-Encoding: binary
Content-Location: https://spark.apache.org/docs/latest/css/custom.css

@charset "utf-8";

body { color: rgb(102, 102, 102); font-family: "DM Sans", sans-serif; font-style: normal; font-weight: 400; overflow-wrap: anywhere; overflow-x: auto; padding-top: 80px; }

a { color: rgb(47, 164, 231); text-decoration: none; }

a:hover, a:focus { color: rgb(21, 122, 181); text-decoration: underline; }

.navbar { border-radius: 0px; z-index: 9999; }

.navbar { transition: none 0s ease 0s !important; }

.navbar .nav-item:hover .dropdown-menu, .navbar .nav-item .dropdown-menu, .navbar .dropdown-menu.fade-down, .navbar-toggler, .collapse, .collapsing { transition: none 0s ease 0s !important; transform: none !important; }

@media (min-width: 992px) {
  .navbar .nav-item .dropdown-menu { display: block; opacity: 0; visibility: hidden; margin-top: 0px; transition: none 0s ease 0s !important; }
  .navbar .dropdown-menu.fade-down { top: 80%; transform-origin: 0% 0%; transform: none !important; }
  .navbar .dropdown-menu.fade-up { top: 180%; }
  .navbar .nav-item:hover .dropdown-menu { opacity: 1; visibility: visible; top: 100%; font-size: calc(0.51rem + 0.55vw); }
}

.navbar-nav { font-style: normal; font-weight: 500; font-size: calc(0.51rem + 0.55vw); line-height: 20px; }

.navbar-nav a { text-decoration: none !important; }

.navbar-dark .navbar-nav .nav-link.active, .navbar-dark .navbar-nav .show > .nav-link, .navbar-dark .navbar-nav .nav-link { color: rgb(255, 255, 255); border: 1px solid transparent; }

.navbar-dark .navbar-nav .nav-link:focus, .navbar-dark .navbar-nav .nav-link:active, .navbar-dark .navbar-nav .nav-link:focus, .navbar-dark .navbar-nav .nav-link:hover { color: rgb(255, 255, 255); background-color: rgb(27, 97, 142); border: 1px solid transparent; text-decoration: none; }

section { position: relative; }

.navbar-dark .navbar-toggler { color: rgb(255, 255, 255); border: none transparent; }

.hero-banner .container .row h1 { color: rgb(11, 154, 206); font-style: normal; font-weight: normal; font-size: 48px; line-height: 63px; letter-spacing: -0.045em; }

.what-is-spark { font-style: normal; font-weight: normal; font-size: 17px; line-height: 24px; }

.btn-cta { background: rgb(245, 91, 20); border-radius: 4px; font-style: normal; font-weight: bold; font-size: 16px; line-height: 23px; text-align: center; letter-spacing: 1px; text-transform: uppercase; color: rgb(255, 255, 255); }

.btn-cta:hover { background: rgb(202, 64, 0); color: rgb(255, 255, 255); text-decoration: none; }

.spark-star-bg { background: url("../images/spark-start.svg") no-repeat; width: 907.5px; height: 726px; position: absolute; right: 70px; }

.apache-spark-motto { margin-top: 150px; position: relative; font-style: normal; font-weight: bold; font-size: calc(3.2rem + 3.3vw); line-height: 113px; letter-spacing: -0.05em; color: rgb(138, 138, 138); }

@media screen and (min-width: 1900px) {
  .apache-spark-motto { font-size: 7.3rem; }
}

.features .title { margin-top: 24px; font-style: normal; font-weight: bold; font-size: 21px; line-height: 33px; color: rgb(11, 154, 206); }

.features .details { color: rgb(0, 0, 0); margin-top: 20px; font-style: normal; font-weight: normal; font-size: 17px; line-height: 24px; margin-right: 20px; }

.spark-run-now { background-color: rgb(29, 104, 144); }

.spark-run-now nav { background-color: rgb(27, 66, 87); color: rgb(255, 255, 255); }

.spark-run-now .nav-link:focus, .nav-link:hover { color: rgb(255, 255, 255); border: 1px solid transparent; }

.spark-run-now .nav-tabs .nav-item.show .nav-link, .spark-run-now .nav-tabs .nav-link.active { color: rgb(255, 255, 255); background-color: rgb(29, 104, 144); border: none; }

.spark-run-now .nav-tabs .nav-link:focus, .spark-run-now .nav-tabs .nav-link:hover { outline: none; background-color: rgb(29, 104, 144); border: 1px solid transparent; }

.spark-run-now .nav-link { color: rgb(255, 255, 255); border-radius: 0px; padding: 10px; font-style: normal; font-weight: bold; font-size: 20px; line-height: 33px; text-align: center; }

.spark-run-now .tab-content { color: rgb(255, 255, 255); }

.spark-run-now .title { font-style: normal; font-weight: bold; font-size: 20px; line-height: 42px; }

.spark-code { border-top: 2px solid rgb(0, 0, 0); }

.spark-install .code { color: rgb(0, 0, 0); background-color: rgb(255, 255, 255); padding: 15px; font-family: Menlo, "Lucida Console", Consolas, monospace; font-style: normal; font-weight: normal; font-size: 14px; line-height: 1.42857; }

.spark-install .code p { margin: 0px; }

.spark-install .code .orange { color: rgb(223, 88, 78); }

.spark-install .code .green { color: rgb(87, 159, 82); }

.spark-install .code .blue { color: rgb(32, 136, 187); }

.spark-install .code .purple { color: rgb(167, 62, 167); }

.spark-install .code .brown { color: rgb(151, 103, 22); }

.examples { color: rgb(102, 102, 102); padding: 12px 0px 0px; background-color: rgb(255, 255, 255); border-radius: 10px; }

.examples .nav-tabs { background-color: rgb(240, 240, 240); }

.spark-run-now .examples .tab-content { color: rgb(102, 102, 102); }

.spark-run-now .examples nav { border: 1px solid rgb(0, 0, 0); }

.spark-run-now .examples .nav-link { padding: 6px 5px; border-right: 1px solid rgb(0, 0, 0); font-style: normal; font-weight: normal; font-size: 15px; line-height: 19px; }

.spark-run-now .examples .nav-link { color: rgb(102, 102, 102); box-shadow: rgba(0, 0, 0, 0.25) 0px 4px 4px; }

.spark-run-now .examples .nav-link:hover { color: rgb(255, 255, 255); }

.window { height: 30px; padding: 0px 10px; }

.circle { border-radius: 50%; height: 17px; width: 17px; display: inline-block; margin: 2px; }

.circle.red { background-color: rgb(251, 97, 90); }

.circle.yellow { background-color: rgb(253, 188, 64); }

.circle.green { background-color: rgb(62, 198, 72); }

.nav-tabs .nav-link { margin-bottom: 0px; }

.spark-run-now .examples .nav-tabs .nav-link:focus, .spark-run-now .examples .nav-tabs .nav-link:hover, .spark-run-now .examples .nav-tabs .nav-link:active { border-right: 1px solid; }

.spark-run-now .examples .nav-tabs .nav-item.show .nav-link, .spark-run-now .examples .nav-tabs .nav-link.active { border-right: 1px solid rgb(102, 102, 102); }

.btn { padding: 11px 23px; }

.card { box-shadow: rgba(27, 49, 57, 0.1) 0px 4px 30px; border: 2px solid transparent; font-size: 19px; line-height: 25px; }

.card:hover { border-bottom: 2px solid rgb(245, 91, 20); cursor: pointer; box-shadow: rgba(27, 49, 57, 0.15) 0px 14px 40px; }

.card a { text-decoration: none; color: rgb(102, 102, 102); }

.card a:hover { text-decoration: none; color: rgb(102, 102, 102); }

.card-body img { margin-right: 20px; }

.tm { font-size: 12px; bottom: 5px; position: relative; }

.ecosystem-title { font-style: normal; font-weight: bold; font-size: 20px; line-height: 33px; text-align: center; color: rgb(245, 91, 20); }

.scalable-data-science a { font-style: normal; font-weight: bold; font-size: 20px; line-height: 33px; color: rgb(11, 154, 206); text-decoration: none; }

.scalable-data-science p { font-style: normal; font-weight: normal; font-size: 18px; line-height: 24px; }

@media (max-width: 768px) {
  .hero-banner { background-size: 390px; background-position: right 40px; }
  .hero-banner .bg { transform: translate(46%, -5%); }
  .hero-banner h1 { margin-bottom: 30px; }
  .apache-spark-motto { font-size: 90px; margin: 120px 0px; }
  .features { margin-top: 53px; }
  .features:first-child { margin-top: 0px; }
  .border-end { border-right: 1px solid transparent !important; border-bottom: 1px solid rgb(222, 226, 230) !important; }
  .hero-banner .bg { display: none; }
}

@media (max-width: 320px) {
  .hero-banner { background: none; }
  .navbar-dark .navbar-nav .nav-link.active, .navbar-dark .navbar-nav .show > .nav-link, .navbar-dark .navbar-nav .nav-link { padding-left: 1rem; }
  .hero-banner h1 { line-height: 65px; }
  .apache-spark-motto { font-size: 70px; margin: 0px 0px 50px; line-height: 80px; }
}

a { background: transparent; }

a:active, a:hover { outline: 0px; }

@media print {
  * { color: rgb(0, 0, 0) !important; text-shadow: none !important; background: transparent !important; box-shadow: none !important; }
  a, a:visited { text-decoration: underline; }
  a[href]::after { content: " (" attr(href) ")"; }
  p { orphans: 3; widows: 3; }
  pre { border: 1px solid rgb(153, 153, 153); break-inside: avoid; }
  .global pre { border: 1px solid rgb(153, 153, 153); break-inside: avoid; }
  h3 { orphans: 3; widows: 3; }
  h3 { break-after: avoid; }
}

*, ::before, ::after { box-sizing: border-box; }

a { color: rgb(47, 164, 231); text-decoration: none; }

a:hover, a:focus { color: rgb(21, 122, 181); text-decoration: underline; }

a:focus { outline: -webkit-focus-ring-color auto 5px; outline-offset: -2px; }

h5 { font-family: "Helvetica Neue", Helvetica, Arial, sans-serif; font-weight: 500; line-height: 1.1; color: rgb(49, 126, 172); }

h5 { margin-top: 10px; margin-bottom: 10px; }

h5 { font-size: 14px; }

p { margin: 0px 0px 10px; }

.small { font-size: 85%; }

ul { margin-top: 0px; margin-bottom: 10px; }

.list-unstyled { padding-left: 0px; list-style: none; }

.news { background: rgb(255, 246, 237); border-radius: 6px; padding: 4px 12px 1px; }

.news h5 { color: rgb(85, 85, 85); }

.news ul li { margin-bottom: 6px; }

.news li a, .news li a:hover, .news li a:visited { color: rgb(85, 85, 85); }

.news li .small { color: rgb(136, 136, 136); font-size: 12px; }

.news h5 { font-size: 16px; }

code, pre { font-family: monospace, serif; font-size: 1em; }

pre { white-space: pre-wrap; }

code, pre { font-family: Menlo, Monaco, Consolas, "Courier New", monospace; }

code { padding: 2px 4px; font-size: 90%; color: rgb(199, 37, 78); white-space: nowrap; background-color: rgb(249, 242, 244); border-radius: 4px; }

pre { display: block; padding: 20px; margin: 0px 0px 10px; font-size: 13px; line-height: 1.42857; color: rgb(51, 51, 51); word-break: break-all; overflow-wrap: break-word; background-color: rgb(245, 245, 245); border: 1px solid rgb(204, 204, 204); border-radius: 4px; }

pre code { padding: 0px; font-size: inherit; color: inherit; white-space: pre-wrap; background-color: transparent; border-radius: 0px; }

code { font-family: Menlo, "Lucida Console", Consolas, monospace; background: transparent; padding: 0px; color: inherit; }

.code .sparkop { color: rgb(22, 99, 168); }

.code .closure { color: rgb(193, 19, 14); }

h3 { font-family: "Helvetica Neue", Helvetica, Arial, sans-serif; font-weight: 500; line-height: 1.1; color: rgb(49, 126, 172); }

h3 { margin-top: 20px; margin-bottom: 10px; font-size: 20px; }

ul { margin-top: 0px; margin-bottom: 10px; }

.list-none { list-style: none; padding: 0px; }

.jumbotron { padding: 30px; margin-bottom: 30px; font-size: 21px; font-weight: 200; line-height: 2.14286; color: inherit; background-color: rgb(238, 238, 238); }

.container .jumbotron { border-radius: 6px; }

@media screen and (min-width: 768px) {
  .jumbotron { padding-top: 48px; padding-bottom: 48px; }
  .container .jumbotron { padding-right: 60px; padding-left: 60px; }
}

@media screen and (max-width: 990px) {
  .navbar-nav { font-size: 16px; }
  .features .details { margin-right: 0px !important; }
}

@media screen and (min-width: 1441px) {
  .navbar-nav, .navbar .nav-item:hover .dropdown-menu { font-size: 16px; }
}

.jumbotron { padding: 20px; margin-bottom: 20px; color: rgb(85, 85, 85); background: rgb(238, 246, 253); text-align: center; line-height: inherit; }

.jumbotron { font-size: 18px; }

@media (min-width: 768px) {
  .jumbotron { font-size: 19px; }
}

@media (min-width: 992px) {
  .jumbotron { font-size: 21px; }
}

.col-padded-top { margin-top: 30px; margin-bottom: 18px; }

.col-center { text-align: center; }

.nav > li > a { position: relative; display: block; padding: 10px 15px; }

.nav > li > a:hover, .nav > li > a:focus { text-decoration: none; background-color: rgb(238, 238, 238); }

.nav-tabs > li > a { margin-right: 2px; line-height: 1.42857; border: 1px solid transparent; border-radius: 4px 4px 0px 0px; }

.nav-tabs > li > a:hover { border-color: rgb(238, 238, 238) rgb(238, 238, 238) rgb(221, 221, 221); }

.nav-tabs > li.active > a, .nav-tabs > li.active > a:hover, .nav-tabs > li.active > a:focus { color: rgb(85, 85, 85); cursor: default; background-color: rgb(255, 255, 255); border-width: 1px; border-style: solid; border-color: rgb(221, 221, 221) rgb(221, 221, 221) transparent; border-image: initial; }

.nav.nav-tabs > li > a { padding: 6px 11px; font-size: 14px; border-radius: 0px; }

.global .row-padded { margin-top: 30px; }

.global .col-padded { margin-top: 30px; margin-bottom: 30px; }

.global h1, .global h2, .global h3, .global h4, .global h5, .global h6, .global .h1, .global .h2, .global .h3, .global .h4, .global .h5, .global .h6 { color: rgb(49, 126, 172); }

.global h1, .global h2, .global h3 { margin-top: 20px; margin-bottom: 10px; }

.global h1, .global .h1 { font-size: 30px; }

#content h1.title { font-size: 40px; }

.global h2 { font-size: 24px !important; }

.global h3 { font-size: 20px !important; }

.global h4 { font-size: 18px !important; }

.global h5 { font-size: 16px !important; }

.global h1::first-letter, .global h2::first-letter, .global h3::first-letter, .global h4::first-letter, .global h5::first-letter, .global h6::first-letter, .global .h1::first-letter, .global .h2::first-letter, .global .h3::first-letter, .global .h4::first-letter, .global .h5::first-letter, .global .h6::first-letter { text-transform: uppercase; }

.global .caption { width: 100%; margin-top: 20px; text-align: center; color: rgb(143, 143, 143); }

.global .code { font-family: Menlo, "Lucida Console", Consolas, monospace; font-size: 12px; }

@media (min-width: 1200px) {
  .global .code { font-size: 13px; }
}

.global .code .string { color: rgb(43, 142, 235); }

.global .code .sparkop { color: rgb(22, 99, 168); }

.global figure { display: block; }

.global code, .global pre { font-family: monospace, serif; font-size: 1em; }

.global pre { white-space: pre-wrap; }

.global figure { margin: 0px; }

.global code, .global pre { font-family: Menlo, Monaco, Consolas, "Courier New", monospace; }

.global code { padding: 2px 4px; font-size: 90%; color: rgb(199, 37, 78); white-space: nowrap; background-color: rgb(249, 242, 244); border-radius: 4px; }

.global pre { display: block; padding: 9.5px; margin: 0px 0px 10px; font-size: 13px; line-height: 1.42857; color: rgb(51, 51, 51); word-break: break-all; overflow-wrap: break-word; background-color: rgb(245, 245, 245); border: 1px solid rgb(204, 204, 204); border-radius: 4px; }

.global pre code { padding: 0px; font-size: inherit; color: inherit; white-space: pre-wrap; background-color: transparent; border-radius: 0px; }

.global .code { font-family: Menlo, "Lucida Console", Consolas, monospace; font-size: 12px; }

@media (min-width: 1200px) {
  .global .code { font-size: 13px; }
}

.global code { font-family: Menlo, "Lucida Console", Consolas, monospace; background: transparent; padding: 0px; color: inherit; }

.global .code-tab { margin-bottom: 10px; border-bottom: 1px solid rgb(221, 221, 221); }

footer { text-align: center; color: rgb(143, 143, 143); padding-bottom: 18px; font-size: 80%; }

footer a { display: contents; }

h1 .tm, h2 .tm, h3 .tm { bottom: 10px; }

.question { font-size: 16px; margin-top: 20px; color: rgb(85, 85, 85); font-weight: 500; }

blockquote { display: block; margin-block: 1em; margin-inline: 40px; padding: 0px 1em; color: rgba(0, 0, 0, 0.5); border-left: 0.25em solid rgba(0, 0, 0, 0.1); }

.content { z-index: 1; position: relative; background-color: rgb(255, 255, 255); max-width: 914px; line-height: 1.6; }

.content-with-sidebar { z-index: 1; position: relative; background-color: rgb(255, 255, 255); max-width: 914px; line-height: 1.6; padding-left: 30px; min-height: 100vh; }

.left-menu-wrapper { margin-left: 0px; margin-right: 0px; border-top-width: 0px; border-left-width: 0px; border-bottom-width: 0px; margin-top: 0px; width: 220px; height: 80%; float: left; position: fixed; overflow-y: scroll; padding-right: 20px; font-size: 0.9em !important; }

.left-menu h3 { margin-left: 10px; line-height: 30px; }

.nav-trigger { position: fixed; clip: rect(0px, 0px, 0px, 0px); }

.nav-trigger + label::after { content: "»"; }

label { z-index: 10; }

label[for="nav-trigger"] { position: fixed; margin-left: 0px; padding-top: 100px; padding-left: 5px; width: 10px; height: 80%; cursor: pointer; background-size: contain; background-color: rgb(226, 226, 226); box-sizing: content-box; }

label[for="nav-trigger"]:hover { background-color: rgb(208, 205, 205); }

.nav-trigger:checked + label { margin-left: 200px; }

.nav-trigger:checked + label::after { content: "«"; }

.nav-trigger:checked ~ div.content-with-sidebar { margin-left: 200px; }

.nav-trigger + label, div.content-with-sidebar { transition: left 0.4s ease 0s; }

@media (max-width: 780px) {
  div.content-with-sidebar { margin-left: 200px; }
  .nav-trigger + label::after { content: "«"; }
  label[for="nav-trigger"] { margin-left: 200px; }
  .nav-trigger:checked + label { margin-left: 0px; }
  .nav-trigger:checked + label::after { content: "»"; }
  .nav-trigger:checked ~ div.content-with-sidebar { margin-left: 0px; }
  div.container-index { margin-left: -215px; }
}

img { max-width: 100%; }

table { width: 100%; overflow-wrap: normal; border-collapse: collapse; }

table th, table td { border: 1px solid rgb(204, 204, 204); padding: 6px 13px; }

table tr { background-color: white; }

table tr:nth-child(2n) { background-color: rgb(241, 244, 245); }
------MultipartBoundary--42RUKswPkJoFcXtXRQMfSJHaGrWLU1MbiIJyTI5ZSP----
Content-Type: text/css
Content-Transfer-Encoding: binary
Content-Location: https://spark.apache.org/docs/latest/css/pygments-default.css

@charset "utf-8";

.hll { background-color: rgb(255, 255, 204); }

.c { color: rgb(96, 160, 176); font-style: italic; }

.err { }

.k { color: rgb(0, 112, 32); font-weight: bold; }

.o { color: rgb(102, 102, 102); }

.cm { color: rgb(96, 160, 176); font-style: italic; }

.cp { color: rgb(0, 112, 32); }

.c1 { color: rgb(96, 160, 176); font-style: italic; }

.cs { color: rgb(96, 160, 176); background-color: rgb(255, 240, 240); }

.gd { color: rgb(160, 0, 0); }

.ge { font-style: italic; }

.gr { color: rgb(255, 0, 0); }

.gh { color: rgb(0, 0, 128); font-weight: bold; }

.gi { color: rgb(0, 160, 0); }

.go { color: rgb(128, 128, 128); }

.gp { color: rgb(198, 93, 9); font-weight: bold; }

.gs { font-weight: bold; }

.gu { color: rgb(128, 0, 128); font-weight: bold; }

.gt { color: rgb(0, 64, 208); }

.kc { color: rgb(0, 112, 32); font-weight: bold; }

.kd { color: rgb(0, 112, 32); font-weight: bold; }

.kn { color: rgb(0, 112, 32); font-weight: bold; }

.kp { color: rgb(0, 112, 32); }

.kr { color: rgb(0, 112, 32); font-weight: bold; }

.kt { color: rgb(144, 32, 0); }

.m { color: rgb(64, 160, 112); }

.s { color: rgb(64, 112, 160); }

.na { color: rgb(64, 112, 160); }

.nb { color: rgb(0, 112, 32); }

.nc { color: rgb(14, 132, 181); font-weight: bold; }

.no { color: rgb(96, 173, 213); }

.nd { color: rgb(85, 85, 85); font-weight: bold; }

.ni { color: rgb(213, 85, 55); font-weight: bold; }

.ne { color: rgb(0, 112, 32); }

.nf { color: rgb(6, 40, 126); }

.nl { color: rgb(0, 32, 112); font-weight: bold; }

.nn { color: rgb(14, 132, 181); font-weight: bold; }

.nt { color: rgb(6, 40, 115); font-weight: bold; }

.nv { color: rgb(187, 96, 213); }

.ow { color: rgb(0, 112, 32); font-weight: bold; }

.w { color: rgb(187, 187, 187); }

.mf { color: rgb(64, 160, 112); }

.mh { color: rgb(64, 160, 112); }

.mi { color: rgb(64, 160, 112); }

.mo { color: rgb(64, 160, 112); }

.sb { color: rgb(64, 112, 160); }

.sc { color: rgb(64, 112, 160); }

.sd { color: rgb(64, 112, 160); font-style: italic; }

.s2 { color: rgb(64, 112, 160); }

.se { color: rgb(64, 112, 160); font-weight: bold; }

.sh { color: rgb(64, 112, 160); }

.si { color: rgb(112, 160, 208); font-style: italic; }

.sx { color: rgb(198, 93, 9); }

.sr { color: rgb(35, 83, 136); }

.s1 { color: rgb(64, 112, 160); }

.ss { color: rgb(81, 121, 24); }

.bp { color: rgb(0, 112, 32); }

.vc { color: rgb(187, 96, 213); }

.vg { color: rgb(187, 96, 213); }

.vi { color: rgb(187, 96, 213); }

.il { color: rgb(64, 160, 112); }
------MultipartBoundary--42RUKswPkJoFcXtXRQMfSJHaGrWLU1MbiIJyTI5ZSP----
Content-Type: text/css
Content-Transfer-Encoding: binary
Content-Location: https://cdn.jsdelivr.net/npm/docsearch.js@2/dist/cdn/docsearch.min.css

@charset "utf-8";

.searchbox { display: inline-block; position: relative; width: 200px; white-space: nowrap; box-sizing: border-box; height: 32px !important; visibility: visible !important; }

.searchbox .algolia-autocomplete { display: block; width: 100%; height: 100%; }

.searchbox__wrapper { width: 100%; height: 100%; z-index: 999; position: relative; }

.searchbox__input { display: inline-block; box-sizing: border-box; transition: box-shadow 0.4s ease 0s, background 0.4s ease 0s; border: 0px; border-radius: 16px; box-shadow: rgb(204, 204, 204) 0px 0px 0px 1px inset; padding: 0px 26px 0px 32px; width: 100%; height: 100%; vertical-align: middle; white-space: normal; font-size: 12px; appearance: none; background: rgb(255, 255, 255) !important; }

.searchbox__input::-webkit-search-cancel-button, .searchbox__input::-webkit-search-decoration, .searchbox__input::-webkit-search-results-button, .searchbox__input::-webkit-search-results-decoration { display: none; }

.searchbox__input:hover { box-shadow: rgb(179, 179, 179) 0px 0px 0px 1px inset; }

.searchbox__input:active, .searchbox__input:focus { outline: 0px; box-shadow: rgb(170, 170, 170) 0px 0px 0px 1px inset; background: rgb(255, 255, 255); }

.searchbox__input::-webkit-input-placeholder { color: rgb(170, 170, 170); }

.searchbox__input::placeholder { color: rgb(170, 170, 170); }

.searchbox__submit { position: absolute; top: 0px; margin: 0px; border: 0px; border-radius: 16px 0px 0px 16px; background-color: rgba(69, 142, 225, 0); padding: 0px; width: 32px; height: 100%; vertical-align: middle; text-align: center; font-size: inherit; user-select: none; right: inherit; left: 0px; }

.searchbox__submit::before { display: inline-block; margin-right: -4px; height: 100%; vertical-align: middle; content: ""; }

.searchbox__submit:active, .searchbox__submit:hover { cursor: pointer; }

.searchbox__submit:focus { outline: 0px; }

.searchbox__submit svg { width: 14px; height: 14px; vertical-align: middle; fill: rgb(109, 126, 150); }

.searchbox__reset { display: block; position: absolute; top: 8px; right: 8px; margin: 0px; border: 0px; background: none; cursor: pointer; padding: 0px; font-size: inherit; user-select: none; fill: rgba(0, 0, 0, 0.5); }

.searchbox__reset.hide { display: none; }

.searchbox__reset:focus { outline: 0px; }

.searchbox__reset svg { display: block; margin: 4px; width: 8px; height: 8px; }

.searchbox__input:valid ~ .searchbox__reset { display: block; animation-name: sbx-reset-in; animation-duration: 0.15s; }

@-webkit-keyframes sbx-reset-in { 
  0% { transform: translate3d(-20%, 0px, 0px); opacity: 0; }
  100% { transform: none; opacity: 1; }
}

@keyframes sbx-reset-in { 
  0% { transform: translate3d(-20%, 0px, 0px); opacity: 0; }
  100% { transform: none; opacity: 1; }
}

.algolia-autocomplete.algolia-autocomplete-right .ds-dropdown-menu { right: 0px !important; left: inherit !important; }

.algolia-autocomplete.algolia-autocomplete-right .ds-dropdown-menu::before { right: 48px; }

.algolia-autocomplete.algolia-autocomplete-left .ds-dropdown-menu { left: 0px !important; right: inherit !important; }

.algolia-autocomplete.algolia-autocomplete-left .ds-dropdown-menu::before { left: 48px; }

.algolia-autocomplete .ds-dropdown-menu { top: -6px; border-radius: 4px; margin: 6px 0px 0px; padding: 0px; text-align: left; height: auto; position: relative; background: transparent; border: none; z-index: 999; max-width: 600px; min-width: 500px; box-shadow: rgba(0, 0, 0, 0.2) 0px 1px 0px 0px, rgba(0, 0, 0, 0.1) 0px 2px 3px 0px; }

.algolia-autocomplete .ds-dropdown-menu::before { display: block; position: absolute; content: ""; width: 14px; height: 14px; background: rgb(255, 255, 255); z-index: 1000; top: -7px; border-top: 1px solid rgb(217, 217, 217); border-right: 1px solid rgb(217, 217, 217); transform: rotate(-45deg); border-radius: 2px; }

.algolia-autocomplete .ds-dropdown-menu .ds-suggestions { position: relative; z-index: 1000; margin-top: 8px; }

.algolia-autocomplete .ds-dropdown-menu .ds-suggestions a:hover { text-decoration: none; }

.algolia-autocomplete .ds-dropdown-menu .ds-suggestion { cursor: pointer; }

.algolia-autocomplete .ds-dropdown-menu .ds-suggestion.ds-cursor .algolia-docsearch-suggestion.suggestion-layout-simple, .algolia-autocomplete .ds-dropdown-menu .ds-suggestion.ds-cursor .algolia-docsearch-suggestion:not(.suggestion-layout-simple) .algolia-docsearch-suggestion--content { background-color: rgba(69, 142, 225, 0.05); }

.algolia-autocomplete .ds-dropdown-menu [class^="ds-dataset-"] { position: relative; border: 1px solid rgb(217, 217, 217); background: rgb(255, 255, 255); border-radius: 4px; overflow: auto; padding: 0px 8px 8px; }

.algolia-autocomplete .ds-dropdown-menu * { box-sizing: border-box; }

.algolia-autocomplete .algolia-docsearch-suggestion { display: block; position: relative; padding: 0px 8px; background: rgb(255, 255, 255); color: rgb(2, 6, 12); overflow: hidden; }

.algolia-autocomplete .algolia-docsearch-suggestion--highlight { color: rgb(23, 77, 140); background: rgba(143, 187, 237, 0.1); padding: 0.1em 0.05em; }

.algolia-autocomplete .algolia-docsearch-suggestion--category-header .algolia-docsearch-suggestion--category-header-lvl0 .algolia-docsearch-suggestion--highlight, .algolia-autocomplete .algolia-docsearch-suggestion--category-header .algolia-docsearch-suggestion--category-header-lvl1 .algolia-docsearch-suggestion--highlight, .algolia-autocomplete .algolia-docsearch-suggestion--text .algolia-docsearch-suggestion--highlight { padding: 0px 0px 1px; background: inherit; box-shadow: rgba(69, 142, 225, 0.8) 0px -2px 0px 0px inset; color: inherit; }

.algolia-autocomplete .algolia-docsearch-suggestion--content { display: block; float: right; width: 70%; position: relative; padding: 5.33333px 0px 5.33333px 10.6667px; cursor: pointer; }

.algolia-autocomplete .algolia-docsearch-suggestion--content::before { content: ""; position: absolute; display: block; top: 0px; height: 100%; width: 1px; background: rgb(221, 221, 221); left: -1px; }

.algolia-autocomplete .algolia-docsearch-suggestion--category-header { position: relative; border-bottom: 1px solid rgb(221, 221, 221); display: none; margin-top: 8px; padding: 4px 0px; font-size: 1em; color: rgb(51, 54, 61); }

.algolia-autocomplete .algolia-docsearch-suggestion--wrapper { width: 100%; float: left; padding: 8px 0px 0px; }

.algolia-autocomplete .algolia-docsearch-suggestion--subcategory-column { float: left; width: 30%; text-align: right; position: relative; padding: 5.33333px 10.6667px; color: rgb(164, 167, 174); font-size: 0.9em; overflow-wrap: break-word; }

.algolia-autocomplete .algolia-docsearch-suggestion--subcategory-column::before { content: ""; position: absolute; display: block; top: 0px; height: 100%; width: 1px; background: rgb(221, 221, 221); right: 0px; }

.algolia-autocomplete .algolia-docsearch-suggestion--subcategory-inline { display: none; }

.algolia-autocomplete .algolia-docsearch-suggestion--title { margin-bottom: 4px; color: rgb(2, 6, 12); font-size: 0.9em; font-weight: 700; }

.algolia-autocomplete .algolia-docsearch-suggestion--text { display: block; line-height: 1.2em; font-size: 0.85em; color: rgb(99, 103, 109); }

.algolia-autocomplete .algolia-docsearch-suggestion--no-results { width: 100%; padding: 8px 0px; text-align: center; font-size: 1.2em; }

.algolia-autocomplete .algolia-docsearch-suggestion--no-results::before { display: none; }

.algolia-autocomplete .algolia-docsearch-suggestion code { padding: 1px 5px; font-size: 90%; border: none; color: rgb(34, 34, 34); background-color: rgb(235, 235, 235); border-radius: 3px; font-family: Menlo, Monaco, Consolas, "Courier New", monospace; }

.algolia-autocomplete .algolia-docsearch-suggestion code .algolia-docsearch-suggestion--highlight { background: none; }

.algolia-autocomplete .algolia-docsearch-suggestion.algolia-docsearch-suggestion__main .algolia-docsearch-suggestion--category-header, .algolia-autocomplete .algolia-docsearch-suggestion.algolia-docsearch-suggestion__secondary { display: block; }

@media (min-width: 768px) {
  .algolia-autocomplete .algolia-docsearch-suggestion .algolia-docsearch-suggestion--subcategory-column { display: block; }
}

@media (max-width: 768px) {
  .algolia-autocomplete .algolia-docsearch-suggestion .algolia-docsearch-suggestion--subcategory-column { display: inline-block; width: auto; float: left; padding: 0px; color: rgb(2, 6, 12); font-size: 0.9em; font-weight: 700; text-align: left; opacity: 0.5; }
  .algolia-autocomplete .algolia-docsearch-suggestion .algolia-docsearch-suggestion--subcategory-column::before { display: none; }
  .algolia-autocomplete .algolia-docsearch-suggestion .algolia-docsearch-suggestion--subcategory-column::after { content: "|"; }
  .algolia-autocomplete .algolia-docsearch-suggestion .algolia-docsearch-suggestion--content { display: inline-block; width: auto; text-align: left; float: left; padding: 0px; }
  .algolia-autocomplete .algolia-docsearch-suggestion .algolia-docsearch-suggestion--content::before { display: none; }
}

.algolia-autocomplete .suggestion-layout-simple.algolia-docsearch-suggestion { border-bottom: 1px solid rgb(238, 238, 238); padding: 8px; margin: 0px; }

.algolia-autocomplete .suggestion-layout-simple .algolia-docsearch-suggestion--content { width: 100%; padding: 0px; }

.algolia-autocomplete .suggestion-layout-simple .algolia-docsearch-suggestion--content::before { display: none; }

.algolia-autocomplete .suggestion-layout-simple .algolia-docsearch-suggestion--category-header { margin: 0px; padding: 0px; display: block; width: 100%; border: none; }

.algolia-autocomplete .suggestion-layout-simple .algolia-docsearch-suggestion--category-header-lvl0, .algolia-autocomplete .suggestion-layout-simple .algolia-docsearch-suggestion--category-header-lvl1 { opacity: 0.6; font-size: 0.85em; }

.algolia-autocomplete .suggestion-layout-simple .algolia-docsearch-suggestion--category-header-lvl1::before { background-image: url("data:image/svg+xml;utf8,<svg width=\"10\" height=\"10\" viewBox=\"0 0 20 38\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M1.49 4.31l14 16.126.002-2.624-14 16.074-1.314 1.51 3.017 2.626 1.313-1.508 14-16.075 1.142-1.313-1.14-1.313-14-16.125L3.2.18.18 2.8l1.31 1.51z\" fill-rule=\"evenodd\" fill=\"%231D3657\" /></svg>"); content: ""; width: 10px; height: 10px; display: inline-block; }

.algolia-autocomplete .suggestion-layout-simple .algolia-docsearch-suggestion--wrapper { width: 100%; float: left; margin: 0px; padding: 0px; }

.algolia-autocomplete .suggestion-layout-simple .algolia-docsearch-suggestion--duplicate-content, .algolia-autocomplete .suggestion-layout-simple .algolia-docsearch-suggestion--subcategory-inline { display: none !important; }

.algolia-autocomplete .suggestion-layout-simple .algolia-docsearch-suggestion--title { margin: 0px; color: rgb(69, 142, 225); font-size: 0.9em; font-weight: 400; }

.algolia-autocomplete .suggestion-layout-simple .algolia-docsearch-suggestion--title::before { content: "#"; font-weight: 700; color: rgb(69, 142, 225); display: inline-block; }

.algolia-autocomplete .suggestion-layout-simple .algolia-docsearch-suggestion--text { margin: 4px 0px 0px; display: block; line-height: 1.4em; padding: 5.33333px 8px; background: rgb(248, 248, 248); font-size: 0.85em; opacity: 0.8; }

.algolia-autocomplete .suggestion-layout-simple .algolia-docsearch-suggestion--text .algolia-docsearch-suggestion--highlight { color: rgb(63, 65, 69); font-weight: 700; box-shadow: none; }

.algolia-autocomplete .algolia-docsearch-footer { width: 134px; height: 20px; z-index: 2000; margin-top: 10.6667px; float: right; font-size: 0px; line-height: 0; }

.algolia-autocomplete .algolia-docsearch-footer--logo { background-image: url("data:image/svg+xml;charset=utf-8,%3Csvg width='168' height='24' xmlns='http://www.w3.org/2000/svg'%3E%3Cg fill='none' fill-rule='evenodd'%3E%3Cpath d='M78.988.938h16.594a2.968 2.968 0 0 1 2.966 2.966V20.5a2.967 2.967 0 0 1-2.966 2.964H78.988a2.967 2.967 0 0 1-2.966-2.964V3.897A2.961 2.961 0 0 1 78.988.938zm41.937 17.866c-4.386.02-4.386-3.54-4.386-4.106l-.007-13.336 2.675-.424v13.254c0 .322 0 2.358 1.718 2.364v2.248zm-10.846-2.18c.821 0 1.43-.047 1.855-.129v-2.719a6.334 6.334 0 0 0-1.574-.199 5.7 5.7 0 0 0-.897.069 2.699 2.699 0 0 0-.814.24c-.24.116-.439.28-.582.491-.15.212-.219.335-.219.656 0 .628.219.991.616 1.23s.938.362 1.615.362zm-.233-9.7c.883 0 1.629.109 2.231.328.602.218 1.088.525 1.444.915.363.396.609.922.76 1.483.157.56.232 1.175.232 1.85v6.874a32.5 32.5 0 0 1-1.868.314c-.834.123-1.772.185-2.813.185-.69 0-1.327-.069-1.895-.198a4.001 4.001 0 0 1-1.471-.636 3.085 3.085 0 0 1-.951-1.134c-.226-.465-.343-1.12-.343-1.803 0-.656.13-1.073.384-1.525a3.24 3.24 0 0 1 1.047-1.106c.445-.287.95-.492 1.532-.615a8.8 8.8 0 0 1 1.82-.185 8.404 8.404 0 0 1 1.972.24v-.438c0-.307-.035-.6-.11-.874a1.88 1.88 0 0 0-.384-.73 1.784 1.784 0 0 0-.724-.493 3.164 3.164 0 0 0-1.143-.205c-.616 0-1.177.075-1.69.164a7.735 7.735 0 0 0-1.26.307l-.321-2.192c.335-.117.834-.233 1.478-.349a10.98 10.98 0 0 1 2.073-.178zm52.842 9.626c.822 0 1.43-.048 1.854-.13V13.7a6.347 6.347 0 0 0-1.574-.199c-.294 0-.595.021-.896.069a2.7 2.7 0 0 0-.814.24 1.46 1.46 0 0 0-.582.491c-.15.212-.218.335-.218.656 0 .628.218.991.615 1.23.404.245.938.362 1.615.362zm-.226-9.694c.883 0 1.629.108 2.231.327.602.219 1.088.526 1.444.915.355.39.609.923.759 1.483a6.8 6.8 0 0 1 .233 1.852v6.873c-.41.088-1.034.19-1.868.314-.834.123-1.772.184-2.813.184-.69 0-1.327-.068-1.895-.198a4.001 4.001 0 0 1-1.471-.635 3.085 3.085 0 0 1-.951-1.134c-.226-.465-.343-1.12-.343-1.804 0-.656.13-1.073.384-1.524.26-.45.608-.82 1.047-1.107.445-.286.95-.491 1.532-.614a8.803 8.803 0 0 1 2.751-.13c.329.034.671.096 1.04.185v-.437a3.3 3.3 0 0 0-.109-.875 1.873 1.873 0 0 0-.384-.731 1.784 1.784 0 0 0-.724-.492 3.165 3.165 0 0 0-1.143-.205c-.616 0-1.177.075-1.69.164a7.75 7.75 0 0 0-1.26.307l-.321-2.193c.335-.116.834-.232 1.478-.348a11.633 11.633 0 0 1 2.073-.177zm-8.034-1.271a1.626 1.626 0 0 1-1.628-1.62c0-.895.725-1.62 1.628-1.62.904 0 1.63.725 1.63 1.62 0 .895-.733 1.62-1.63 1.62zm1.348 13.22h-2.689V7.27l2.69-.423v11.956zm-4.714 0c-4.386.02-4.386-3.54-4.386-4.107l-.008-13.336 2.676-.424v13.254c0 .322 0 2.358 1.718 2.364v2.248zm-8.698-5.903c0-1.156-.253-2.119-.746-2.788-.493-.677-1.183-1.01-2.067-1.01-.882 0-1.574.333-2.065 1.01-.493.676-.733 1.632-.733 2.788 0 1.168.246 1.953.74 2.63.492.683 1.183 1.018 2.066 1.018.882 0 1.574-.342 2.067-1.019.492-.683.738-1.46.738-2.63zm2.737-.007c0 .902-.13 1.584-.397 2.33a5.52 5.52 0 0 1-1.128 1.906 4.986 4.986 0 0 1-1.752 1.223c-.685.286-1.739.45-2.265.45-.528-.006-1.574-.157-2.252-.45a5.096 5.096 0 0 1-1.744-1.223c-.487-.527-.863-1.162-1.137-1.906a6.345 6.345 0 0 1-.41-2.33c0-.902.123-1.77.397-2.508a5.554 5.554 0 0 1 1.15-1.892 5.133 5.133 0 0 1 1.75-1.216c.679-.287 1.425-.423 2.232-.423.808 0 1.553.142 2.237.423a4.88 4.88 0 0 1 1.753 1.216 5.644 5.644 0 0 1 1.135 1.892c.287.738.431 1.606.431 2.508zm-20.138 0c0 1.12.246 2.363.738 2.882.493.52 1.13.78 1.91.78.424 0 .828-.062 1.204-.178.377-.116.677-.253.917-.417V9.33a10.476 10.476 0 0 0-1.766-.226c-.971-.028-1.71.37-2.23 1.004-.513.636-.773 1.75-.773 2.788zm7.438 5.274c0 1.824-.466 3.156-1.404 4.004-.936.846-2.367 1.27-4.296 1.27-.705 0-2.17-.137-3.34-.396l.431-2.118c.98.205 2.272.26 2.95.26 1.074 0 1.84-.219 2.299-.656.459-.437.684-1.086.684-1.948v-.437a8.07 8.07 0 0 1-1.047.397c-.43.13-.93.198-1.492.198-.739 0-1.41-.116-2.018-.349a4.206 4.206 0 0 1-1.567-1.025c-.431-.45-.774-1.017-1.013-1.694-.24-.677-.363-1.885-.363-2.773 0-.834.13-1.88.384-2.577.26-.696.629-1.298 1.129-1.796.493-.498 1.095-.881 1.8-1.162a6.605 6.605 0 0 1 2.428-.457c.87 0 1.67.109 2.45.24.78.129 1.444.265 1.985.415V18.17z' fill='%235468FF'/%3E%3Cpath d='M6.972 6.677v1.627c-.712-.446-1.52-.67-2.425-.67-.585 0-1.045.13-1.38.391a1.24 1.24 0 0 0-.502 1.03c0 .425.164.765.494 1.02.33.256.835.532 1.516.83.447.192.795.356 1.045.495.25.138.537.332.862.582.324.25.563.548.718.894.154.345.23.741.23 1.188 0 .947-.334 1.691-1.004 2.234-.67.542-1.537.814-2.601.814-1.18 0-2.16-.229-2.936-.686v-1.708c.84.628 1.814.942 2.92.942.585 0 1.048-.136 1.388-.407.34-.271.51-.646.51-1.125 0-.287-.1-.55-.302-.79-.203-.24-.42-.42-.655-.542-.234-.123-.585-.29-1.053-.503a61.27 61.27 0 0 1-.582-.271 13.67 13.67 0 0 1-.55-.287 4.275 4.275 0 0 1-.567-.351 6.92 6.92 0 0 1-.455-.4c-.18-.17-.31-.34-.39-.51-.08-.17-.155-.37-.224-.598a2.553 2.553 0 0 1-.104-.742c0-.915.333-1.638.998-2.17.664-.532 1.523-.798 2.576-.798.968 0 1.793.17 2.473.51zm7.468 5.696v-.287c-.022-.607-.187-1.088-.495-1.444-.309-.357-.75-.535-1.324-.535-.532 0-.99.194-1.373.583-.382.388-.622.949-.717 1.683h3.909zm1.005 2.792v1.404c-.596.34-1.383.51-2.362.51-1.255 0-2.255-.377-3-1.132-.744-.755-1.116-1.744-1.116-2.968 0-1.297.34-2.316 1.021-3.055.68-.74 1.548-1.11 2.6-1.11 1.033 0 1.852.323 2.458.966.606.644.91 1.572.91 2.784 0 .33-.033.676-.096 1.038h-5.314c.107.702.405 1.239.894 1.611.49.372 1.106.558 1.85.558.862 0 1.58-.202 2.155-.606zm6.605-1.77h-1.212c-.596 0-1.045.116-1.349.35-.303.234-.454.532-.454.894 0 .372.117.664.35.877.235.213.575.32 1.022.32.51 0 .912-.142 1.204-.424.293-.281.44-.651.44-1.108v-.91zm-4.068-2.554V9.325c.627-.361 1.457-.542 2.489-.542 2.116 0 3.175 1.026 3.175 3.08V17h-1.548v-.957c-.415.68-1.143 1.02-2.186 1.02-.766 0-1.38-.22-1.843-.661-.462-.442-.694-1.003-.694-1.684 0-.776.293-1.38.878-1.81.585-.431 1.404-.647 2.457-.647h1.34V11.8c0-.554-.133-.971-.399-1.253-.266-.282-.707-.423-1.324-.423a4.07 4.07 0 0 0-2.345.718zm9.333-1.93v1.42c.394-1 1.101-1.5 2.123-1.5.148 0 .313.016.494.048v1.531a1.885 1.885 0 0 0-.75-.143c-.542 0-.989.24-1.34.718-.351.479-.527 1.048-.527 1.707V17h-1.563V8.91h1.563zm5.01 4.084c.022.82.272 1.492.75 2.019.479.526 1.15.79 2.01.79.639 0 1.235-.176 1.788-.527v1.404c-.521.319-1.186.479-1.995.479-1.265 0-2.276-.4-3.031-1.197-.755-.798-1.133-1.792-1.133-2.984 0-1.16.38-2.151 1.14-2.975.761-.825 1.79-1.237 3.088-1.237.702 0 1.346.149 1.93.447v1.436a3.242 3.242 0 0 0-1.77-.495c-.84 0-1.513.266-2.019.798-.505.532-.758 1.213-.758 2.042zM40.24 5.72v4.579c.458-1 1.293-1.5 2.505-1.5.787 0 1.42.245 1.899.734.479.49.718 1.17.718 2.042V17h-1.564v-5.106c0-.553-.14-.98-.422-1.284-.282-.303-.652-.455-1.11-.455-.531 0-1.002.202-1.411.606-.41.405-.615 1.022-.615 1.851V17h-1.563V5.72h1.563zm14.966 10.02c.596 0 1.096-.253 1.5-.758.404-.506.606-1.157.606-1.955 0-.915-.202-1.62-.606-2.114-.404-.495-.92-.742-1.548-.742-.553 0-1.05.224-1.491.67-.442.447-.662 1.133-.662 2.058 0 .958.212 1.67.638 2.138.425.469.946.703 1.563.703zM53.004 5.72v4.42c.574-.894 1.388-1.341 2.44-1.341 1.022 0 1.857.383 2.506 1.149.649.766.973 1.781.973 3.047 0 1.138-.309 2.109-.925 2.912-.617.803-1.463 1.205-2.537 1.205-1.075 0-1.894-.447-2.457-1.34V17h-1.58V5.72h1.58zm9.908 11.104l-3.223-7.913h1.739l1.005 2.632 1.26 3.415c.096-.32.48-1.458 1.15-3.415l.909-2.632h1.66l-2.92 7.866c-.777 2.074-1.963 3.11-3.559 3.11a2.92 2.92 0 0 1-.734-.079v-1.34c.17.042.351.064.543.064 1.032 0 1.755-.57 2.17-1.708z' fill='%235D6494'/%3E%3Cpath d='M89.632 5.967v-.772a.978.978 0 0 0-.978-.977h-2.28a.978.978 0 0 0-.978.977v.793c0 .088.082.15.171.13a7.127 7.127 0 0 1 1.984-.28c.65 0 1.295.088 1.917.259.082.02.164-.04.164-.13m-6.248 1.01l-.39-.389a.977.977 0 0 0-1.382 0l-.465.465a.973.973 0 0 0 0 1.38l.383.383c.062.061.15.047.205-.014.226-.307.472-.601.746-.874.281-.28.568-.526.883-.751.068-.042.075-.137.02-.2m4.16 2.453v3.341c0 .096.104.165.192.117l2.97-1.537c.068-.034.089-.117.055-.184a3.695 3.695 0 0 0-3.08-1.866c-.068 0-.136.054-.136.13m0 8.048a4.489 4.489 0 0 1-4.49-4.482 4.488 4.488 0 0 1 4.49-4.482 4.488 4.488 0 0 1 4.489 4.482 4.484 4.484 0 0 1-4.49 4.482m0-10.85a6.363 6.363 0 1 0 0 12.729 6.37 6.37 0 0 0 6.372-6.368 6.358 6.358 0 0 0-6.371-6.36' fill='%23FFF'/%3E%3C/g%3E%3C/svg%3E"); background-repeat: no-repeat; background-position: 50% center; background-size: 100%; overflow: hidden; text-indent: -9000px; width: 100%; height: 100%; display: block; padding: 0px !important; }
------MultipartBoundary--42RUKswPkJoFcXtXRQMfSJHaGrWLU1MbiIJyTI5ZSP----
Content-Type: text/css
Content-Transfer-Encoding: binary
Content-Location: https://spark.apache.org/docs/latest/css/docsearch.css

@charset "utf-8";

.algolia-autocomplete .ds-dropdown-menu { width: 500px; }

.algolia-autocomplete .algolia-docsearch-suggestion--category-header { color: darkgray; }

.algolia-autocomplete .algolia-docsearch-suggestion--subcategory-column { color: gray; }

.algolia-autocomplete .algolia-docsearch-suggestion--title { font-weight: bold; color: black; }

.algolia-autocomplete .algolia-docsearch-suggestion--text { font-size: 0.8rem; color: gray; }

.algolia-autocomplete .algolia-docsearch-suggestion--highlight { color: blue; }

.searchbox { margin-top: 2%; }
------MultipartBoundary--42RUKswPkJoFcXtXRQMfSJHaGrWLU1MbiIJyTI5ZSP------
